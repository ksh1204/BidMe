require 'eBay.rb'
require 'soap/mapping'

module DefaultMappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsEBLBaseComponents = "urn:ebay:apis:eBLBaseComponents"
  NsXMLSchema = "http://www.w3.org/2001/XMLSchema"

  EncodedRegistry.register(
    :class => AddDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeExplanation", ["DisputeExplanationCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeExplanation")], [0, 1]],
      ["disputeReason", ["DisputeReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeReason")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddDisputeResponseRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["messageText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageText")], [0, 1]],
      ["disputeActivity", ["DisputeActivityCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeActivity")], [0, 1]],
      ["shippingCarrierUsed", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierUsed")], [0, 1]],
      ["shipmentTrackNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackNumber")], [0, 1]],
      ["shippingTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippingTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddDisputeResponseResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddLiveAuctionItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddLiveAuctionItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessageAAQToPartnerRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessageAAQToPartnerResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessageRTQRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessageRTQResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessagesAAQToBidderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderRequestContainer", ["AddMemberMessagesAAQToBidderRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestContainer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessagesAAQToBidderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderResponseContainer", ["AddMemberMessagesAAQToBidderResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseContainer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AddOrderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddOrderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["order", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddOrderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddOrderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["createdTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddSecondChanceItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddSecondChanceItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddToItemDescriptionRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddToItemDescriptionResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddToWatchListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AddToWatchListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddTransactionConfirmationItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")]],
      ["verifyEligibilityOnly", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VerifyEligibilityOnly")]],
      ["recipientPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientPostalCode")]],
      ["recipientRelationType", ["RecipientRelationCodeType", XSD::QName.new(NsEBLBaseComponents, "RecipientRelationType")]],
      ["negotiatedPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "NegotiatedPrice")]],
      ["listingDuration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")]],
      ["comments", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Comments")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddTransactionConfirmationItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ApproveLiveAuctionBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidApproval", ["BidApprovalArrayType", XSD::QName.new(NsEBLBaseComponents, "BidApproval")], [0, 1]],
      ["approveAllPending", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApproveAllPending")], [0, 1]],
      ["allApprovedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AllApprovedBiddingLimit")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ApproveLiveAuctionBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderUpdateStatus", ["LiveAuctionApprovalStatusArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderUpdateStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => CompleteSaleRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["feedbackInfo", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackInfo")], [0, 1]],
      ["shipped", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Shipped")], [0, 1]],
      ["paid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Paid")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["shipment", ["ShipmentType", XSD::QName.new(NsEBLBaseComponents, "Shipment")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => CompleteSaleResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ConfirmIdentityRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ConfirmIdentityResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => DeleteMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => DeleteMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EndItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["endingReason", ["EndReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "EndingReason")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => EndItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FetchTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FetchTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["secretID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SecretID")], [0, 1]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]],
      ["includeRESTToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeRESTToken")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FetchTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FetchTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]],
      ["rESTToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RESTToken")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAccountRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAccountRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountHistorySelection", ["AccountHistorySelectionCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountHistorySelection")], [0, 1]],
      ["invoiceDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "InvoiceDate")], [0, 1]],
      ["beginDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "BeginDate")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndDate")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["excludeBalance", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeBalance")], [0, 1]],
      ["excludeSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeSummary")], [0, 1]],
      ["accountEntrySortType", ["AccountEntrySortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountEntrySortType")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAccountResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAccountResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AccountID")], [0, 1]],
      ["accountSummary", ["AccountSummaryType", XSD::QName.new(NsEBLBaseComponents, "AccountSummary")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["accountEntries", ["AccountEntriesType", XSD::QName.new(NsEBLBaseComponents, "AccountEntries")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreEntries", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreEntries")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAdFormatLeadsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["status", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["includeMemberMessages", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeMemberMessages")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAdFormatLeadsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["adFormatLead", ["AdFormatLeadType[]", XSD::QName.new(NsEBLBaseComponents, "AdFormatLead")], [0, nil]],
      ["adFormatLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAllBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["callMode", ["GetAllBiddersModeCodeType", XSD::QName.new(NsEBLBaseComponents, "CallMode")], [0, 1]],
      ["includeBiddingSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBiddingSummary")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAllBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["highBidder", [nil, XSD::QName.new(NsEBLBaseComponents, "HighBidder")], [0, 1]],
      ["highestBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighestBid")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetApiAccessRulesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetApiAccessRulesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["apiAccessRule", ["ApiAccessRuleType[]", XSD::QName.new(NsEBLBaseComponents, "ApiAccessRule")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAttributesCSRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, nil]],
      ["includeCategoryMappingDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCategoryMappingDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAttributesCSResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeData")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAttributesXSLRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetAttributesXSLResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetBestOffersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["bestOfferStatus", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetBestOffersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bestOfferArray", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferArray")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetBidderListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBidderListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["activeItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ActiveItemsOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetBidderListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBidderListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidder", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Bidder")], [0, 1]],
      ["bidItemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidItemArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categorySiteID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategorySiteID")], [0, 1]],
      ["categoryParent", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParent")], [0, nil]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["reservePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReservePriceAllowed")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["reduceReserveAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReduceReserveAllowed")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategory2CSRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategory2CSResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["mappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "MappedCategoryArray")], [0, 1]],
      ["unmappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "UnmappedCategoryArray")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["siteWideCharacteristicSets", ["SiteWideCharacteristicsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteWideCharacteristicSets")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryFeaturesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]],
      ["featureID", ["FeatureIDCodeType[]", XSD::QName.new(NsEBLBaseComponents, "FeatureID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryFeaturesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["category", ["CategoryFeatureType[]", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, nil]],
      ["siteDefaults", ["SiteDefaultsType", XSD::QName.new(NsEBLBaseComponents, "SiteDefaults")], [0, 1]],
      ["featureDefinitions", ["FeatureDefinitionsType", XSD::QName.new(NsEBLBaseComponents, "FeatureDefinitions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryListingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["CategoryListingsSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["orderBy", ["CategoryListingsOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderBy")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchLocation", ["SearchLocationType", XSD::QName.new(NsEBLBaseComponents, "SearchLocation")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryListingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["subCategories", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SubCategories")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryMappingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategoryMappingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryMapping", ["CategoryMappingType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryMapping")], [0, nil]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategorySpecificsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["maxNames", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxNames")], [0, 1]],
      ["maxValuesPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxValuesPerName")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCategorySpecificsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryItemSpecifics", ["CategoryItemSpecificsType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryItemSpecifics")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetChallengeTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetChallengeTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["imageChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ImageChallengeURL")], [0, 1]],
      ["audioChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AudioChallengeURL")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCharitiesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["charityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityName")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["charityRegion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityRegion")], [0, 1]],
      ["charityDomain", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityDomain")], [0, 1]],
      ["includeDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeDescription")], [0, 1]],
      ["matchType", ["StringMatchCodeType", XSD::QName.new(NsEBLBaseComponents, "MatchType")], [0, 1]],
      ["featured", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Featured")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCharitiesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charity", ["CharityInfoType[]", XSD::QName.new(NsEBLBaseComponents, "Charity")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetClientAlertsAuthTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetClientAlertsAuthTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["clientAlertsAuthToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ClientAlertsAuthToken")], [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetContextualKeywordsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["encoding", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Encoding")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetContextualKeywordsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["contextSearchAsset", ["ContextSearchAssetType[]", XSD::QName.new(NsEBLBaseComponents, "ContextSearchAsset")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCrossPromotionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["promotionViewMode", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionViewMode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetCrossPromotionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["crossPromotion", ["CrossPromotionsType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDescriptionTemplatesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["lastModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedTime")], [0, 1]],
      ["motorVehicles", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorVehicles")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDescriptionTemplatesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["descriptionTemplate", ["DescriptionTemplateType[]", XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplate")], [0, nil]],
      ["layoutTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LayoutTotal")], [0, 1]],
      ["obsoleteLayoutID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteLayoutID")], [0, nil]],
      ["obsoleteThemeID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteThemeID")], [0, nil]],
      ["themeGroup", ["ThemeGroupType[]", XSD::QName.new(NsEBLBaseComponents, "ThemeGroup")], [0, nil]],
      ["themeTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeTotal")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dispute", ["DisputeType", XSD::QName.new(NsEBLBaseComponents, "Dispute")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["commentType", ["CommentTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackDetailArray", ["FeedbackDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailArray")], [0, 1]],
      ["feedbackDetailItemTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailItemTotal")], [0, 1]],
      ["feedbackSummary", ["FeedbackSummaryType", XSD::QName.new(NsEBLBaseComponents, "FeedbackSummary")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetHighBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetHighBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["includeCrossPromotion", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCrossPromotion")], [0, 1]],
      ["includeItemSpecifics", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemSpecifics")], [0, 1]],
      ["includeTaxTable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeTaxTable")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemRecommendationsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsRequestContainer", ["GetRecommendationsRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsRequestContainer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemRecommendationsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsResponseContainer", ["GetRecommendationsResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsResponseContainer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemShippingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["quantitySold", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantitySold")], [0, 1]],
      ["destinationPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DestinationPostalCode")], [0, 1]],
      ["destinationCountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "DestinationCountryCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemShippingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemsAwaitingFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sort", ["ItemSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetItemsAwaitingFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemsAwaitingFeedback", ["PaginatedTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemsAwaitingFeedback")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetLiveAuctionBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidderStatus", ["BidderStatusCodeType[]", XSD::QName.new(NsEBLBaseComponents, "BidderStatus")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetLiveAuctionBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderDetails", ["BidderDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderDetails")], [0, 1]],
      ["totalPending", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalPending")], [0, 1]],
      ["totalApproved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalApproved")], [0, 1]],
      ["totalDenied", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalDenied")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetLiveAuctionCatalogDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetLiveAuctionCatalogDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["liveAuctionCatalog", ["LiveAuctionCatalogType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionCatalog")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMemberMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["mailMessageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MailMessageType")], [0, 1]],
      ["messageStatus", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageStatus")], [0, 1]],
      ["displayToPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayToPublic")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["memberMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MemberMessageID")], [0, 1]],
      ["senderID", [nil, XSD::QName.new(NsEBLBaseComponents, "SenderID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMemberMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["memberMessage", ["MemberMessageExchangeArrayType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMessagePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["includeASQPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeASQPreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMessagePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["externalMessageIDs", ["MyMessagesExternalMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageIDs")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["summary", ["MyMessagesSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["alerts", ["MyMessagesAlertArrayType", XSD::QName.new(NsEBLBaseComponents, "Alerts")], [0, 1]],
      ["messages", ["MyMessagesMessageArrayType", XSD::QName.new(NsEBLBaseComponents, "Messages")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBayBuyingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, 1]],
      ["bidAssistantList", ["BidAssistantListType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBayBuyingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingSummary", ["BuyingSummaryType", XSD::QName.new(NsEBLBaseComponents, "BuyingSummary")], [0, 1]],
      ["watchList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBayFavoriteSearchListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBayFavoriteSellerListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, nil]],
      ["bidAssistantList", ["BidGroupArrayType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBayRemindersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBayRemindersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBaySellingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["scheduledList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMyeBaySellingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingSummary", ["SellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "SellingSummary")], [0, 1]],
      ["scheduledList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["summary", ["MyeBaySellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNotificationPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["preferenceLevel", ["NotificationRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PreferenceLevel")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNotificationPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNotificationsUsageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNotificationsUsageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["notificationDetailsArray", ["NotificationDetailsArrayType", XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsArray")], [0, 1]],
      ["markUpMarkDownHistory", ["MarkUpMarkDownHistoryType", XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownHistory")], [0, 1]],
      ["notificationStatistics", ["NotificationStatisticsType", XSD::QName.new(NsEBLBaseComponents, "NotificationStatistics")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrderTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemTransactionIDArray", ["ItemTransactionIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDArray")], [0, 1]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["includeFinalValueFees", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFees")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrderTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrdersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrdersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["createTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeFrom")], [0, 1]],
      ["createTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeTo")], [0, 1]],
      ["orderRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderRole")], [0, 1]],
      ["orderStatus", ["OrderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderStatus")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrdersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrdersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreOrders")], [0, 1]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]],
      ["ordersPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "OrdersPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedOrderCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedOrderCountActual")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPictureManagerDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["folderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["pictureManagerDetailLevel", ["PictureManagerDetailLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailLevel")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPictureManagerDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPictureManagerOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPictureManagerOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["subscription", ["PictureManagerSubscriptionType[]", XSD::QName.new(NsEBLBaseComponents, "Subscription")], [0, nil]],
      ["pictureType", ["PictureManagerPictureDisplayType[]", XSD::QName.new(NsEBLBaseComponents, "PictureType")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPopularKeywordsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["includeChildCategories", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeChildCategories")], [0, 1]],
      ["maxKeywordsRetrieved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxKeywordsRetrieved")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPopularKeywordsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFamilyMembersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFamilyMembersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFinderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFinderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductFinderData")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFinderXSLRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductFinderXSLResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSearchPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSearchPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productSearchPage", ["ProductSearchPageType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchPage")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSellingPagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["useCase", ["ProductUseCaseCodeType", XSD::QName.new(NsEBLBaseComponents, "UseCase")], [0, 1]],
      ["product", ["ProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductSellingPagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSellingPagesData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductSellingPagesData")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, 1]],
      ["productSort", ["ProductSortCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductSort")], [0, 1]],
      ["includeItemArray", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemArray")], [0, 1]],
      ["includeReviewDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReviewDetails")], [0, 1]],
      ["includeBuyingGuideDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBuyingGuideDetails")], [0, 1]],
      ["includeHistogram", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeHistogram")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetProductsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["characteristicsSetProductHistogram", ["CharacteristicsSetProductHistogramType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetProductHistogram")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["approximatePages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ApproximatePages")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]],
      ["totalProducts", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalProducts")], [0, 1]],
      ["product", ["CatalogProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPromotionRulesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPromotionRulesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionRuleArray", ["PromotionRuleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionRuleArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPromotionalSaleDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPromotionalSaleDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleDetails", ["PromotionalSaleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["searchFlags", ["SearchFlagsCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchFlags")], [0, nil]],
      ["priceRangeFilter", ["PriceRangeFilterType", XSD::QName.new(NsEBLBaseComponents, "PriceRangeFilter")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["SearchTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["userIdFilter", ["UserIdFilterType", XSD::QName.new(NsEBLBaseComponents, "UserIdFilter")], [0, 1]],
      ["searchLocationFilter", ["SearchLocationFilterType", XSD::QName.new(NsEBLBaseComponents, "SearchLocationFilter")], [0, 1]],
      ["storeSearchFilter", ["SearchStoreFilterType", XSD::QName.new(NsEBLBaseComponents, "StoreSearchFilter")], [0, 1]],
      ["order", ["SearchSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchRequest", ["SearchRequestType", XSD::QName.new(NsEBLBaseComponents, "SearchRequest")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["categories", ["RequestCategoriesType", XSD::QName.new(NsEBLBaseComponents, "Categories")], [0, 1]],
      ["totalOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TotalOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["expandSearch", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpandSearch")], [0, 1]],
      ["lot", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Lot")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["quantityOperator", ["QuantityOperatorCodeType", XSD::QName.new(NsEBLBaseComponents, "QuantityOperator")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["charityID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["bidRange", ["BidRangeType", XSD::QName.new(NsEBLBaseComponents, "BidRange")], [0, 1]],
      ["itemCondition", ["ItemConditionCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemCondition")], [0, 1]],
      ["ticketFinder", ["TicketDetailsType", XSD::QName.new(NsEBLBaseComponents, "TicketFinder")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchResultItemArray", ["SearchResultItemArrayType", XSD::QName.new(NsEBLBaseComponents, "SearchResultItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["storeExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreExpansionArray")], [0, 1]],
      ["internationalExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "InternationalExpansionArray")], [0, 1]],
      ["filterRemovedExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "FilterRemovedExpansionArray")], [0, 1]],
      ["allCategoriesExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "AllCategoriesExpansionArray")], [0, 1]],
      ["spellingSuggestion", ["SpellingSuggestionType", XSD::QName.new(NsEBLBaseComponents, "SpellingSuggestion")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerDashboardRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerDashboardResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchStanding", ["SearchStandingDashboardType", XSD::QName.new(NsEBLBaseComponents, "SearchStanding")], [0, 1]],
      ["sellerFeeDiscount", ["SellerFeeDiscountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerFeeDiscount")], [0, 1]],
      ["powerSellerStatus", ["PowerSellerDashboardType", XSD::QName.new(NsEBLBaseComponents, "PowerSellerStatus")], [0, 1]],
      ["policyCompliance", ["PolicyComplianceDashboardType", XSD::QName.new(NsEBLBaseComponents, "PolicyCompliance")], [0, 1]],
      ["buyerSatisfaction", ["BuyerSatisfactionDashboardType", XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfaction")], [0, 1]],
      ["sellerAccount", ["SellerAccountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerAccount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerEventsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["newItemFilter", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NewItemFilter")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerEventsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["motorsDealerUsers", ["UserIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MotorsDealerUsers")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["sort", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["adminEndedItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdminEndedItemsOnly")], [0, 1]],
      ["categoryID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedItemCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedItemCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerPaymentsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["paymentTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeFrom")], [0, 1]],
      ["paymentTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerPaymentsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMorePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMorePayments")], [0, 1]],
      ["sellerPayment", ["SellerPaymentType[]", XSD::QName.new(NsEBLBaseComponents, "SellerPayment")], [0, nil]],
      ["paymentsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedPaymentCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedPaymentCountActual")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSellerTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSessionIDRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["ruName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RuName")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSessionIDResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetShippingDiscountProfilesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetShippingDiscountProfilesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryStructureOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryStructureOnly")], [0, 1]],
      ["rootCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "RootCategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreCategoryUpdateStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreCategoryUpdateStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreCustomPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pageID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PageID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreCustomPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPageArray", ["StoreCustomPageArrayType", XSD::QName.new(NsEBLBaseComponents, "CustomPageArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStoreOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["basicThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "BasicThemeArray")], [0, 1]],
      ["advancedThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "AdvancedThemeArray")], [0, 1]],
      ["logoArray", ["StoreLogoArrayType", XSD::QName.new(NsEBLBaseComponents, "LogoArray")], [0, 1]],
      ["subscriptionArray", ["StoreSubscriptionArrayType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionArray")], [0, 1]],
      ["maxCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategories")], [0, 1]],
      ["maxCategoryLevels", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategoryLevels")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStorePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetStorePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSuggestedCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSuggestedCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["suggestedCategoryArray", ["SuggestedCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTaxTableRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTaxTableResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTokenStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTokenStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["tokenStatus", ["TokenStatusType", XSD::QName.new(NsEBLBaseComponents, "TokenStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["user", ["UserType", XSD::QName.new(NsEBLBaseComponents, "User")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserContactDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["contactID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContactID")], [0, 1]],
      ["requesterID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RequesterID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserContactDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["contactAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ContactAddress")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserDisputesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeFilterType", ["DisputeFilterTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterType")], [0, 1]],
      ["disputeSortType", ["DisputeSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeSortType")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserDisputesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "StartingDisputeID")], [0, 1]],
      ["endingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "EndingDisputeID")], [0, 1]],
      ["disputeArray", ["DisputeArrayType", XSD::QName.new(NsEBLBaseComponents, "DisputeArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["disputeFilterCount", ["DisputeFilterCountType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterCount")], [0, nil]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["showBidderNoticePreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowBidderNoticePreferences")]],
      ["showCombinedPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCombinedPaymentPreferences")]],
      ["showCrossPromotionPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCrossPromotionPreferences")]],
      ["showSellerPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerPaymentPreferences")]],
      ["showEndOfAuctionEmailPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEndOfAuctionEmailPreferences")], [0, 1]],
      ["showSellerFavoriteItemPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerFavoriteItemPreferences")], [0, 1]],
      ["showProStoresPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowProStoresPreferences")], [0, 1]],
      ["showEmailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetUserPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]],
      ["proStoresPreference", ["ProStoresCheckoutPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ProStoresPreference")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetVeROReasonCodeDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["reasonCodeID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReasonCodeID")], [0, 1]],
      ["returnAllSites", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnAllSites")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetVeROReasonCodeDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReasonCodeDetails", ["VeROReasonCodeDetailsType", XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetVeROReportStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeReportedItemDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReportedItemDetails")], [0, 1]],
      ["timeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeFrom")], [0, 1]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetVeROReportStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]],
      ["reportedItemDetails", ["VeROReportedItemDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReportedItemDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetWantItNowPostRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetWantItNowPostResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPost", ["WantItNowPostType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPost")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetWantItNowSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["searchInDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchInDescription")], [0, 1]],
      ["searchWorldwide", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchWorldwide")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetWantItNowSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPostArray", ["WantItNowPostArrayType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPostArray")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GeteBayDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["detailName", ["DetailNameCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailName")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => GeteBayDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["countryDetails", ["CountryDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CountryDetails")], [0, nil]],
      ["currencyDetails", ["CurrencyDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CurrencyDetails")], [0, nil]],
      ["dispatchTimeMaxDetails", ["DispatchTimeMaxDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMaxDetails")], [0, nil]],
      ["paymentOptionDetails", ["PaymentOptionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentOptionDetails")], [0, nil]],
      ["regionDetails", ["RegionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionDetails")], [0, nil]],
      ["shippingLocationDetails", ["ShippingLocationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingLocationDetails")], [0, nil]],
      ["shippingServiceDetails", ["ShippingServiceDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceDetails")], [0, nil]],
      ["siteDetails", ["SiteDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteDetails")], [0, nil]],
      ["taxJurisdiction", ["TaxJurisdictionType[]", XSD::QName.new(NsEBLBaseComponents, "TaxJurisdiction")], [0, nil]],
      ["uRLDetails", ["URLDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "URLDetails")], [0, nil]],
      ["timeZoneDetails", ["TimeZoneDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "TimeZoneDetails")], [0, nil]],
      ["itemSpecificDetails", ["ItemSpecificDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificDetails")], [0, nil]],
      ["unitOfMeasurementDetails", ["UnitOfMeasurementDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementDetails")], [0, nil]],
      ["regionOfOriginDetails", ["RegionOfOriginDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionOfOriginDetails")], [0, nil]],
      ["shippingPackageDetails", ["ShippingPackageDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingPackageDetails")], [0, nil]],
      ["shippingCarrierDetails", ["ShippingCarrierDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierDetails")], [0, nil]],
      ["returnPolicyDetails", ["ReturnPolicyDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GeteBayOfficialTimeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GeteBayOfficialTimeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => IssueRefundRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "IssueRefundRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["refundReason", ["RefundReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundReason")], [0, 1]],
      ["refundType", ["RefundTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundType")], [0, 1]],
      ["refundAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundAmount")], [0, 1]],
      ["refundMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RefundMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => IssueRefundResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "IssueRefundResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["refundFromSeller", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundFromSeller")], [0, 1]],
      ["totalRefundToBuyer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalRefundToBuyer")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LeaveFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUser", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUser")], [0, 1]],
      ["sellerItemRatingDetailArray", ["ItemRatingDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "SellerItemRatingDetailArray")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LeaveFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => PlaceOfferRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["offer", ["OfferType", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["blockOnWarning", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BlockOnWarning")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => PlaceOfferResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingStatus", ["SellingStatusType", XSD::QName.new(NsEBLBaseComponents, "SellingStatus")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["bestOffer", ["BestOfferType", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RelistItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelistItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => RelistItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelistItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RemoveFromWatchListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]],
      ["removeAllItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RemoveAllItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RemoveFromWatchListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToBestOfferRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", ["[]", XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, nil]],
      ["action", ["BestOfferActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["sellerResponse", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerResponse")], [0, 1]],
      ["counterOfferPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CounterOfferPrice")], [0, 1]],
      ["counterOfferQuantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CounterOfferQuantity")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToBestOfferResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["respondToBestOffer", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "RespondToBestOffer")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUserID")], [0, 1]],
      ["responseType", ["FeedbackResponseCodeType", XSD::QName.new(NsEBLBaseComponents, "ResponseType")], [0, 1]],
      ["responseText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ResponseText")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToWantItNowPostRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RespondToWantItNowPostResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseCheckoutStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["paymentMethodUsed", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethodUsed")], [0, 1]],
      ["checkoutStatus", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["checkoutMethod", ["CheckoutMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutMethod")], [0, 1]],
      ["insuranceType", ["InsuranceSelectedCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceType")], [0, 1]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["buyerID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerID")], [0, 1]],
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["salesTax", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["shippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingCost")], [0, 1]],
      ["encryptedID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EncryptedID")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, 1]],
      ["multipleSellerPaymentID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MultipleSellerPaymentID")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseCheckoutStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseLiveAuctionItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseLiveAuctionItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["flagged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Flagged")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseMyMessagesFoldersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["operation", ["MyMessagesFolderOperationCodeType", XSD::QName.new(NsEBLBaseComponents, "Operation")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong[]", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, nil]],
      ["folderName", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseMyMessagesFoldersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RevokeTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["unsubscribeNotification", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UnsubscribeNotification")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RevokeTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerReverseDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["disputeResolutionReason", ["DisputeResolutionReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReason")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerReverseDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SendInvoiceRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["internationalShippingServiceOptions", ["InternationalShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOptions")], [0, nil]],
      ["shippingServiceOptions", ["ShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptions")], [0, nil]],
      ["salesTax", ["SalesTaxType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["checkoutInstructions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CheckoutInstructions")], [0, 1]],
      ["emailCopyToSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCopyToSeller")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SendInvoiceResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetMessagePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetMessagePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetNotificationPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetNotificationPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPictureManagerDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]],
      ["action", ["PictureManagerActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPictureManagerDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPromotionalSaleRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleDetails", ["PromotionalSaleType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPromotionalSaleResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPromotionalSaleListingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleItemIDArray")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["categoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["allFixedPriceItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllFixedPriceItems")], [0, 1]],
      ["allStoreInventoryItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllStoreInventoryItems")], [0, 1]],
      ["allAuctionItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllAuctionItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetPromotionalSaleListingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetSellingManagerFeedbackOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["automatedLeaveFeedbackEvent", ["AutomatedLeaveFeedbackEventCodeType", XSD::QName.new(NsEBLBaseComponents, "AutomatedLeaveFeedbackEvent")], [0, 1]],
      ["storedComments", ["FeedbackCommentArrayType", XSD::QName.new(NsEBLBaseComponents, "StoredComments")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetSellingManagerFeedbackOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetShippingDiscountProfilesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]],
      ["modifyActionCode", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "ModifyActionCode")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetShippingDiscountProfilesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["StoreCategoryUpdateActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["itemDestinationCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ItemDestinationCategoryID")], [0, 1]],
      ["destinationParentCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DestinationParentCategoryID")], [0, 1]],
      ["storeCategories", ["StoreCustomCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreCategories")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreCustomPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStoreCustomPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStorePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetStorePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetTaxTableRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetTaxTableResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetUserNotesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["action", ["SetUserNotesActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["noteText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NoteText")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetUserNotesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SetUserPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SetUserPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UploadSiteHostedPicturesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureName")], [0, 1]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["pictureSet", ["PictureSetCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSet")], [0, 1]],
      ["pictureData", ["Base64BinaryType", XSD::QName.new(NsEBLBaseComponents, "PictureData")], [0, 1]],
      ["pictureUploadPolicy", ["PictureUploadPolicyCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureUploadPolicy")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => UploadSiteHostedPicturesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["siteHostedPictureDetails", ["SiteHostedPictureDetailsType", XSD::QName.new(NsEBLBaseComponents, "SiteHostedPictureDetails")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ValidateChallengeInputRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["userInput", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserInput")], [0, 1]],
      ["keepTokenValid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "KeepTokenValid")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ValidateChallengeInputResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["validToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValidToken")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ValidateTestUserRegistrationRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]],
      ["subscribeSA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSA")], [0, 1]],
      ["subscribeSAPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSAPro")], [0, 1]],
      ["subscribeSM", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSM")], [0, 1]],
      ["subscribeSMPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSMPro")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ValidateTestUserRegistrationResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportItemsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["rightsOwnerID", [nil, XSD::QName.new(NsEBLBaseComponents, "RightsOwnerID")], [0, 1]],
      ["reportItems", ["VeROReportItemsType", XSD::QName.new(NsEBLBaseComponents, "ReportItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportItemsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VerifyAddItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VerifyAddItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["expressListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressListing")], [0, 1]],
      ["expressItemRequirements", ["ExpressItemRequirementsType", XSD::QName.new(NsEBLBaseComponents, "ExpressItemRequirements")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VerifyAddSecondChanceItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VerifyAddSecondChanceItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => BotBlockRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BotBlockRequestType"),
    :schema_element => [
      ["botBlockToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockToken")], [0, 1]],
      ["botBlockUserInput", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockUserInput")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BotBlockResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BotBlockResponseType"),
    :schema_element => [
      ["botBlockToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockToken")], [0, 1]],
      ["botBlockUrl", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockUrl")], [0, 1]],
      ["botBlockAudioUrl", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockAudioUrl")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CustomSecurityHeaderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CustomSecurityHeaderType"),
    :schema_element => [
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["credentials", ["UserIdPasswordType", XSD::QName.new(NsEBLBaseComponents, "Credentials")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DisputeFilterCountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeFilterCountType"),
    :schema_element => [
      ["disputeFilterType", ["DisputeFilterTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterType")], [0, 1]],
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DisputeMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeMessageType"),
    :schema_element => [
      ["messageID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["messageSource", ["DisputeMessageSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageSource")], [0, 1]],
      ["messageCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "MessageCreationTime")], [0, 1]],
      ["messageText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DisputeResolutionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionType"),
    :schema_element => [
      ["disputeResolutionRecordType", ["DisputeResolutionRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionRecordType")], [0, 1]],
      ["disputeResolutionReason", ["DisputeResolutionReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReason")], [0, 1]],
      ["resolutionTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ResolutionTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DuplicateInvocationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetailsType"),
    :schema_element => [
      ["duplicateInvocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationID")], [0, 1]],
      ["status", ["InvocationStatusType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["invocationTrackingID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InvocationTrackingID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ErrorParameterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorParameterType"),
    :schema_element => [
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "ParamID") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => ErrorType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorType"),
    :schema_element => [
      ["shortMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShortMessage")], [0, 1]],
      ["longMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LongMessage")], [0, 1]],
      ["errorCode", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["userDisplayHint", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserDisplayHint")], [0, 1]],
      ["severityCode", ["SeverityCodeType", XSD::QName.new(NsEBLBaseComponents, "SeverityCode")], [0, 1]],
      ["errorParameters", ["ErrorParameterType[]", XSD::QName.new(NsEBLBaseComponents, "ErrorParameters")], [0, nil]],
      ["errorClassification", ["ErrorClassificationCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorClassification")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FaultDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FaultDetailsType"),
    :schema_element => [
      ["errorCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["severity", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Severity")], [0, 1]],
      ["detailedMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DetailedMessage")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MeasureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MeasureType"),
    :schema_attribute => {
      XSD::QName.new(nil, "unit") => "SOAP::SOAPToken",
      XSD::QName.new(nil, "measurementSystem") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => PaginationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginationType"),
    :schema_element => [
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => QuantityType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuantityType"),
    :schema_attribute => {
      XSD::QName.new(nil, "unit") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => UserIdPasswordType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIdPasswordType"),
    :schema_element => [
      ["appId", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AppId")], [0, 1]],
      ["devId", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DevId")], [0, 1]],
      ["authCert", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AuthCert")], [0, 1]],
      ["username", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Username")], [0, 1]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Password")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => XMLRequesterCredentialsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "XMLRequesterCredentialsType"),
    :schema_element => [
      ["username", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Username")], [0, 1]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Password")], [0, 1]],
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ASQPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ASQPreferencesType"),
    :schema_element => [
      ["resetDefaultSubjects", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResetDefaultSubjects")], [0, 1]],
      ["subject", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AccountEntriesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntriesType"),
    :schema_element => [
      ["accountEntry", ["AccountEntryType[]", XSD::QName.new(NsEBLBaseComponents, "AccountEntry")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AccountEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntryType"),
    :schema_element => [
      ["accountDetailsEntryType", ["AccountDetailEntryCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountDetailsEntryType")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["balance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Balance")], [0, 1]],
      ["date", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Date")], [0, 1]],
      ["grossDetailAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "GrossDetailAmount")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Memo")], [0, 1]],
      ["netDetailAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "NetDetailAmount")], [0, 1]],
      ["refNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RefNumber")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AccountSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountSummaryType"),
    :schema_element => [
      ["accountState", ["AccountStateCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountState")], [0, 1]],
      ["invoicePayment", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoicePayment")], [0, 1]],
      ["invoiceCredit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceCredit")], [0, 1]],
      ["invoiceNewFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceNewFee")], [0, 1]],
      ["additionalAccount", ["AdditionalAccountType[]", XSD::QName.new(NsEBLBaseComponents, "AdditionalAccount")], [0, nil]],
      ["amountPastDue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPastDue")], [0, 1]],
      ["bankAccountInfo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BankAccountInfo")], [0, 1]],
      ["bankModifyDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "BankModifyDate")], [0, 1]],
      ["billingCycleDate", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BillingCycleDate")], [0, 1]],
      ["creditCardExpiration", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreditCardExpiration")], [0, 1]],
      ["creditCardInfo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CreditCardInfo")], [0, 1]],
      ["creditCardModifyDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreditCardModifyDate")], [0, 1]],
      ["currentBalance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CurrentBalance")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["invoiceBalance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceBalance")], [0, 1]],
      ["invoiceDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "InvoiceDate")], [0, 1]],
      ["lastAmountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LastAmountPaid")], [0, 1]],
      ["lastPaymentDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastPaymentDate")], [0, 1]],
      ["pastDue", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PastDue")], [0, 1]],
      ["paymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AdFormatLeadType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadType"),
    :schema_element => [
      ["additionalInformation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AdditionalInformation")], [0, 1]],
      ["address", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "Address")], [0, 1]],
      ["bestTimeToCall", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BestTimeToCall")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["submittedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "SubmittedTime")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["itemTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemTitle")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["memberMessage", ["MemberMessageExchangeArrayType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]],
      ["status", ["AdFormatLeadStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["leadFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LeadFee")], [0, 1]],
      ["externalEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalEmail")], [0, 1]],
      ["purchaseTimeFrame", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PurchaseTimeFrame")], [0, 1]],
      ["tradeInYear", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInYear")], [0, 1]],
      ["tradeInMake", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInMake")], [0, 1]],
      ["tradeInModel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInModel")], [0, 1]],
      ["financingAnswer", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FinancingAnswer")], [0, 1]],
      ["answer1", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Answer1")], [0, 1]],
      ["answer2", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Answer2")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessagesAAQToBidderRequestContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestContainerType"),
    :schema_element => [
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["itemID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AddMemberMessagesAAQToBidderResponseContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseContainerType"),
    :schema_element => [
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => AdditionalAccountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdditionalAccountType"),
    :schema_element => [
      ["balance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Balance")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["accountCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AccountCode")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AddressType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["street", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street")], [0, 1]],
      ["street1", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street1")], [0, 1]],
      ["street2", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street2")], [0, 1]],
      ["cityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CityName")], [0, 1]],
      ["county", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "County")], [0, 1]],
      ["stateOrProvince", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StateOrProvince")], [0, 1]],
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["countryName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CountryName")], [0, 1]],
      ["phone", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone")], [0, 1]],
      ["phoneCountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "PhoneCountryCode")], [0, 1]],
      ["phoneCountryPrefix", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneCountryPrefix")], [0, 1]],
      ["phoneAreaOrCityCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneAreaOrCityCode")], [0, 1]],
      ["phoneLocalNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneLocalNumber")], [0, 1]],
      ["phone2CountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Phone2CountryCode")], [0, 1]],
      ["phone2CountryPrefix", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2CountryPrefix")], [0, 1]],
      ["phone2AreaOrCityCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2AreaOrCityCode")], [0, 1]],
      ["phone2LocalNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2LocalNumber")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["addressID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AddressID")], [0, 1]],
      ["addressOwner", ["AddressOwnerCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressOwner")], [0, 1]],
      ["addressStatus", ["AddressStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressStatus")], [0, 1]],
      ["externalAddressID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalAddressID")], [0, 1]],
      ["internationalName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalName")], [0, 1]],
      ["internationalStateAndCity", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalStateAndCity")], [0, 1]],
      ["internationalStreet", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalStreet")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CompanyName")], [0, 1]],
      ["addressRecordType", ["AddressRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressRecordType")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FirstName")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LastName")], [0, 1]],
      ["phone2", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AffiliateTrackingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetailsType"),
    :schema_element => [
      ["trackingID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TrackingID")], [0, 1]],
      ["trackingPartnerCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TrackingPartnerCode")], [0, 1]],
      ["applicationDeviceType", ["ApplicationDeviceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeviceType")], [0, 1]],
      ["affiliateUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AffiliateUserID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AmountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AmountType"),
    :schema_attribute => {
      XSD::QName.new(nil, "currencyID") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => AnnouncementMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AnnouncementMessageType"),
    :schema_element => [
      ["announcementStartTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "AnnouncementStartTime")], [0, 1]],
      ["eventTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EventTime")], [0, 1]],
      ["messageType", ["AnnouncementMessageCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ApiAccessRuleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApiAccessRuleType"),
    :schema_element => [
      ["callName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CallName")], [0, 1]],
      ["countsTowardAggregate", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CountsTowardAggregate")], [0, 1]],
      ["dailyHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailyHardLimit")], [0, 1]],
      ["dailySoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailySoftLimit")], [0, 1]],
      ["dailyUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailyUsage")], [0, 1]],
      ["hourlyHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlyHardLimit")], [0, 1]],
      ["hourlySoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlySoftLimit")], [0, 1]],
      ["hourlyUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlyUsage")], [0, 1]],
      ["period", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["periodicHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicHardLimit")], [0, 1]],
      ["periodicSoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicSoftLimit")], [0, 1]],
      ["periodicUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicUsage")], [0, 1]],
      ["periodicStartDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PeriodicStartDate")], [0, 1]],
      ["modTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTime")], [0, 1]],
      ["ruleCurrentStatus", ["AccessRuleCurrentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "RuleCurrentStatus")], [0, 1]],
      ["ruleStatus", ["AccessRuleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "RuleStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ApplicationDeliveryPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferencesType"),
    :schema_element => [
      ["applicationURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ApplicationURL")], [0, 1]],
      ["applicationEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "ApplicationEnable")], [0, 1]],
      ["alertEmail", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "AlertEmail")], [0, 1]],
      ["alertEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "AlertEnable")], [0, 1]],
      ["notificationPayloadType", ["NotificationPayloadTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "NotificationPayloadType")], [0, 1]],
      ["deviceType", ["DeviceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DeviceType")], [0, 1]],
      ["payloadVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayloadVersion")], [0, 1]],
      ["deliveryURLDetails", ["DeliveryURLDetailType[]", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AttributeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeArrayType"),
    :schema_element => [
      ["attribute", ["AttributeType[]", XSD::QName.new(NsEBLBaseComponents, "Attribute")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AttributeRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeRecommendationsType"),
    :schema_element => [
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AttributeSetArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeSetArrayType"),
    :schema_element => [
      ["attributeSet", ["AttributeSetType[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSet")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AttributeSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeSetType"),
    :schema_element => [
      ["attribute", ["AttributeType[]", XSD::QName.new(NsEBLBaseComponents, "Attribute")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeSetID") => "SOAP::SOAPInt",
      XSD::QName.new(nil, "attributeSetVersion") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => AttributeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeType"),
    :schema_element => [
      ["value", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeID") => "SOAP::SOAPInt",
      XSD::QName.new(nil, "attributeLabel") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => AverageRatingDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetailArrayType"),
    :schema_element => [
      ["averageRatingDetails", ["AverageRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AverageRatingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetailsType"),
    :schema_element => [
      ["ratingDetail", ["FeedbackRatingDetailCodeType", XSD::QName.new(NsEBLBaseComponents, "RatingDetail")], [0, 1]],
      ["rating", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["ratingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RatingCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AverageRatingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingSummaryType"),
    :schema_element => [
      ["feedbackSummaryPeriod", ["FeedbackSummaryPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryPeriod")], [0, 1]],
      ["averageRatingDetails", ["AverageRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => Base64BinaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "Base64BinaryType"),
    :schema_attribute => {
      XSD::QName.new(nil, "contentType") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => BasicAmountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BasicAmountType"),
    :schema_attribute => {
      XSD::QName.new(nil, "currencyID") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => BasicUpgradePackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferArrayType"),
    :schema_element => [
      ["bestOffer", ["BestOfferType[]", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferCounterEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferDetailsType"),
    :schema_element => [
      ["bestOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BestOfferCount")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["bestOffer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, 1]],
      ["bestOfferStatus", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferStatus")], [0, 1]],
      ["bestOfferType", ["BestOfferTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BestOfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferType"),
    :schema_element => [
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["buyer", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Buyer")], [0, 1]],
      ["price", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Price")], [0, 1]],
      ["status", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["buyerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerMessage")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]],
      ["bestOfferCodeType", ["BestOfferTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferCodeType")], [0, 1]],
      ["callStatus", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CallStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidApprovalArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidApprovalArrayType"),
    :schema_element => [
      ["liveAuctionBid", ["BidApprovalType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBid")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidApprovalType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidApprovalType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["approvedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ApprovedBiddingLimit")], [0, 1]],
      ["declinedComment", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeclinedComment")], [0, 1]],
      ["status", ["BidderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidAssistantListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidAssistantListType"),
    :schema_element => [
      ["bidGroupID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidGroupID")], [0, 1]],
      ["includeNotes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeNotes")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidGroupArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupArrayType"),
    :schema_element => [
      ["bidGroup", ["BidGroupType[]", XSD::QName.new(NsEBLBaseComponents, "BidGroup")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => BidGroupItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["bidGroupItemStatus", ["BidGroupItemStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidGroupItemStatus")], [0, 1]],
      ["maxBidAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBidAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidGroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupType"),
    :schema_element => [
      ["bidGroupItem", ["BidGroupItemType[]", XSD::QName.new(NsEBLBaseComponents, "BidGroupItem")], [0, nil]],
      ["bidGroupID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidGroupID")], [0, 1]],
      ["bidGroupName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BidGroupName")], [0, 1]],
      ["bidGroupStatus", ["BidGroupStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidGroupStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidRangeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidRangeType"),
    :schema_element => [
      ["minimumBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumBidCount")], [0, 1]],
      ["maximumBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaximumBidCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidderDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderDetailArrayType"),
    :schema_element => [
      ["bidderDetail", ["BidderDetailType[]", XSD::QName.new(NsEBLBaseComponents, "BidderDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => BidderDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderDetailType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["liveAuctionBidResult", ["LiveAuctionBidType", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidResult")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BidderNoticePreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferencesType"),
    :schema_element => [
      ["unsuccessfulBidderNoticeIncludeMyItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UnsuccessfulBidderNoticeIncludeMyItems")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BiddingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BiddingDetailsType"),
    :schema_element => [
      ["convertedMaxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedMaxBid")], [0, 1]],
      ["maxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBid")], [0, 1]],
      ["quantityBid", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityBid")], [0, 1]],
      ["quantityWon", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityWon")], [0, 1]],
      ["winning", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Winning")], [0, 1]],
      ["bidAssistant", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BidAssistant")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BiddingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BiddingSummaryType"),
    :schema_element => [
      ["summaryDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SummaryDays")], [0, 1]],
      ["totalBids", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalBids")], [0, 1]],
      ["bidActivityWithSeller", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidActivityWithSeller")], [0, 1]],
      ["bidsToUniqueSellers", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidsToUniqueSellers")], [0, 1]],
      ["bidsToUniqueCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidsToUniqueCategories")], [0, 1]],
      ["bidRetractions", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidRetractions")], [0, 1]],
      ["itemBidDetails", ["ItemBidDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemBidDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BusinessSellerDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BusinessSellerDetailsType"),
    :schema_element => [
      ["address", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "Address")], [0, 1]],
      ["fax", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Fax")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["additionalContactInformation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AdditionalContactInformation")], [0, 1]],
      ["tradeRegistrationNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeRegistrationNumber")], [0, 1]],
      ["legalInvoice", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LegalInvoice")], [0, 1]],
      ["termsAndConditions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TermsAndConditions")], [0, 1]],
      ["vATDetails", ["VATDetailsType", XSD::QName.new(NsEBLBaseComponents, "VATDetails")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerGuaranteeEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerProtectionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionDetailsType"),
    :schema_element => [
      ["buyerProtectionSource", ["BuyerProtectionSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionSource")], [0, 1]],
      ["buyerProtectionStatus", ["BuyerProtectionCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerRequirementDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerRequirementDetailsType"),
    :schema_element => [
      ["shipToRegistrationCountry", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShipToRegistrationCountry")], [0, 1]],
      ["zeroFeedbackScore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ZeroFeedbackScore")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]],
      ["maximumItemRequirements", ["MaximumItemRequirementsType", XSD::QName.new(NsEBLBaseComponents, "MaximumItemRequirements")], [0, 1]],
      ["linkedPayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LinkedPayPalAccount")], [0, 1]],
      ["verifiedUserRequirements", ["VerifiedUserRequirementsType", XSD::QName.new(NsEBLBaseComponents, "VerifiedUserRequirements")], [0, 1]],
      ["maximumUnpaidItemStrikesInfo", ["MaximumUnpaidItemStrikesInfoType", XSD::QName.new(NsEBLBaseComponents, "MaximumUnpaidItemStrikesInfo")], [0, 1]],
      ["maximumBuyerPolicyViolations", ["MaximumBuyerPolicyViolationsType", XSD::QName.new(NsEBLBaseComponents, "MaximumBuyerPolicyViolations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerRoleMetricsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerRoleMetricsType"),
    :schema_element => [
      ["positiveFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackLeftCount")], [0, 1]],
      ["negativeFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackLeftCount")], [0, 1]],
      ["neutralFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackLeftCount")], [0, 1]],
      ["feedbackLeftPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeftPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerSatisfactionDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfactionDashboardType"),
    :schema_element => [
      ["status", ["BuyerSatisfactionStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerType"),
    :schema_element => [
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyingGuideDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetailsType"),
    :schema_element => [
      ["buyingGuide", ["BuyingGuideType[]", XSD::QName.new(NsEBLBaseComponents, "BuyingGuide")], [0, nil]],
      ["buyingGuideHub", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideHub")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyingGuideType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingGuideType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["creationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationTime")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => BuyingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingSummaryType"),
    :schema_element => [
      ["biddingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BiddingCount")], [0, 1]],
      ["winningCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WinningCount")], [0, 1]],
      ["totalWinningCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalWinningCost")], [0, 1]],
      ["wonCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WonCount")], [0, 1]],
      ["totalWonCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalWonCost")], [0, 1]],
      ["wonDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WonDurationInDays")], [0, 1]],
      ["bestOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BestOfferCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => CalculatedHandlingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscountType"),
    :schema_element => [
      ["discountName", ["HandlingNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["orderHandlingAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OrderHandlingAmount")], [0, 1]],
      ["eachAdditionalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmount")], [0, 1]],
      ["eachAdditionalOffAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalOffAmount")], [0, 1]],
      ["eachAdditionalPercentOff", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalPercentOff")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CalculatedShippingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscountType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["discountProfile", ["DiscountProfileType[]", XSD::QName.new(NsEBLBaseComponents, "DiscountProfile")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CalculatedShippingPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingPreferencesType"),
    :schema_element => [
      ["calculatedShippingAmountForEntireOrder", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingAmountForEntireOrder")], [0, 1]],
      ["calculatedShippingChargeOption", ["CalculatedShippingChargeOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingChargeOption")], [0, 1]],
      ["calculatedShippingRateOption", ["CalculatedShippingRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateOption")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CalculatedShippingRateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateType"),
    :schema_element => [
      ["originatingPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OriginatingPostalCode")], [0, 1]],
      ["measurementUnit", ["MeasurementSystemCodeType", XSD::QName.new(NsEBLBaseComponents, "MeasurementUnit")], [0, 1]],
      ["packageDepth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageDepth")], [0, 1]],
      ["packageLength", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageLength")], [0, 1]],
      ["packageWidth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageWidth")], [0, 1]],
      ["packagingHandlingCosts", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PackagingHandlingCosts")], [0, 1]],
      ["shippingIrregular", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIrregular")], [0, 1]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["weightMajor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMajor")], [0, 1]],
      ["weightMinor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMinor")], [0, 1]],
      ["internationalPackagingHandlingCosts", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InternationalPackagingHandlingCosts")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CancelOfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CancelOfferArrayType"),
    :schema_element => [
      ["cancelOffer", ["CancelOfferType[]", XSD::QName.new(NsEBLBaseComponents, "CancelOffer")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CancelOfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CancelOfferType"),
    :schema_element => [
      ["offer", ["OfferType", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, 1]],
      ["explanation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Explanation")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CartItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CartItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["referenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReferenceID")], [0, 1]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CatalogProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CatalogProductType"),
    :schema_element => [
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["displayStockPhotos", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayStockPhotos")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["reviewCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReviewCount")], [0, 1]],
      ["reviewDetails", ["ReviewDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReviewDetails")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryArrayType"),
    :schema_element => [
      ["category", ["CategoryType[]", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => CategoryFeatureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryFeatureType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["listingDuration", ["ListingDurationReferenceType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]],
      ["shippingTermsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationReferenceType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["payPalRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "AdFormatEnabledCodeType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPhoneCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProStreetCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "ClassifiedAdBestOfferEnabledCodeType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "ClassifiedAdPaymentMethodEnabledCodeType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["localMarketAdFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineCodeType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["returnPolicyEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["maxFlatShippingCost", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CategoryItemSpecificsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryItemSpecificsType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["updated", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Updated")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CategoryMappingType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryMappingType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "oldID") => "SOAP::SOAPString",
      XSD::QName.new(nil, "id") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => CategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryType"),
    :schema_element => [
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["autoPayEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AutoPayEnabled")], [0, 1]],
      ["b2BVATEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "B2BVATEnabled")], [0, 1]],
      ["catalogEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CatalogEnabled")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["categoryLevel", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryLevel")], [0, 1]],
      ["categoryName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryName")], [0, 1]],
      ["categoryParentID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParentID")], [0, nil]],
      ["categoryParentName", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParentName")], [0, nil]],
      ["productSearchPageAvailable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProductSearchPageAvailable")], [0, 1]],
      ["productFinderIDs", ["ExtendedProductFinderIDType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderIDs")], [0, nil]],
      ["characteristicsSets", ["CharacteristicsSetType[]", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSets")], [0, nil]],
      ["expired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Expired")], [0, 1]],
      ["intlAutosFixedCat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IntlAutosFixedCat")], [0, 1]],
      ["leafCategory", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LeafCategory")], [0, 1]],
      ["virtual", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Virtual")], [0, 1]],
      ["numOfItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumOfItems")], [0, 1]],
      ["sellerGuaranteeEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeEligible")], [0, 1]],
      ["oRPA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ORPA")], [0, 1]],
      ["oRRA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ORRA")], [0, 1]],
      ["lSD", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LSD")], [0, 1]],
      ["keywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Keywords")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharacteristicSetIDsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicSetIDsType"),
    :schema_element => [
      ["iD", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => CharacteristicType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicType"),
    :schema_element => [
      ["attributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeID")]],
      ["dateFormat", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DateFormat")], [0, 1]],
      ["displaySequence", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplaySequence")], [0, 1]],
      ["displayUOM", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayUOM")], [0, 1]],
      ["label", ["LabelType", XSD::QName.new(NsEBLBaseComponents, "Label")], [0, 1]],
      ["sortOrder", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SortOrder")], [0, 1]],
      ["valueList", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "ValueList")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharacteristicsSetProductHistogramType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetProductHistogramType"),
    :schema_element => [
      ["histogramEntry", ["HistogramEntryType[]", XSD::QName.new(NsEBLBaseComponents, "HistogramEntry")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharacteristicsSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, 1]],
      ["attributeSetVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSetVersion")], [0, 1]],
      ["characteristics", ["CharacteristicType[]", XSD::QName.new(NsEBLBaseComponents, "Characteristics")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharityAffiliationDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetailType"),
    :schema_element => [
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["affiliationType", ["CharityAffiliationTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AffiliationType")], [0, 1]],
      ["lastUsedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUsedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharityAffiliationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetailsType"),
    :schema_element => [
      ["charityAffiliationDetail", ["CharityAffiliationDetailType[]", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => CharityAffiliationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString",
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => CharityAffiliationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationsType"),
    :schema_element => [
      ["charityID", ["CharityIDType[]", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharityIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityIDType"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => CharityInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityInfoType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["mission", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Mission")], [0, 1]],
      ["logoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["status", ["CharityStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["searchableString", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchableString")], [0, 1]],
      ["charityRegion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityRegion")], [0, 1]],
      ["charityDomain", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "CharityDomain")], [0, 3]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["logoURLSelling", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURLSelling")], [0, 1]],
      ["displayLogoSelling", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayLogoSelling")], [0, 1]],
      ["displayNameInCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayNameInCheckout")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => CharitySellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharitySellerType"),
    :schema_element => [
      ["charitySellerStatus", ["CharitySellerStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CharitySellerStatus")], [0, 1]],
      ["charityAffiliation", ["CharityAffiliationType[]", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliation")], [0, nil]],
      ["termsAndConditionsAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TermsAndConditionsAccepted")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CharityType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityType"),
    :schema_element => [
      ["charityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityName")], [0, 1]],
      ["charityNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityNumber")], [0, 1]],
      ["donationPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "DonationPercent")], [0, 1]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["mission", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Mission")], [0, 1]],
      ["logoURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["status", ["CharityStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["charityListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CharityListing")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CheckoutOrderDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutOrderDetailType"),
    :schema_element => [
      ["totalCartMerchandiseCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalCartMerchandiseCost")], [0, 1]],
      ["totalCartShippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalCartShippingCost")], [0, 1]],
      ["totalTaxAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalTaxAmount")], [0, 1]],
      ["totalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CheckoutStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutStatusType"),
    :schema_element => [
      ["eBayPaymentStatus", "PaymentStatusCodeType", [0, 1]],
      ["lastModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedTime")], [0, 1]],
      ["paymentMethod", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["status", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdContactByEmailEnabledDefintionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabledDefintionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdPayPerLeadEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdPaymentMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ClassifiedAdStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CombinedFixedPriceTreatmentEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CombinedPaymentPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferencesType"),
    :schema_element => [
      ["calculatedShippingPreferences", ["CalculatedShippingPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingPreferences")], [0, 1]],
      ["combinedPaymentOption", ["CombinedPaymentOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentOption")], [0, 1]],
      ["combinedPaymentPeriod", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPeriod")], [0, 1]],
      ["flatShippingPreferences", ["FlatShippingPreferencesType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingPreferences")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ContactHoursDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ContactHoursDetailsType"),
    :schema_element => [
      ["timeZoneID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TimeZoneID")], [0, 1]],
      ["hours1Days", ["DaysCodeType", XSD::QName.new(NsEBLBaseComponents, "Hours1Days")], [0, 1]],
      ["hours1AnyTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Hours1AnyTime")], [0, 1]],
      ["hours1From", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours1From")], [0, 1]],
      ["hours1To", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours1To")], [0, 1]],
      ["hours2Days", ["DaysCodeType", XSD::QName.new(NsEBLBaseComponents, "Hours2Days")], [0, 1]],
      ["hours2AnyTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Hours2AnyTime")], [0, 1]],
      ["hours2From", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours2From")], [0, 1]],
      ["hours2To", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours2To")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ContextSearchAssetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ContextSearchAssetType"),
    :schema_element => [
      ["keyword", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Keyword")], [0, 1]],
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["ranking", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Ranking")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => CountryDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CountryDetailsType"),
    :schema_element => [
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CrossBorderTradeAustraliaEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CrossBorderTradeGBEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CrossBorderTradeNorthAmericaEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CrossPromotionPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferencesType"),
    :schema_element => [
      ["crossPromotionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionEnabled")], [0, 1]],
      ["crossSellItemFormatSortFilter", ["ItemFormatSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellItemFormatSortFilter")], [0, 1]],
      ["crossSellGallerySortFilter", ["GallerySortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellGallerySortFilter")], [0, 1]],
      ["crossSellItemSortFilter", ["ItemSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellItemSortFilter")], [0, 1]],
      ["upSellItemFormatSortFilter", ["ItemFormatSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellItemFormatSortFilter")], [0, 1]],
      ["upSellGallerySortFilter", ["GallerySortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellGallerySortFilter")], [0, 1]],
      ["upSellItemSortFilter", ["ItemSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellItemSortFilter")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CrossPromotionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossPromotionsType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["primaryScheme", ["PromotionSchemeCodeType", XSD::QName.new(NsEBLBaseComponents, "PrimaryScheme")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["sellerID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["shippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingDiscount")]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["promotedItem", ["PromotedItemType[]", XSD::QName.new(NsEBLBaseComponents, "PromotedItem")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => CurrencyDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CurrencyDetailsType"),
    :schema_element => [
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DataElementSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DataElementSetType"),
    :schema_element => [
      ["dataElement", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DataElement")], [0, 1]],
      ["dataElementID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DataElementID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeSetID") => "SOAP::SOAPInt"
    }
  )

  EncodedRegistry.register(
    :class => DateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DateType"),
    :schema_element => [
      ["year", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Year")], [0, 1]],
      ["month", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Month")], [0, 1]],
      ["day", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Day")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DeliveryURLDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeliveryURLDetailType"),
    :schema_element => [
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["deliveryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DeliveryURL")], [0, 1]],
      ["status", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DescriptionTemplateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplateType"),
    :schema_element => [
      ["groupID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GroupID")], [0, 1]],
      ["iD", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, 1]],
      ["imageURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ImageURL")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["templateXML", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TemplateXML")], [0, 1]],
      ["type", ["DescriptionTemplateCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DiscountProfileType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountProfileType"),
    :schema_element => [
      ["discountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DiscountProfileID")], [0, 1]],
      ["discountProfileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DiscountProfileName")], [0, 1]],
      ["eachAdditionalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmount")], [0, 1]],
      ["eachAdditionalAmountOff", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmountOff")], [0, 1]],
      ["eachAdditionalPercentOff", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalPercentOff")], [0, 1]],
      ["weightOff", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightOff")], [0, 1]],
      ["mappedDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MappedDiscountProfileID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DispatchTimeMaxDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMaxDetailsType"),
    :schema_element => [
      ["dispatchTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMax")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DisputeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeArrayType"),
    :schema_element => [
      ["dispute", ["DisputeType[]", XSD::QName.new(NsEBLBaseComponents, "Dispute")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => DisputeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeType"),
    :schema_element => [
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["disputeRecordType", ["DisputeRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeRecordType")], [0, 1]],
      ["disputeState", ["DisputeStateCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeState")], [0, 1]],
      ["disputeStatus", ["DisputeStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeStatus")], [0, 1]],
      ["otherPartyRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "OtherPartyRole")], [0, 1]],
      ["otherPartyName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OtherPartyName")], [0, 1]],
      ["userRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "UserRole")], [0, 1]],
      ["buyerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "BuyerUserID")], [0, 1]],
      ["sellerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerUserID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["disputeReason", ["DisputeReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeReason")], [0, 1]],
      ["disputeExplanation", ["DisputeExplanationCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeExplanation")], [0, 1]],
      ["disputeCreditEligibility", ["DisputeCreditEligibilityCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeCreditEligibility")], [0, 1]],
      ["disputeCreatedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DisputeCreatedTime")], [0, 1]],
      ["disputeModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DisputeModifiedTime")], [0, 1]],
      ["disputeResolution", ["DisputeResolutionType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeResolution")], [0, nil]],
      ["disputeMessage", ["DisputeMessageType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeMessage")], [0, nil]],
      ["escalation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Escalation")], [0, 1]],
      ["purchaseProtection", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PurchaseProtection")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DistanceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DistanceType"),
    :schema_element => [
      ["distanceMeasurement", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DistanceMeasurement")]],
      ["distanceUnit", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DistanceUnit")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => DutchBINEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EndOfAuctionEmailPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferencesType"),
    :schema_element => [
      ["templateText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TemplateText")], [0, 1]],
      ["logoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["logoType", ["EndOfAuctionLogoTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "LogoType")], [0, 1]],
      ["emailCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCustomized")], [0, 1]],
      ["textCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TextCustomized")], [0, 1]],
      ["logoCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LogoCustomized")], [0, 1]],
      ["copyEmail", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CopyEmail")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpansionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpansionArrayType"),
    :schema_element => [
      ["expansionItem", ["SearchResultItemType[]", XSD::QName.new(NsEBLBaseComponents, "ExpansionItem")], [0, nil]],
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressConditionRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressDetailsType"),
    :schema_element => [
      ["expressLargeImage", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ExpressLargeImage")], [0, 1]],
      ["expressSmallImage", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ExpressSmallImage")], [0, 1]],
      ["condition", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Condition")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressHistogramAisleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramAisleType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["productType", ["ExpressHistogramProductType[]", XSD::QName.new(NsEBLBaseComponents, "ProductType")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressHistogramDepartmentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramDepartmentType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["aisle", ["ExpressHistogramAisleType[]", XSD::QName.new(NsEBLBaseComponents, "Aisle")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressHistogramDomainDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramDomainDetailsType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["breadCrumb", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BreadCrumb")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["productCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductCount")], [0, 1]],
      ["imageURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ImageURL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressHistogramProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramProductType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressItemRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressItemRequirementsType"),
    :schema_element => [
      ["sellerExpressEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerExpressEligible")], [0, 1]],
      ["expressOptOut", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressOptOut")], [0, 1]],
      ["expressApproved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressApproved")], [0, 1]],
      ["expressEligibleListingType", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEligibleListingType")], [0, 1]],
      ["expressEnabledCategory", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabledCategory")], [0, 1]],
      ["eligiblePayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligiblePayPalAccount")], [0, 1]],
      ["domesticShippingCost", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DomesticShippingCost")], [0, 1]],
      ["eligibleReturnPolicy", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleReturnPolicy")], [0, 1]],
      ["picture", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, 1]],
      ["eligibleItemCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleItemCondition")], [0, 1]],
      ["priceAboveMinimum", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PriceAboveMinimum")], [0, 1]],
      ["priceBelowMaximum", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PriceBelowMaximum")], [0, 1]],
      ["eligibleCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleCheckout")], [0, 1]],
      ["noPreapprovedBidderList", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NoPreapprovedBidderList")], [0, 1]],
      ["noCharity", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NoCharity")], [0, 1]],
      ["combinedShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedShippingDiscount")], [0, 1]],
      ["shipFromEligibleCountry", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShipFromEligibleCountry")], [0, 1]],
      ["payPalAccountAcceptsUnconfirmedAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountAcceptsUnconfirmedAddress")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressPicturesRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressPreferencesType"),
    :schema_element => [
      ["expressSellingPreference", ["ExpressSellingPreferenceCodeType", XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreference")], [0, 1]],
      ["defaultPayPalAccount", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DefaultPayPalAccount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressProductType"),
    :schema_element => [
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExpressSellerRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressSellerRequirementsType"),
    :schema_element => [
      ["expressSellingPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreference")], [0, 1]],
      ["expressApproved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressApproved")], [0, 1]],
      ["goodStanding", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GoodStanding")], [0, 1]],
      ["feedbackScore", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["positiveFeedbackPercent", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPercent")], [0, 1]],
      ["feedbackAsSellerScore", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "FeedbackAsSellerScore")], [0, 1]],
      ["positiveFeedbackAsSellerPercent", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackAsSellerPercent")], [0, 1]],
      ["businessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BusinessSeller")], [0, 1]],
      ["eligiblePayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligiblePayPalAccount")], [0, 1]],
      ["payPalAccountAcceptsUnconfirmedAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountAcceptsUnconfirmedAddress")], [0, 1]],
      ["combinedPaymentsAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentsAccepted")], [0, 1]],
      ["feedbackPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FeedbackPublic")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExtendedContactDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExtendedContactDetailsType"),
    :schema_element => [
      ["contactHoursDetails", ["ContactHoursDetailsType", XSD::QName.new(NsEBLBaseComponents, "ContactHoursDetails")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["payPerLeadPhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPerLeadPhoneNumber")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExtendedProductFinderIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExtendedProductFinderIDType"),
    :schema_element => [
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["productFinderBuySide", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProductFinderBuySide")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ExternalAlertIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalAlertIDArrayType"),
    :schema_element => [
      ["externalAlertID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ExternalAlertID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ExternalProductIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalProductIDType"),
    :schema_element => [
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["returnSearchResultOnDuplicates", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnSearchResultOnDuplicates")], [0, 1]],
      ["type", ["ExternalProductCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["alternateValue", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "AlternateValue")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ExternalTransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionType"),
    :schema_element => [
      ["externalTransactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionID")], [0, 1]],
      ["externalTransactionTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionTime")], [0, 1]],
      ["feeOrCreditAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FeeOrCreditAmount")], [0, 1]],
      ["paymentOrRefundAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PaymentOrRefundAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeatureDefinitionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeatureDefinitionsType"),
    :schema_element => [
      ["listingDurations", ["ListingDurationDefinitionsType", XSD::QName.new(NsEBLBaseComponents, "ListingDurations")], [0, 1]],
      ["shippingTermsRequired", ["ShippingTermRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["BestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["DutchBINEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["UserConsentRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["HomePageFeaturedEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["ProPackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["BasicUpgradePackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["ValuePackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["ProPackPlusEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["BestOfferCounterEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["BestOfferAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["LocalMarketSpecialitySubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["LocalMarketRegularSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["LocalMarketPremiumSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["LocalMarketNonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["ExpressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["ExpressPicturesRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["ExpressConditionRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["MinimumReservePriceDefinitionType", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["TCREnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SellerContactDetailsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["StoreInventoryEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SkypeMeTransactionalEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SkypeMeNonTransactionalEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["localListingDistancesRegular", ["LocalListingDistancesRegularDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegular")], [0, 1]],
      ["localListingDistancesSpecialty", ["LocalListingDistancesSpecialtyDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialty")], [0, 1]],
      ["localListingDistancesNonSubscription", ["LocalListingDistancesNonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscription")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["ClassifiedAdShippingMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["ClassifiedAdCounterOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["ClassifiedAdAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["ClassifiedAdContactByPhoneEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["ClassifiedAdContactByEmailEnabledDefintionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SafePaymentRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["ClassifiedAdPayPerLeadEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["PaisaPayFullEscrowEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["BestOfferAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["ClassifiedAdAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["CrossBorderTradeNorthAmericaEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["CrossBorderTradeGBEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["CrossBorderTradeAustraliaEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["PayPalBuyerProtectionEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["BuyerGuaranteeEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["CombinedFixedPriceTreatmentEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationDefinitionType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineDefinitionType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["payPalRequired", ["PayPalRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "EBayMotorsProAdFormatEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "EBayMotorsProContactByPhoneEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProPhoneCount", "EBayMotorsProPhoneCountDefinitionType", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "EBayMotorsProContactByAddressEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProStreetCount", "EBayMotorsProStreetCountDefinitionType", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "EBayMotorsProCompanyNameEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "EBayMotorsProContactByEmailEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "EBayMotorsProBestOfferEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "EBayMotorsProAutoAcceptEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "EBayMotorsProAutoDeclineEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "EBayMotorsProShippingMethodEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "EBayMotorsProCounterOfferEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "EBayMotorsProSellerContactDetailsEnabledDefinitionType", [0, 1]],
      ["localMarketAdFormatEnabled", ["LocalMarketAdFormatEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["LocalMarketContactByPhoneEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["LocalMarketPhoneCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["LocalMarketContactByAddressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["LocalMarketStreetCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["LocalMarketCompanyNameEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["LocalMarketContactByEmailEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["LocalMarketBestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["LocalMarketAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["LocalMarketAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["LocalMarketPaymentMethodCheckOutEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["LocalMarketShippingMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["LocalMarketCounterOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["LocalMarketSellerContactDetailsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["ClassifiedAdPhoneCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["ClassifiedAdContactByAddressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["ClassifiedAdStreetCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["ClassifiedAdCompanyNameEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["SpecialitySubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["RegularSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["PremiumSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["NonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["returnPolicyEnabled", ["ReturnPolicyEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["HandlingTimeEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["PayPalRequiredForStoreOwnerDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["ReviseQuantityAllowedDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["RevisePriceAllowedDefinitionType", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["StoreOwnerExtendedListingDurationsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeeType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackCommentArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackCommentArrayType"),
    :schema_element => [
      ["storedCommentText", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "StoredCommentText")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailArrayType"),
    :schema_element => [
      ["feedbackDetail", ["FeedbackDetailType[]", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailType"),
    :schema_element => [
      ["commentingUser", [nil, XSD::QName.new(NsEBLBaseComponents, "CommentingUser")], [0, 1]],
      ["commentingUserScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CommentingUserScore")], [0, 1]],
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CommentTime")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["feedbackResponse", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackResponse")], [0, 1]],
      ["followup", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Followup")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["role", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "Role")], [0, 1]],
      ["itemTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemTitle")], [0, 1]],
      ["itemPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ItemPrice")], [0, 1]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["commentReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CommentReplaced")], [0, 1]],
      ["responseReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResponseReplaced")], [0, 1]],
      ["followUpReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FollowUpReplaced")], [0, 1]],
      ["countable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Countable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackInfoType"),
    :schema_element => [
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["targetUser", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUser")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackPeriodArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriodArrayType"),
    :schema_element => [
      ["feedbackPeriod", ["FeedbackPeriodType[]", XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriod")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackPeriodType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriodType"),
    :schema_element => [
      ["periodInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PeriodInDays")], [0, 1]],
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeedbackRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRequirementsType"),
    :schema_attribute => {
      XSD::QName.new(nil, "minimum") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => FeedbackSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryType"),
    :schema_element => [
      ["bidRetractionFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "BidRetractionFeedbackPeriodArray")], [0, 1]],
      ["negativeFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackPeriodArray")], [0, 1]],
      ["neutralFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackPeriodArray")], [0, 1]],
      ["positiveFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPeriodArray")], [0, 1]],
      ["totalFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "TotalFeedbackPeriodArray")], [0, 1]],
      ["neutralCommentCountFromSuspendedUsers", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralCommentCountFromSuspendedUsers")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["sellerRatingSummaryArray", ["SellerRatingSummaryArrayType", XSD::QName.new(NsEBLBaseComponents, "SellerRatingSummaryArray")], [0, 1]],
      ["sellerRoleMetrics", ["SellerRoleMetricsType", XSD::QName.new(NsEBLBaseComponents, "SellerRoleMetrics")], [0, 1]],
      ["buyerRoleMetrics", ["BuyerRoleMetricsType", XSD::QName.new(NsEBLBaseComponents, "BuyerRoleMetrics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FeesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeesType"),
    :schema_element => [
      ["fee", ["FeeType[]", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FlatRateInsuranceRangeCostType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCostType"),
    :schema_element => [
      ["flatRateInsuranceRange", ["FlatRateInsuranceRangeCodeType", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRange")], [0, 1]],
      ["insuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FlatShippingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscountType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["discountProfile", ["DiscountProfileType[]", XSD::QName.new(NsEBLBaseComponents, "DiscountProfile")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => FlatShippingPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingPreferencesType"),
    :schema_element => [
      ["amountPerAdditionalItem", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPerAdditionalItem")], [0, 1]],
      ["deductionAmountPerAdditionalItem", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DeductionAmountPerAdditionalItem")], [0, 1]],
      ["flatRateInsuranceRangeCost", ["FlatRateInsuranceRangeCostType[]", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCost")], [0, 6]],
      ["flatShippingRateOption", ["FlatShippingRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingRateOption")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetRecommendationsRequestContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsRequestContainerType"),
    :schema_element => [
      ["listingFlow", ["ListingFlowCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingFlow")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["recommendationEngine", ["RecommendationEngineCodeType[]", XSD::QName.new(NsEBLBaseComponents, "RecommendationEngine")], [0, nil]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GetRecommendationsResponseContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsResponseContainerType"),
    :schema_element => [
      ["listingAnalyzerRecommendations", ["ListingAnalyzerRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ListingAnalyzerRecommendations")], [0, 1]],
      ["sIFFTASRecommendations", ["SIFFTASRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "SIFFTASRecommendations")], [0, 1]],
      ["pricingRecommendations", ["PricingRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "PricingRecommendations")], [0, 1]],
      ["attributeRecommendations", ["AttributeRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "AttributeRecommendations")], [0, 1]],
      ["productRecommendations", ["ProductRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ProductRecommendations")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["itemSpecificsRecommendations", ["ItemSpecificsRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsRecommendations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => GroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GroupType"),
    :schema_element => [
      ["maxGroups", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxGroups")], [0, 1]],
      ["maxEntriesPerGroup", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxEntriesPerGroup")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => HandlingTimeEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => HistogramEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HistogramEntryType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString",
      XSD::QName.new(nil, "name") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => HomePageFeaturedEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => INEscrowWorkflowTimelineDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimelineDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => InsuranceDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceDetailsType"),
    :schema_element => [
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => InternationalShippingServiceOptionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOptionsType"),
    :schema_element => [
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCost")], [0, 1]],
      ["shippingServiceAdditionalCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceAdditionalCost")], [0, 1]],
      ["shippingServicePriority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServicePriority")], [0, 1]],
      ["shipToLocation", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ShipToLocation")], [0, nil]],
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemArrayType"),
    :schema_element => [
      ["item", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemBidDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemBidDetailsType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["lastBidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastBidTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemIDArrayType"),
    :schema_element => [
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemListCustomizationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemListCustomizationType"),
    :schema_element => [
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["sort", ["ItemSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["durationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DurationInDays")], [0, 1]],
      ["includeNotes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeNotes")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemPolicyViolationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemPolicyViolationType"),
    :schema_element => [
      ["policyID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PolicyID")], [0, 1]],
      ["policyText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PolicyText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemRatingDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetailArrayType"),
    :schema_element => [
      ["itemRatingDetails", ["ItemRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemRatingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetailsType"),
    :schema_element => [
      ["ratingDetail", ["FeedbackRatingDetailCodeType", XSD::QName.new(NsEBLBaseComponents, "RatingDetail")], [0, 1]],
      ["rating", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemSpecificDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificDetailsType"),
    :schema_element => [
      ["maxItemSpecificsPerItem", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxItemSpecificsPerItem")], [0, 1]],
      ["maxValuesPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxValuesPerName")], [0, 1]],
      ["maxCharactersPerValue", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCharactersPerValue")], [0, 1]],
      ["maxCharactersPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCharactersPerName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemSpecificsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemSpecificsRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsRecommendationsType"),
    :schema_element => [
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemTotalsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTotalsType"),
    :schema_element => [
      ["totalQuantity", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TotalQuantity")], [0, 1]],
      ["totalValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalValue")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemTransactionIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDArrayType"),
    :schema_element => [
      ["itemTransactionID", ["ItemTransactionIDType[]", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemTransactionIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemType"),
    :schema_element => [
      ["applicationData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ApplicationData")], [0, 1]],
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["attributeArray", ["AttributeArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeArray")], [0, 1]],
      ["lookupAttributeArray", ["LookupAttributeArrayType", XSD::QName.new(NsEBLBaseComponents, "LookupAttributeArray")], [0, 1]],
      ["applyShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApplyShippingDiscount")], [0, 1]],
      ["autoPay", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AutoPay")], [0, 1]],
      ["paymentDetails", ["PaymentDetailsType", XSD::QName.new(NsEBLBaseComponents, "PaymentDetails")], [0, 1]],
      ["biddingDetails", ["BiddingDetailsType", XSD::QName.new(NsEBLBaseComponents, "BiddingDetails")], [0, 1]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["buyerProtection", ["BuyerProtectionCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtection")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["categoryMappingAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryMappingAllowed")], [0, 1]],
      ["charity", ["CharityType", XSD::QName.new(NsEBLBaseComponents, "Charity")], [0, 1]],
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["crossPromotion", ["CrossPromotionsType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotion")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["descriptionReviseMode", ["DescriptionReviseModeCodeType", XSD::QName.new(NsEBLBaseComponents, "DescriptionReviseMode")], [0, 1]],
      ["distance", ["DistanceType", XSD::QName.new(NsEBLBaseComponents, "Distance")], [0, 1]],
      ["giftIcon", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GiftIcon")], [0, 1]],
      ["giftServices", ["GiftServicesCodeType[]", XSD::QName.new(NsEBLBaseComponents, "GiftServices")], [0, nil]],
      ["hitCounter", ["HitCounterCodeType", XSD::QName.new(NsEBLBaseComponents, "HitCounter")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["listingDetails", ["ListingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ListingDetails")], [0, 1]],
      ["listingDesigner", ["ListingDesignerType", XSD::QName.new(NsEBLBaseComponents, "ListingDesigner")], [0, 1]],
      ["listingDuration", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, 1]],
      ["listingEnhancement", ["ListingEnhancementsCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ListingEnhancement")], [0, nil]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["location", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Location")], [0, 1]],
      ["lotSize", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LotSize")], [0, 1]],
      ["nowAndNew", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NowAndNew")], [0, 1]],
      ["partnerCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PartnerCode")], [0, 1]],
      ["partnerName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PartnerName")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["primaryCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "PrimaryCategory")], [0, 1]],
      ["privateListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PrivateListing")], [0, 1]],
      ["productListingDetails", ["ProductListingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ProductListingDetails")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["privateNotes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PrivateNotes")], [0, 1]],
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["relistLink", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RelistLink")], [0, 1]],
      ["reservePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ReservePrice")], [0, 1]],
      ["reviseStatus", ["ReviseStatusType", XSD::QName.new(NsEBLBaseComponents, "ReviseStatus")], [0, 1]],
      ["scheduleTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ScheduleTime")], [0, 1]],
      ["secondaryCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "SecondaryCategory")], [0, 1]],
      ["freeAddedCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "FreeAddedCategory")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]],
      ["sellingStatus", ["SellingStatusType", XSD::QName.new(NsEBLBaseComponents, "SellingStatus")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["shipToLocations", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ShipToLocations")], [0, nil]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["startPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "StartPrice")], [0, 1]],
      ["storefront", ["StorefrontType", XSD::QName.new(NsEBLBaseComponents, "Storefront")], [0, 1]],
      ["subTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SubTitle")], [0, 1]],
      ["timeLeft", ["SOAP::SOAPDuration", XSD::QName.new(NsEBLBaseComponents, "TimeLeft")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["uUID", [nil, XSD::QName.new(NsEBLBaseComponents, "UUID")], [0, 1]],
      ["vATDetails", ["VATDetailsType", XSD::QName.new(NsEBLBaseComponents, "VATDetails")], [0, 1]],
      ["sellerVacationNote", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerVacationNote")], [0, 1]],
      ["watchCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "WatchCount")], [0, 1]],
      ["hitCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HitCount")], [0, 1]],
      ["disableBuyerRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisableBuyerRequirements")], [0, 1]],
      ["bestOfferDetails", ["BestOfferDetailsType", XSD::QName.new(NsEBLBaseComponents, "BestOfferDetails")], [0, 1]],
      ["liveAuctionDetails", ["LiveAuctionDetailsType", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionDetails")], [0, 1]],
      ["locationDefaulted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocationDefaulted")], [0, 1]],
      ["thirdPartyCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckout")], [0, 1]],
      ["useTaxTable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UseTaxTable")], [0, 1]],
      ["getItFast", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GetItFast")], [0, 1]],
      ["buyerResponsibleForShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerResponsibleForShipping")], [0, 1]],
      ["limitedWarrantyEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LimitedWarrantyEligible")], [0, 1]],
      ["eBayNotes", "SOAP::SOAPString", [0, 1]],
      ["questionCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "QuestionCount")], [0, 1]],
      ["relisted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Relisted")], [0, 1]],
      ["quantityAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityAvailable")], [0, 1]],
      ["sKU", [nil, XSD::QName.new(NsEBLBaseComponents, "SKU")], [0, 1]],
      ["categoryBasedAttributesPrefill", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryBasedAttributesPrefill")], [0, 1]],
      ["searchDetails", ["SearchDetailsType", XSD::QName.new(NsEBLBaseComponents, "SearchDetails")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["shippingTermsInDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsInDescription")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]],
      ["pictureDetails", ["PictureDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureDetails")], [0, 1]],
      ["dispatchTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMax")], [0, 1]],
      ["skypeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeEnabled")], [0, 1]],
      ["skypeID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SkypeID")], [0, 1]],
      ["skypeContactOption", ["SkypeContactOptionCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SkypeContactOption")], [0, nil]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["localListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalListing")], [0, 1]],
      ["thirdPartyCheckoutIntegration", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckoutIntegration")], [0, 1]],
      ["listingCheckoutRedirectPreference", ["ListingCheckoutRedirectPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreference")], [0, 1]],
      ["sellerContactDetails", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetails")], [0, 1]],
      ["totalQuestionCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TotalQuestionCount")], [0, 1]],
      ["proxyItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProxyItem")], [0, 1]],
      ["extendedSellerContactDetails", ["ExtendedContactDetailsType", XSD::QName.new(NsEBLBaseComponents, "ExtendedSellerContactDetails")], [0, 1]],
      ["leadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LeadCount")], [0, 1]],
      ["newLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewLeadCount")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["groupCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "GroupCategoryID")], [0, 1]],
      ["classifiedAdPayPerLeadFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadFee")], [0, 1]],
      ["bidGroupItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BidGroupItem")], [0, 1]],
      ["applyBuyerProtection", ["BuyerProtectionDetailsType", XSD::QName.new(NsEBLBaseComponents, "ApplyBuyerProtection")], [0, 1]],
      ["listingSubtype2", ["ListingSubtypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingSubtype2")], [0, 1]],
      ["mechanicalCheckAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MechanicalCheckAccepted")], [0, 1]],
      ["updateSellerInfo", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UpdateSellerInfo")], [0, 1]],
      ["updateReturnPolicy", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UpdateReturnPolicy")], [0, 1]],
      ["itemPolicyViolation", ["ItemPolicyViolationType", XSD::QName.new(NsEBLBaseComponents, "ItemPolicyViolation")], [0, 1]],
      ["crossBorderTrade", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTrade")], [0, nil]],
      ["businessSellerDetails", ["BusinessSellerDetailsType", XSD::QName.new(NsEBLBaseComponents, "BusinessSellerDetails")], [0, 1]],
      ["buyerGuaranteePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteePrice")], [0, 1]],
      ["buyerRequirementDetails", ["BuyerRequirementDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyerRequirementDetails")], [0, 1]],
      ["returnPolicy", ["ReturnPolicyType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicy")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemsCanceledEventType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemsCanceledEventType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["canceledItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "CanceledItemIDArray")], [0, 1]],
      ["eligibleForRelist", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleForRelist")], [0, 1]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LabelType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LabelType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "visible") => "SOAP::SOAPBoolean"
    }
  )

  EncodedRegistry.register(
    :class => ListingAnalyzerRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingAnalyzerRecommendationsType"),
    :schema_element => [
      ["listingTipArray", ["ListingTipArrayType", XSD::QName.new(NsEBLBaseComponents, "ListingTipArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingCheckoutRedirectPreferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreferenceType"),
    :schema_element => [
      ["proStoresStoreName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProStoresStoreName")], [0, 1]],
      ["sellerThirdPartyUsername", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerThirdPartyUsername")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingDesignerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDesignerType"),
    :schema_element => [
      ["layoutID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LayoutID")], [0, 1]],
      ["optimalPictureSize", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "OptimalPictureSize")], [0, 1]],
      ["themeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDetailsType"),
    :schema_element => [
      ["adult", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Adult")], [0, 1]],
      ["bindingAuction", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BindingAuction")], [0, 1]],
      ["checkoutEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutEnabled")], [0, 1]],
      ["convertedBuyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedBuyItNowPrice")], [0, 1]],
      ["convertedStartPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedStartPrice")], [0, 1]],
      ["convertedReservePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedReservePrice")], [0, 1]],
      ["hasReservePrice", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasReservePrice")], [0, 1]],
      ["relistedItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "RelistedItemID")], [0, 1]],
      ["secondChanceOriginalItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "SecondChanceOriginalItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["viewItemURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ViewItemURL")], [0, 1]],
      ["hasUnansweredQuestions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasUnansweredQuestions")], [0, 1]],
      ["hasPublicMessages", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasPublicMessages")], [0, 1]],
      ["buyItNowAvailable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowAvailable")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["minimumBestOfferPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinimumBestOfferPrice")], [0, 1]],
      ["minimumBestOfferMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MinimumBestOfferMessage")], [0, 1]],
      ["localListingDistance", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistance")], [0, 1]],
      ["tCROriginalItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "TCROriginalItemID")], [0, 1]],
      ["viewItemURLForNaturalSearch", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ViewItemURLForNaturalSearch")], [0, 1]],
      ["payPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPerLeadEnabled")], [0, 1]],
      ["bestOfferAutoAcceptPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingDurationDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationDefinitionType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "durationSetID") => "SOAP::SOAPInt"
    }
  )

  EncodedRegistry.register(
    :class => ListingDurationDefinitionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationDefinitionsType"),
    :schema_element => [
      ["listingDuration", ["ListingDurationDefinitionType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "Version") => "SOAP::SOAPInt"
    }
  )

  EncodedRegistry.register(
    :class => ListingDurationReferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationReferenceType"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  EncodedRegistry.register(
    :class => ListingEnhancementDurationDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingEnhancementDurationReferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationReferenceType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingTipArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipArrayType"),
    :schema_element => [
      ["listingTip", ["ListingTipType[]", XSD::QName.new(NsEBLBaseComponents, "ListingTip")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingTipFieldType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipFieldType"),
    :schema_element => [
      ["listingTipFieldID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipFieldID")], [0, 1]],
      ["fieldTip", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FieldTip")], [0, 1]],
      ["currentFieldText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CurrentFieldText")], [0, 1]],
      ["currentFieldValue", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CurrentFieldValue")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingTipMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipMessageType"),
    :schema_element => [
      ["listingTipMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipMessageID")], [0, 1]],
      ["shortMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShortMessage")], [0, 1]],
      ["longMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LongMessage")], [0, 1]],
      ["helpURLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HelpURLPath")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ListingTipType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipType"),
    :schema_element => [
      ["listingTipID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipID")], [0, 1]],
      ["priority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Priority")], [0, 1]],
      ["message", ["ListingTipMessageType", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["field", ["ListingTipFieldType", XSD::QName.new(NsEBLBaseComponents, "Field")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionApprovalStatusArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionApprovalStatusArrayType"),
    :schema_element => [
      ["liveAuctionStatus", ["LiveAuctionApprovalStatusType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionStatus")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionApprovalStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionApprovalStatusType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["status", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionBidArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidArrayType"),
    :schema_element => [
      ["liveAuctionBid", ["LiveAuctionBidType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBid")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionBidType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidType"),
    :schema_element => [
      ["requestedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RequestedBiddingLimit")], [0, 1]],
      ["bidderStatus", ["BidderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidderStatus")], [0, 1]],
      ["approvedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ApprovedBiddingLimit")], [0, 1]],
      ["declinedComment", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeclinedComment")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionCatalogType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionCatalogType"),
    :schema_element => [
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["catalogName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CatalogName")], [0, 1]],
      ["schedule", ["ScheduleType[]", XSD::QName.new(NsEBLBaseComponents, "Schedule")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LiveAuctionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionDetailsType"),
    :schema_element => [
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["scheduleID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ScheduleID")], [0, 1]],
      ["lotNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LotNumber")], [0, 1]],
      ["highEstimate", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighEstimate")], [0, 1]],
      ["lowEstimate", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LowEstimate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalListingDistancesNonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalListingDistancesRegularDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegularDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalListingDistancesSpecialtyDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialtyDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketAdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketContactByEmailEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketNonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketPaymentMethodCheckOutEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketPremiumSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketRegularSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketSellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketSpecialitySubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalMarketStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LocalSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalSearchType"),
    :schema_element => [
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => LookupAttributeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LookupAttributeArrayType"),
    :schema_element => [
      ["lookupAttribute", ["LookupAttributeType[]", XSD::QName.new(NsEBLBaseComponents, "LookupAttribute")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => LookupAttributeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LookupAttributeType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MarkUpMarkDownEventType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEventType"),
    :schema_element => [
      ["type", ["MarkUpMarkDownEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["time", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Time")], [0, 1]],
      ["reason", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Reason")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MarkUpMarkDownHistoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownHistoryType"),
    :schema_element => [
      ["markUpMarkDownEvent", ["MarkUpMarkDownEventType[]", XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEvent")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MaximumBuyerPolicyViolationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumBuyerPolicyViolationsType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["period", ["PeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MaximumItemRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumItemRequirementsType"),
    :schema_element => [
      ["maximumItemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaximumItemCount")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => MaximumUnpaidItemStrikesInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumUnpaidItemStrikesInfoType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["period", ["PeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MemberMessageExchangeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchangeArrayType"),
    :schema_element => [
      ["memberMessageExchange", ["MemberMessageExchangeType[]", XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MemberMessageExchangeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchangeType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["question", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "Question")], [0, 1]],
      ["response", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Response")], [0, nil]],
      ["messageStatus", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageStatus")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["lastModifiedDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedDate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MemberMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageType"),
    :schema_element => [
      ["messageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["questionType", ["QuestionTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "QuestionType")], [0, 1]],
      ["emailCopyToSender", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCopyToSender")], [0, 1]],
      ["hideSendersEmailAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideSendersEmailAddress")], [0, 1]],
      ["displayToPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayToPublic")], [0, 1]],
      ["senderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SenderID")], [0, 1]],
      ["senderEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SenderEmail")], [0, 1]],
      ["recipientID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "RecipientID")], [0, nil]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["body", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Body")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["parentMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ParentMessageID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MinimumReservePriceDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MinimumReservePriceDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MotorsLocalMarketEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MotorsLocalMarketEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesAlertArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertArrayType"),
    :schema_element => [
      ["alert", ["MyMessagesAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesAlertIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertIDArrayType"),
    :schema_element => [
      ["alertID", ["[]", XSD::QName.new(NsEBLBaseComponents, "AlertID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesAlertType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertType"),
    :schema_element => [
      ["sender", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Sender")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["priority", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Priority")], [0, 1]],
      ["alertID", [nil, XSD::QName.new(NsEBLBaseComponents, "AlertID")], [0, 1]],
      ["externalAlertID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalAlertID")], [0, 1]],
      ["contentType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContentType")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["resolutionStatus", ["MyMessagesAlertResolutionStatusCode", XSD::QName.new(NsEBLBaseComponents, "ResolutionStatus")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["receiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReceiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationDate")], [0, 1]],
      ["resolutionDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ResolutionDate")], [0, 1]],
      ["lastReadDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastReadDate")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["isTimedResolution", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IsTimedResolution")], [0, 1]],
      ["actionURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ActionURL")], [0, 1]],
      ["responseDetails", ["MyMessagesResponseDetailsType", XSD::QName.new(NsEBLBaseComponents, "ResponseDetails")], [0, 1]],
      ["forwardDetails", ["MyMessagesForwardDetailsType", XSD::QName.new(NsEBLBaseComponents, "ForwardDetails")], [0, 1]],
      ["folder", ["MyMessagesFolderType", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesExternalMessageIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesExternalMessageIDArrayType"),
    :schema_element => [
      ["externalMessageID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesFolderSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderSummaryType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["folderName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, 1]],
      ["newAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewAlertCount")], [0, 1]],
      ["newMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewMessageCount")], [0, 1]],
      ["totalAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAlertCount")], [0, 1]],
      ["totalMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalMessageCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesFolderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["folderName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesForwardDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesForwardDetailsType"),
    :schema_element => [
      ["userForwardDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserForwardDate")], [0, 1]],
      ["forwardMessageEncoding", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ForwardMessageEncoding")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesMessageArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageArrayType"),
    :schema_element => [
      ["message", ["MyMessagesMessageType[]", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesMessageIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageIDArrayType"),
    :schema_element => [
      ["messageID", ["[]", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageType"),
    :schema_element => [
      ["sender", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Sender")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["sendToName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SendToName")], [0, 1]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["messageID", [nil, XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["externalMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageID")], [0, 1]],
      ["contentType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContentType")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["flagged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Flagged")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["receiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReceiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationDate")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["responseDetails", ["MyMessagesResponseDetailsType", XSD::QName.new(NsEBLBaseComponents, "ResponseDetails")], [0, 1]],
      ["forwardDetails", ["MyMessagesForwardDetailsType", XSD::QName.new(NsEBLBaseComponents, "ForwardDetails")], [0, 1]],
      ["folder", ["MyMessagesFolderType", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, 1]],
      ["content", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Content")], [0, 1]],
      ["messageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]],
      ["questionType", ["QuestionTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "QuestionType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesResponseDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesResponseDetailsType"),
    :schema_element => [
      ["responseEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResponseEnabled")], [0, 1]],
      ["responseURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ResponseURL")], [0, 1]],
      ["userResponseDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserResponseDate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyMessagesSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesSummaryType"),
    :schema_element => [
      ["folderSummary", ["MyMessagesFolderSummaryType[]", XSD::QName.new(NsEBLBaseComponents, "FolderSummary")], [0, nil]],
      ["newAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewAlertCount")], [0, 1]],
      ["newMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewMessageCount")], [0, 1]],
      ["unresolvedAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UnresolvedAlertCount")], [0, 1]],
      ["flaggedMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FlaggedMessageCount")], [0, 1]],
      ["totalAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAlertCount")], [0, 1]],
      ["totalMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalMessageCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBayFavoriteSearchListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSearchListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["favoriteSearch", ["MyeBayFavoriteSearchType[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearch")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBayFavoriteSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSearchType"),
    :schema_element => [
      ["searchName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchName")], [0, 1]],
      ["searchQuery", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchQuery")], [0, 1]],
      ["queryKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "QueryKeywords")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["itemSort", ["SimpleItemSortCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSort")], [0, 1]],
      ["sortOrder", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SortOrder")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["itemType", ["ItemTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemType")], [0, 1]],
      ["priceMax", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PriceMax")], [0, 1]],
      ["priceMin", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PriceMin")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["bidCountMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCountMax")], [0, 1]],
      ["bidCountMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCountMin")], [0, 1]],
      ["searchFlag", ["SearchFlagCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchFlag")], [0, nil]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["preferredLocation", ["PreferredLocationCodeType", XSD::QName.new(NsEBLBaseComponents, "PreferredLocation")], [0, 1]],
      ["sellerID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, nil]],
      ["sellerIDExclude", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SellerIDExclude")], [0, nil]],
      ["itemsAvailableTo", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemsAvailableTo")], [0, 1]],
      ["itemsLocatedIn", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemsLocatedIn")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["condition", ["ItemConditionCodeType", XSD::QName.new(NsEBLBaseComponents, "Condition")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["quantityOperator", ["QuantityOperatorCodeType", XSD::QName.new(NsEBLBaseComponents, "QuantityOperator")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBayFavoriteSellerListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSellerListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["favoriteSeller", ["MyeBayFavoriteSellerType[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteSeller")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBayFavoriteSellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSellerType"),
    :schema_element => [
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBaySecondChanceOfferListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySecondChanceOfferListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["secondChanceOffer", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBaySelectionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySelectionType"),
    :schema_element => [
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]],
      ["sort", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["maxResults", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxResults")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => MyeBaySellingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySellingSummaryType"),
    :schema_element => [
      ["activeAuctionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ActiveAuctionCount")], [0, 1]],
      ["auctionSellingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionSellingCount")], [0, 1]],
      ["auctionBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionBidCount")], [0, 1]],
      ["totalAuctionSellingValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAuctionSellingValue")], [0, 1]],
      ["totalSoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalSoldCount")], [0, 1]],
      ["totalSoldValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalSoldValue")], [0, 1]],
      ["soldDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SoldDurationInDays")], [0, 1]],
      ["classifiedAdCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCount")], [0, 1]],
      ["totalLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalLeadCount")], [0, 1]],
      ["classifiedAdOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdOfferCount")], [0, 1]],
      ["totalListingsWithLeads", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalListingsWithLeads")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NameValueListArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NameValueListArrayType"),
    :schema_element => [
      ["nameValueList", ["NameValueListType[]", XSD::QName.new(NsEBLBaseComponents, "NameValueList")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => NameValueListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NameValueListType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, nil]],
      ["source", ["ItemSpecificSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "Source")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationDetailsArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsArrayType"),
    :schema_element => [
      ["notificationDetails", ["NotificationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "NotificationDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsType"),
    :schema_element => [
      ["deliveryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DeliveryURL")], [0, 1]],
      ["referenceID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferenceID")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["type", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["retries", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Retries")], [0, 1]],
      ["deliveryStatus", ["NotificationEventStateCodeType", XSD::QName.new(NsEBLBaseComponents, "DeliveryStatus")], [0, 1]],
      ["nextRetryTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "NextRetryTime")], [0, 1]],
      ["deliveryTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DeliveryTime")], [0, 1]],
      ["errorMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorMessage")], [0, 1]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationEnableArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEnableArrayType"),
    :schema_element => [
      ["notificationEnable", ["NotificationEnableType[]", XSD::QName.new(NsEBLBaseComponents, "NotificationEnable")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationEnableType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEnableType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["eventEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "EventEnable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationEventPropertyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventPropertyType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["name", ["NotificationEventPropertyNameCodeType", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationMessageType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageBody", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageBody")], [0, 1]],
      ["eIAS", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIAS")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationStatisticsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationStatisticsType"),
    :schema_element => [
      ["deliveredCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DeliveredCount")], [0, 1]],
      ["queuedNewCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QueuedNewCount")], [0, 1]],
      ["queuedPendingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QueuedPendingCount")], [0, 1]],
      ["expiredCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ExpiredCount")], [0, 1]],
      ["errorCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ErrorCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => NotificationUserDataType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationUserDataType"),
    :schema_element => [
      ["sMSSubscription", ["SMSSubscriptionType", XSD::QName.new(NsEBLBaseComponents, "SMSSubscription")], [0, 1]],
      ["summarySchedule", ["SummaryEventScheduleType[]", XSD::QName.new(NsEBLBaseComponents, "SummarySchedule")], [0, nil]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => OfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OfferArrayType"),
    :schema_element => [
      ["offer", ["OfferType[]", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OfferType"),
    :schema_element => [
      ["action", ["BidActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["maxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBid")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["secondChanceEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SecondChanceEnabled")], [0, 1]],
      ["siteCurrency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteCurrency")], [0, 1]],
      ["timeBid", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeBid")], [0, 1]],
      ["highestBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighestBid")], [0, 1]],
      ["convertedPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedPrice")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["user", ["UserType", XSD::QName.new(NsEBLBaseComponents, "User")], [0, 1]],
      ["userConsent", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsent")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderArrayType"),
    :schema_element => [
      ["order", ["OrderType[]", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderIDArrayType"),
    :schema_element => [
      ["orderID", ["[]", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderTransactionArrayType"),
    :schema_element => [
      ["orderTransaction", ["OrderTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "OrderTransaction")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderTransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderTransactionType"),
    :schema_element => [
      ["order", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["transaction", ["TransactionType", XSD::QName.new(NsEBLBaseComponents, "Transaction")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderType"),
    :schema_element => [
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["orderStatus", ["OrderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderStatus")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["amountSaved", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountSaved")], [0, 1]],
      ["checkoutStatus", ["CheckoutStatusType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["creatingUserRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "CreatingUserRole")], [0, 1]],
      ["createdTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedTime")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["sellerEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerEmail")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["shippingServiceSelected", ["ShippingServiceOptionsType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceSelected")], [0, 1]],
      ["subtotal", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Subtotal")], [0, 1]],
      ["total", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Total")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, nil]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["buyerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "BuyerUserID")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaginatedItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedItemArrayType"),
    :schema_element => [
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaginatedOrderTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedOrderTransactionArrayType"),
    :schema_element => [
      ["orderTransactionArray", ["OrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderTransactionArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaginatedTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedTransactionArrayType"),
    :schema_element => [
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => PaginationResultType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginationResultType"),
    :schema_element => [
      ["totalNumberOfPages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNumberOfPages")], [0, 1]],
      ["totalNumberOfEntries", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNumberOfEntries")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaisaPayFullEscrowEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PayPalBuyerProtectionEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PayPalRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PayPalRequiredForStoreOwnerDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwnerDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaymentDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentDetailsType"),
    :schema_element => [
      ["hoursToDeposit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "HoursToDeposit")], [0, 1]],
      ["daysToFullPayment", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DaysToFullPayment")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PaymentOptionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentOptionDetailsType"),
    :schema_element => [
      ["paymentOption", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureDetailsType"),
    :schema_element => [
      ["galleryType", ["GalleryTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "GalleryType")], [0, 1]],
      ["galleryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "GalleryURL")], [0, 1]],
      ["photoDisplay", ["PhotoDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "PhotoDisplay")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPAnyURI[]", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, nil]],
      ["pictureSource", ["PictureSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSource")], [0, 1]],
      ["galleryDuration", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "GalleryDuration")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureManagerDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailsType"),
    :schema_element => [
      ["subscriptionLevel", ["PictureManagerSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["storageUsed", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "StorageUsed")], [0, 1]],
      ["totalStorageAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalStorageAvailable")], [0, 1]],
      ["keepOriginal", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "KeepOriginal")], [0, 1]],
      ["watermarkEPS", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "WatermarkEPS")], [0, 1]],
      ["watermarkUserID", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "WatermarkUserID")], [0, 1]],
      ["folder", ["PictureManagerFolderType[]", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureManagerFolderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerFolderType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["picture", ["PictureManagerPictureType[]", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureManagerPictureDisplayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureDisplayType"),
    :schema_element => [
      ["displayType", ["PictureManagerPictureDisplayTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayType")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["size", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Size")], [0, 1]],
      ["height", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Height")], [0, 1]],
      ["width", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Width")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureManagerPictureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureType"),
    :schema_element => [
      ["pictureURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["date", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Date")], [0, 1]],
      ["displayFormat", ["PictureManagerPictureDisplayType[]", XSD::QName.new(NsEBLBaseComponents, "DisplayFormat")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureManagerSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerSubscriptionType"),
    :schema_element => [
      ["subscriptionLevel", ["PictureManagerSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["storageSize", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "StorageSize")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PictureSetMemberType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSetMemberType"),
    :schema_element => [
      ["memberURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "MemberURL")], [0, 1]],
      ["pictureHeight", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureHeight")], [0, 1]],
      ["pictureWidth", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureWidth")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PolicyComplianceDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PolicyComplianceDashboardType"),
    :schema_element => [
      ["status", ["PolicyComplianceStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PowerSellerDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PowerSellerDashboardType"),
    :schema_element => [
      ["level", ["SellerLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "Level")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PremiumSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PremiumSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PriceRangeFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PriceRangeFilterType"),
    :schema_element => [
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PricingRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PricingRecommendationsType"),
    :schema_element => [
      ["productInfo", ["ProductInfoType", XSD::QName.new(NsEBLBaseComponents, "ProductInfo")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ProPackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProPackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProPackPlusEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProStoresCheckoutPreferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProStoresCheckoutPreferenceType"),
    :schema_element => [
      ["checkoutRedirectProStores", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutRedirectProStores")], [0, 1]],
      ["proStoresDetails", ["ProStoresDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ProStoresDetails")], [0, 0]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProStoresDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProStoresDetailsType"),
    :schema_element => [
      ["sellerThirdPartyUsername", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerThirdPartyUsername")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["status", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductFamilyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductFamilyType"),
    :schema_element => [
      ["parentProduct", ["ProductType", XSD::QName.new(NsEBLBaseComponents, "ParentProduct")], [0, 1]],
      ["familyMembers", ["ProductType[]", XSD::QName.new(NsEBLBaseComponents, "FamilyMembers")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "hasMoreChildren") => "SOAP::SOAPBoolean"
    }
  )

  EncodedRegistry.register(
    :class => ProductFinderConstraintType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductFinderConstraintType"),
    :schema_element => [
      ["displayName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayName")], [0, 1]],
      ["displayValue", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayValue")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductInfoType"),
    :schema_element => [
      ["averageStartPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AverageStartPrice")], [0, 1]],
      ["averageSoldPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AverageSoldPrice")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "productInfoID") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => ProductListingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductListingDetailsType"),
    :schema_element => [
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["includeStockPhotoURL", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeStockPhotoURL")], [0, 1]],
      ["includePrefilledItemInformation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludePrefilledItemInformation")], [0, 1]],
      ["useStockPhotoURLAsGallery", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UseStockPhotoURLAsGallery")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["copyright", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Copyright")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductRecommendationsType"),
    :schema_element => [
      ["product", ["ProductInfoType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductSearchPageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchPageType"),
    :schema_element => [
      ["searchCharacteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "SearchCharacteristicsSet")], [0, 1]],
      ["searchType", ["CharacteristicsSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["sortCharacteristics", ["CharacteristicType[]", XSD::QName.new(NsEBLBaseComponents, "SortCharacteristics")], [0, nil]],
      ["dataElementSet", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSet")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductSearchResultType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchResultType"),
    :schema_element => [
      ["iD", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, 1]],
      ["numProducts", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NumProducts")], [0, 1]],
      ["attributeSet", ["ResponseAttributeSetType[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSet")], [0, nil]],
      ["displayStockPhotos", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayStockPhotos")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchType"),
    :schema_element => [
      ["productSearchID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductSearchID")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")]],
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["sortAttributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SortAttributeID")], [0, 1]],
      ["maxChildrenPerFamily", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxChildrenPerFamily")], [0, 1]],
      ["searchAttributes", ["SearchAttributesType[]", XSD::QName.new(NsEBLBaseComponents, "SearchAttributes")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["availableItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AvailableItemsOnly")], [0, 1]],
      ["queryKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "QueryKeywords")], [0, 1]],
      ["characteristicSetIDs", ["CharacteristicSetIDsType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicSetIDs")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductType"),
    :schema_element => [
      ["characteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSet")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["numItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumItems")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "productID") => "SOAP::SOAPString",
      XSD::QName.new(nil, "stockPhotoURL") => "SOAP::SOAPAnyURI",
      XSD::QName.new(nil, "title") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => PromotedItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotedItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["position", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Position")], [0, 1]],
      ["selectionType", ["PromotionItemSelectionCodeType", XSD::QName.new(NsEBLBaseComponents, "SelectionType")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["promotionDetails", ["PromotionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionDetails")], [0, nil]],
      ["timeLeft", ["SOAP::SOAPDuration", XSD::QName.new(NsEBLBaseComponents, "TimeLeft")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionDetailsType"),
    :schema_element => [
      ["promotionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PromotionPrice")], [0, 1]],
      ["promotionPriceType", ["PromotionItemPriceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionPriceType")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["convertedPromotionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedPromotionPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionRuleArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionRuleArrayType"),
    :schema_element => [
      ["promotionRule", ["PromotionRuleType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionRule")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionRuleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionRuleType"),
    :schema_element => [
      ["promotedStoreCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotedStoreCategoryID")], [0, 1]],
      ["promotedeBayCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotedeBayCategoryID")], [0, 1]],
      ["promotedKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotedKeywords")], [0, 1]],
      ["referringItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ReferringItemID")], [0, 1]],
      ["referringStoreCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReferringStoreCategoryID")], [0, 1]],
      ["referringeBayCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferringeBayCategoryID")], [0, 1]],
      ["referringKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferringKeywords")], [0, 1]],
      ["promotionScheme", ["PromotionSchemeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionScheme")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionalSaleArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleArrayType"),
    :schema_element => [
      ["promotionalSale", ["PromotionalSaleType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionalSale")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionalSaleDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetailsType"),
    :schema_element => [
      ["originalPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OriginalPrice")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionalSaleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleType"),
    :schema_element => [
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]],
      ["promotionalSaleName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleName")], [0, 1]],
      ["promotionalSaleItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleItemIDArray")], [0, 1]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["discountType", ["DiscountCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountType")], [0, 1]],
      ["discountValue", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "DiscountValue")], [0, 1]],
      ["promotionalSaleStartTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleStartTime")], [0, 1]],
      ["promotionalSaleEndTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleEndTime")], [0, 1]],
      ["promotionalSaleType", ["PromotionalSaleTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => PromotionalShippingDiscountDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetailsType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["shippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingCost")], [0, 1]],
      ["orderAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OrderAmount")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ProximitySearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProximitySearchType"),
    :schema_element => [
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReasonCodeDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReasonCodeDetailType"),
    :schema_element => [
      ["briefText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BriefText")], [0, 1]],
      ["detailedText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DetailedText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "codeID") => "SOAP::SOAPLong"
    }
  )

  EncodedRegistry.register(
    :class => RefundArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundArrayType"),
    :schema_element => [
      ["refund", ["RefundType[]", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => RefundDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundDetailsType"),
    :schema_element => [
      ["refundOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "RefundOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RefundType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundType"),
    :schema_element => [
      ["refundFromSeller", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundFromSeller")], [0, 1]],
      ["totalRefundToBuyer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalRefundToBuyer")], [0, 1]],
      ["refundTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RegionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegionDetailsType"),
    :schema_element => [
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RegionOfOriginDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegionOfOriginDetailsType"),
    :schema_element => [
      ["regionOfOrigin", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionOfOrigin")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["status", ["StatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RegularSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegularSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RelatedSearchKeywordArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArrayType"),
    :schema_element => [
      ["keyword", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Keyword")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ReminderCustomizationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReminderCustomizationType"),
    :schema_element => [
      ["durationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DurationInDays")], [0, 1]],
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => RemindersType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemindersType"),
    :schema_element => [
      ["paymentToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentToSendCount")], [0, 1]],
      ["feedbackToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackToReceiveCount")], [0, 1]],
      ["feedbackToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackToSendCount")], [0, 1]],
      ["outbidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "OutbidCount")], [0, 1]],
      ["paymentToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentToReceiveCount")], [0, 1]],
      ["secondChanceOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOfferCount")], [0, 1]],
      ["shippingNeededCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingNeededCount")], [0, 1]],
      ["relistingNeededCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RelistingNeededCount")], [0, 1]],
      ["totalNewLeadsCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNewLeadsCount")], [0, 1]],
      ["docsForCCProcessingToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DocsForCCProcessingToSendCount")], [0, 1]],
      ["rTEToProcessCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RTEToProcessCount")], [0, 1]],
      ["itemReceiptToConfirmCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemReceiptToConfirmCount")], [0, 1]],
      ["refundOnHoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundOnHoldCount")], [0, 1]],
      ["refundCancelledCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundCancelledCount")], [0, 1]],
      ["shippingDetailsToBeProvidedCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingDetailsToBeProvidedCount")], [0, 1]],
      ["itemReceiptConfirmationToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemReceiptConfirmationToReceiveCount")], [0, 1]],
      ["refundInitiatedCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundInitiatedCount")], [0, 1]],
      ["pendingRTERequestCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PendingRTERequestCount")], [0, 1]],
      ["declinedRTERequestCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DeclinedRTERequestCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RequestCategoriesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RequestCategoriesType"),
    :schema_element => [
      ["categoriesOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoriesOnly")], [0, 1]],
      ["maxCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategories")], [0, 1]],
      ["maxSubcategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxSubcategories")], [0, 1]],
      ["levels", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Levels")], [0, 1]],
      ["demandData", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DemandData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ResponseAttributeSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ResponseAttributeSetType"),
    :schema_element => [
      ["approximatePages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ApproximatePages")]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")]],
      ["productFamilies", ["ProductFamilyType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFamilies")], [0, nil]],
      ["productFinderConstraints", ["ProductFinderConstraintType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderConstraints")], [0, nil]],
      ["tooManyMatchesFound", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TooManyMatchesFound")]],
      ["totalProducts", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalProducts")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReturnPolicyDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyDetailsType"),
    :schema_element => [
      ["refund", ["RefundDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, nil]],
      ["returnsWithin", ["ReturnsWithinDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithin")], [0, nil]],
      ["returnsAccepted", ["ReturnsAcceptedDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ReturnsAccepted")], [0, nil]],
      ["description", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["warrantyOffered", ["WarrantyOfferedDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyOffered")], [0, nil]],
      ["warrantyType", ["WarrantyTypeDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyType")], [0, nil]],
      ["warrantyDuration", ["WarrantyDurationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyDuration")], [0, nil]],
      ["eAN", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EAN")], [0, 1]],
      ["shippingCostPaidBy", ["ShippingCostPaidByDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidBy")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReturnPolicyEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReturnPolicyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyType"),
    :schema_element => [
      ["refundOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "RefundOption")], [0, 1]],
      ["refund", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, 1]],
      ["returnsWithinOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOption")], [0, 1]],
      ["returnsWithin", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithin")], [0, 1]],
      ["returnsAcceptedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOption")], [0, 1]],
      ["returnsAccepted", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReturnsAccepted")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["warrantyOfferedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedOption")], [0, 1]],
      ["warrantyOffered", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyOffered")], [0, 1]],
      ["warrantyTypeOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOption")], [0, 1]],
      ["warrantyType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyType")], [0, 1]],
      ["warrantyDurationOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOption")], [0, 1]],
      ["warrantyDuration", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyDuration")], [0, 1]],
      ["eAN", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EAN")], [0, 1]],
      ["shippingCostPaidByOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOption")], [0, 1]],
      ["shippingCostPaidBy", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidBy")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReturnsAcceptedDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedDetailsType"),
    :schema_element => [
      ["returnsAcceptedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReturnsWithinDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinDetailsType"),
    :schema_element => [
      ["returnsWithinOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviewDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviewDetailsType"),
    :schema_element => [
      ["averageRating", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "AverageRating")], [0, 1]],
      ["review", ["ReviewType[]", XSD::QName.new(NsEBLBaseComponents, "Review")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviewType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviewType"),
    :schema_element => [
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["rating", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["creationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => RevisePriceAllowedDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowedDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseQuantityAllowedDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowedDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ReviseStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseStatusType"),
    :schema_element => [
      ["itemRevised", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ItemRevised")]],
      ["buyItNowAdded", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowAdded")], [0, 1]],
      ["buyItNowLowered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowLowered")], [0, 1]],
      ["reserveLowered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveLowered")], [0, 1]],
      ["reserveRemoved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveRemoved")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SIFFTASRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SIFFTASRecommendationsType"),
    :schema_element => [
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SKUArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SKUArrayType"),
    :schema_element => [
      ["sKU", ["[]", XSD::QName.new(NsEBLBaseComponents, "SKU")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => SMSSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionType"),
    :schema_element => [
      ["sMSPhone", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SMSPhone")], [0, 1]],
      ["userStatus", ["SMSSubscriptionUserStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "UserStatus")], [0, 1]],
      ["carrierID", ["WirelessCarrierIDCodeType", XSD::QName.new(NsEBLBaseComponents, "CarrierID")], [0, 1]],
      ["errorCode", ["SMSSubscriptionErrorCodeCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["itemToUnsubscribe", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemToUnsubscribe")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SafePaymentRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SalesTaxType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SalesTaxType"),
    :schema_element => [
      ["salesTaxPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "SalesTaxPercent")], [0, 1]],
      ["salesTaxState", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SalesTaxState")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["salesTaxAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "SalesTaxAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ScheduleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ScheduleType"),
    :schema_element => [
      ["scheduleID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ScheduleID")], [0, 1]],
      ["scheduleTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ScheduleTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SchedulingInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SchedulingInfoType"),
    :schema_element => [
      ["maxScheduledMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxScheduledMinutes")], [0, 1]],
      ["minScheduledMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinScheduledMinutes")], [0, 1]],
      ["maxScheduledItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxScheduledItems")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchAttributesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchAttributesType"),
    :schema_element => [
      ["attributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeID")]],
      ["dateSpecifier", ["DateSpecifierCodeType", XSD::QName.new(NsEBLBaseComponents, "DateSpecifier")], [0, 1]],
      ["rangeSpecifier", ["RangeCodeType", XSD::QName.new(NsEBLBaseComponents, "RangeSpecifier")], [0, 1]],
      ["valueList", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "ValueList")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchDetailsType"),
    :schema_element => [
      ["buyItNowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowEnabled")], [0, 1]],
      ["picture", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, 1]],
      ["recentListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RecentListing")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchLocationFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchLocationFilterType"),
    :schema_element => [
      ["countryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "CountryCode")], [0, 1]],
      ["itemLocation", ["ItemLocationCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemLocation")], [0, 1]],
      ["searchLocation", ["SearchLocationType", XSD::QName.new(NsEBLBaseComponents, "SearchLocation")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchLocationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchLocationType"),
    :schema_element => [
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["siteLocation", ["SiteLocationType", XSD::QName.new(NsEBLBaseComponents, "SiteLocation")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchRequestType"),
    :schema_element => [
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["searchAttributes", ["SearchAttributesType[]", XSD::QName.new(NsEBLBaseComponents, "SearchAttributes")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchResultItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultItemArrayType"),
    :schema_element => [
      ["searchResultItem", ["SearchResultItemType[]", XSD::QName.new(NsEBLBaseComponents, "SearchResultItem")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchResultItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["itemSpecific", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecific")], [0, 1]],
      ["searchResultValues", ["SearchResultValuesCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchResultValues")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchStandingDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStandingDashboardType"),
    :schema_element => [
      ["status", ["SearchStandingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SearchStoreFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStoreFilterType"),
    :schema_element => [
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["storeSearch", ["StoreSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "StoreSearch")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerAccountDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerAccountDashboardType"),
    :schema_element => [
      ["status", ["SellerAccountStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerDashboardAlertType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerDashboardAlertType"),
    :schema_element => [
      ["severity", ["SellerDashboardAlertSeverityCodeType", XSD::QName.new(NsEBLBaseComponents, "Severity")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerFavoriteItemPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferencesType"),
    :schema_element => [
      ["searchKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchKeywords")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["searchSortOrder", ["StoreItemListSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchSortOrder")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["favoriteItemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteItemID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerFeeDiscountDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerFeeDiscountDashboardType"),
    :schema_element => [
      ["percent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "Percent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerPaymentPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferencesType"),
    :schema_element => [
      ["alwaysUseThisPaymentAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AlwaysUseThisPaymentAddress")], [0, 1]],
      ["displayPayNowButton", ["DisplayPayNowButtonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayPayNowButton")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]],
      ["defaultPayPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DefaultPayPalEmailAddress")], [0, 1]],
      ["payPalAlwaysOn", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAlwaysOn")], [0, 1]],
      ["sellerPaymentAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentAddress")], [0, 1]],
      ["uPSRateOption", ["UPSRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "UPSRateOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerPaymentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]],
      ["privateNotes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PrivateNotes")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["paymentType", ["PaymentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentType")], [0, 1]],
      ["transactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TransactionPrice")], [0, 1]],
      ["shippingReimbursement", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingReimbursement")], [0, 1]],
      ["commission", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Commission")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerRatingSummaryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerRatingSummaryArrayType"),
    :schema_element => [
      ["averageRatingSummary", ["AverageRatingSummaryType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingSummary")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerRoleMetricsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerRoleMetricsType"),
    :schema_element => [
      ["positiveFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackLeftCount")], [0, 1]],
      ["negativeFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackLeftCount")], [0, 1]],
      ["neutralFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackLeftCount")], [0, 1]],
      ["feedbackLeftPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeftPercent")], [0, 1]],
      ["repeatBuyerCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RepeatBuyerCount")], [0, 1]],
      ["repeatBuyerPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "RepeatBuyerPercent")], [0, 1]],
      ["uniqueBuyerCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueBuyerCount")], [0, 1]],
      ["transactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "TransactionPercent")], [0, 1]],
      ["crossBorderTransactionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTransactionCount")], [0, 1]],
      ["crossBorderTransactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTransactionPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerType"),
    :schema_element => [
      ["paisaPayStatus", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaisaPayStatus")], [0, 1]],
      ["allowPaymentEdit", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllowPaymentEdit")]],
      ["billingCurrency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "BillingCurrency")], [0, 1]],
      ["checkoutEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutEnabled")]],
      ["cIPBankAccountStored", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CIPBankAccountStored")]],
      ["goodStanding", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GoodStanding")]],
      ["liveAuctionAuthorized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionAuthorized")]],
      ["merchandizingPref", ["MerchandizingPrefCodeType", XSD::QName.new(NsEBLBaseComponents, "MerchandizingPref")], [0, 1]],
      ["qualifiesForB2BVAT", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "QualifiesForB2BVAT")]],
      ["sellerGuaranteeLevel", ["SellerGuaranteeLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeLevel")], [0, 1]],
      ["sellerLevel", ["SellerLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerLevel")], [0, 1]],
      ["sellerPaymentAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentAddress")], [0, 1]],
      ["schedulingInfo", ["SchedulingInfoType", XSD::QName.new(NsEBLBaseComponents, "SchedulingInfo")], [0, 1]],
      ["storeOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwner")]],
      ["storeURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StoreURL")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["registeredBusinessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RegisteredBusinessSeller")], [0, 1]],
      ["storeSite", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "StoreSite")], [0, 1]],
      ["paymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["proStoresPreference", ["ProStoresCheckoutPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ProStoresPreference")], [0, 1]],
      ["charityRegistered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CharityRegistered")], [0, 1]],
      ["safePaymentExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentExempt")], [0, 1]],
      ["paisaPayEscrowEMIStatus", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaisaPayEscrowEMIStatus")], [0, 1]],
      ["charityAffiliationDetails", ["CharityAffiliationDetailsType", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetails")], [0, 1]],
      ["transactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "TransactionPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellingManagerProductDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingManagerProductDetailsType"),
    :schema_element => [
      ["productName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductName")], [0, 1]],
      ["partNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PartNumber")], [0, 1]],
      ["productPartNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductPartNumber")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["customLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CustomLabel")], [0, 1]],
      ["quantityAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityAvailable")], [0, 1]],
      ["unitCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "UnitCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellingStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingStatusType"),
    :schema_element => [
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["bidIncrement", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BidIncrement")], [0, 1]],
      ["convertedCurrentPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedCurrentPrice")], [0, 1]],
      ["currentPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CurrentPrice")], [0, 1]],
      ["highBidder", ["UserType", XSD::QName.new(NsEBLBaseComponents, "HighBidder")], [0, 1]],
      ["leadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LeadCount")], [0, 1]],
      ["minimumToBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinimumToBid")], [0, 1]],
      ["quantitySold", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantitySold")], [0, 1]],
      ["reserveMet", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveMet")], [0, 1]],
      ["secondChanceEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SecondChanceEligible")], [0, 1]],
      ["bidderCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidderCount")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]],
      ["finalValueFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FinalValueFee")], [0, 1]],
      ["promotionalSaleDetails", ["PromotionalSaleDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]],
      ["adminEnded", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdminEnded")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SellingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingSummaryType"),
    :schema_element => [
      ["activeAuctionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ActiveAuctionCount")], [0, 1]],
      ["auctionSellingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionSellingCount")], [0, 1]],
      ["auctionBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionBidCount")], [0, 1]],
      ["totalAuctionSellingValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAuctionSellingValue")], [0, 1]],
      ["totalSoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalSoldCount")], [0, 1]],
      ["totalSoldValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalSoldValue")], [0, 1]],
      ["soldDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SoldDurationInDays")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ShipmentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentType"),
    :schema_element => [
      ["estimatedDeliveryDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EstimatedDeliveryDate")], [0, 1]],
      ["insuredValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuredValue")], [0, 1]],
      ["packageDepth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageDepth")], [0, 1]],
      ["packageLength", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageLength")], [0, 1]],
      ["packageWidth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageWidth")], [0, 1]],
      ["payPalShipmentID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalShipmentID")], [0, 1]],
      ["shipmentID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ShipmentID")], [0, 1]],
      ["postageTotal", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PostageTotal")], [0, 1]],
      ["printedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PrintedTime")], [0, 1]],
      ["shipFromAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShipFromAddress")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["shippingCarrierUsed", ["ShippingCarrierCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierUsed")], [0, 1]],
      ["shippingFeature", ["ShippingFeatureCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingFeature")], [0, nil]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["shippingServiceUsed", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceUsed")], [0, 1]],
      ["shipmentTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackingNumber")], [0, 1]],
      ["weightMajor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMajor")], [0, 1]],
      ["weightMinor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMinor")], [0, 1]],
      ["itemTransactionID", ["ItemTransactionIDType[]", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionID")], [0, nil]],
      ["deliveryDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DeliveryDate")], [0, 1]],
      ["deliveryStatus", ["ShipmentDeliveryStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "DeliveryStatus")], [0, 1]],
      ["refundGrantedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundGrantedTime")], [0, 1]],
      ["refundRequestedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundRequestedTime")], [0, 1]],
      ["status", ["ShipmentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingCarrierDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierDetailsType"),
    :schema_element => [
      ["shippingCarrierID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["shippingCarrier", ["ShippingCarrierCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrier")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingCostPaidByDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByDetailsType"),
    :schema_element => [
      ["shippingCostPaidByOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingDetailsType"),
    :schema_element => [
      ["allowPaymentEdit", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllowPaymentEdit")], [0, 1]],
      ["applyShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApplyShippingDiscount")], [0, 1]],
      ["calculatedShippingRate", ["CalculatedShippingRateType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRate")], [0, 1]],
      ["changePaymentInstructions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ChangePaymentInstructions")], [0, 1]],
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["insuranceWanted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InsuranceWanted")], [0, 1]],
      ["paymentEdited", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaymentEdited")], [0, 1]],
      ["paymentInstructions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PaymentInstructions")], [0, 1]],
      ["salesTax", ["SalesTaxType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["shippingRateErrorMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingRateErrorMessage")], [0, 1]],
      ["shippingRateType", ["ShippingRateTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingRateType")], [0, 1]],
      ["shippingServiceOptions", ["ShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptions")], [0, nil]],
      ["internationalShippingServiceOption", ["InternationalShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOption")], [0, nil]],
      ["shippingType", ["ShippingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingType")], [0, 1]],
      ["sellingManagerSalesRecordNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SellingManagerSalesRecordNumber")], [0, 1]],
      ["thirdPartyCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckout")], [0, 1]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]],
      ["getItFast", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GetItFast")], [0, 1]],
      ["shipmentTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackingNumber")], [0, 1]],
      ["shippingServiceUsed", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceUsed")], [0, 1]],
      ["defaultShippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DefaultShippingCost")], [0, 1]],
      ["insuranceDetails", ["InsuranceDetailsType", XSD::QName.new(NsEBLBaseComponents, "InsuranceDetails")], [0, 1]],
      ["internationalInsuranceDetails", ["InsuranceDetailsType", XSD::QName.new(NsEBLBaseComponents, "InternationalInsuranceDetails")], [0, 1]],
      ["shippingDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingDiscountProfileID")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscount")], [0, 1]],
      ["internationalShippingDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingDiscountProfileID")], [0, 1]],
      ["internationalFlatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "InternationalFlatShippingDiscount")], [0, 1]],
      ["internationalCalculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "InternationalCalculatedShippingDiscount")], [0, 1]],
      ["internationalPromotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InternationalPromotionalShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingInsuranceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceType"),
    :schema_element => [
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["flatRateInsuranceRangeCost", ["FlatRateInsuranceRangeCostType[]", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCost")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingLocationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingLocationDetailsType"),
    :schema_element => [
      ["shippingLocation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingLocation")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingPackageDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingPackageDetailsType"),
    :schema_element => [
      ["packageID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PackageID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["default", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Default")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingServiceDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceDetailsType"),
    :schema_element => [
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["expeditedService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpeditedService")], [0, 1]],
      ["internationalService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InternationalService")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceID")], [0, 1]],
      ["shippingTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMax")], [0, 1]],
      ["shippingTimeMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMin")], [0, 1]],
      ["shippingServiceCode", ["ShippingServiceCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCode")], [0, 1]],
      ["serviceType", ["ShippingTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ServiceType")], [0, nil]],
      ["shippingPackage", ["ShippingPackageCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, nil]],
      ["dimensionsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DimensionsRequired")], [0, 1]],
      ["validForSellingFlow", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValidForSellingFlow")], [0, 1]],
      ["surchargeApplicable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SurchargeApplicable")], [0, 1]],
      ["shippingCarrier", ["ShippingCarrierCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrier")], [0, nil]],
      ["cODService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CODService")], [0, 1]],
      ["deprecationDetails", ["AnnouncementMessageType[]", XSD::QName.new(NsEBLBaseComponents, "DeprecationDetails")], [0, nil]],
      ["mappedToShippingServiceID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MappedToShippingServiceID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingServiceOptionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptionsType"),
    :schema_element => [
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCost")], [0, 1]],
      ["shippingServiceAdditionalCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceAdditionalCost")], [0, 1]],
      ["shippingServicePriority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServicePriority")], [0, 1]],
      ["expeditedService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpeditedService")], [0, 1]],
      ["shippingTimeMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMin")], [0, 1]],
      ["shippingTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMax")], [0, 1]],
      ["shippingSurcharge", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingSurcharge")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ShippingTermRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingTermRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SiteDefaultsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteDefaultsType"),
    :schema_element => [
      ["listingDuration", ["ListingDurationReferenceType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]],
      ["shippingTermsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["localListingDistancesRegular", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegular")], [0, 1]],
      ["localListingDistancesSpecialty", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialty")], [0, 1]],
      ["localListingDistancesNonSubscription", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscription")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineCodeType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationReferenceType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["payPalRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "AdFormatEnabledCodeType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPhoneCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProStreetCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "ClassifiedAdBestOfferEnabledCodeType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "ClassifiedAdPaymentMethodEnabledCodeType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["localMarketAdFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["returnPolicyEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["maxFlatShippingCost", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCost")], [0, 1]],
      ["maxFlatShippingCostCBTExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCostCBTExempt")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SiteDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteDetailsType"),
    :schema_element => [
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["siteID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SiteHostedPictureDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteHostedPictureDetailsType"),
    :schema_element => [
      ["pictureName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureName")], [0, 1]],
      ["pictureSet", ["PictureSetCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSet")], [0, 1]],
      ["pictureFormat", ["PictureFormatCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureFormat")], [0, 1]],
      ["fullURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "FullURL")], [0, 1]],
      ["baseURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "BaseURL")], [0, 1]],
      ["pictureSetMember", ["PictureSetMemberType[]", XSD::QName.new(NsEBLBaseComponents, "PictureSetMember")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SiteLocationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteLocationType"),
    :schema_element => [
      ["siteID", ["SiteIDFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SiteWideCharacteristicsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteWideCharacteristicsType"),
    :schema_element => [
      ["characteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSet")], [0, 1]],
      ["excludeCategoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ExcludeCategoryID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SkypeMeNonTransactionalEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SkypeMeTransactionalEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SpecialitySubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SpellingSuggestionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SpellingSuggestionType"),
    :schema_element => [
      ["matchingItemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MatchingItemCount")], [0, 1]],
      ["text", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreColorSchemeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorSchemeArrayType"),
    :schema_element => [
      ["colorScheme", ["StoreColorSchemeType[]", XSD::QName.new(NsEBLBaseComponents, "ColorScheme")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreColorSchemeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorSchemeType"),
    :schema_element => [
      ["colorSchemeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ColorSchemeID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["color", ["StoreColorType", XSD::QName.new(NsEBLBaseComponents, "Color")], [0, 1]],
      ["font", ["StoreFontType", XSD::QName.new(NsEBLBaseComponents, "Font")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreColorType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorType"),
    :schema_element => [
      ["primary", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Primary")], [0, 1]],
      ["secondary", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Secondary")], [0, 1]],
      ["accent", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Accent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomCategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomCategoryArrayType"),
    :schema_element => [
      ["customCategory", ["StoreCustomCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "CustomCategory")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomCategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomCategoryType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "CategoryID")]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")]],
      ["childCategory", ["StoreCustomCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "ChildCategory")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomListingHeaderLinkType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderLinkType"),
    :schema_element => [
      ["linkID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LinkID")]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")]],
      ["linkType", ["StoreCustomListingHeaderLinkCodeType", XSD::QName.new(NsEBLBaseComponents, "LinkType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomListingHeaderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderType"),
    :schema_element => [
      ["displayType", ["StoreCustomListingHeaderDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayType")], [0, 1]],
      ["logo", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, 1]],
      ["searchBox", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchBox")], [0, 1]],
      ["linkToInclude", ["StoreCustomListingHeaderLinkType[]", XSD::QName.new(NsEBLBaseComponents, "LinkToInclude")], [0, nil]],
      ["addToFavoriteStores", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AddToFavoriteStores")], [0, 1]],
      ["signUpForStoreNewsletter", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SignUpForStoreNewsletter")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomPageArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageArrayType"),
    :schema_element => [
      ["customPage", ["StoreCustomPageType[]", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreCustomPageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["pageID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PageID")], [0, 1]],
      ["uRLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "URLPath")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["status", ["StoreCustomPageStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["content", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Content")], [0, 1]],
      ["leftNav", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LeftNav")], [0, 1]],
      ["previewEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PreviewEnabled")], [0, 1]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreFontType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontType"),
    :schema_element => [
      ["nameFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "NameFace")], [0, 1]],
      ["nameSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "NameSize")], [0, 1]],
      ["nameColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NameColor")], [0, 1]],
      ["titleFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "TitleFace")], [0, 1]],
      ["titleSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "TitleSize")], [0, 1]],
      ["titleColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TitleColor")], [0, 1]],
      ["descFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "DescFace")], [0, 1]],
      ["descSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "DescSize")], [0, 1]],
      ["descColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DescColor")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreInventoryEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreLogoArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreLogoArrayType"),
    :schema_element => [
      ["logo", ["StoreLogoType[]", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreLogoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreLogoType"),
    :schema_element => [
      ["logoID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LogoID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreOwnerExtendedListingDurationsDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreOwnerExtendedListingDurationsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreOwnerExtendedListingDurationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StorePreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StorePreferencesType"),
    :schema_element => [
      ["vacationPreferences", ["StoreVacationPreferencesType", XSD::QName.new(NsEBLBaseComponents, "VacationPreferences")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreSubscriptionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionArrayType"),
    :schema_element => [
      ["subscription", ["StoreSubscriptionType[]", XSD::QName.new(NsEBLBaseComponents, "Subscription")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionType"),
    :schema_element => [
      ["level", ["StoreSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "Level")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreThemeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreThemeArrayType"),
    :schema_element => [
      ["theme", ["StoreThemeType[]", XSD::QName.new(NsEBLBaseComponents, "Theme")], [0, nil]],
      ["genericColorSchemeArray", ["StoreColorSchemeArrayType", XSD::QName.new(NsEBLBaseComponents, "GenericColorSchemeArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreThemeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreThemeType"),
    :schema_element => [
      ["themeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["colorScheme", ["StoreColorSchemeType", XSD::QName.new(NsEBLBaseComponents, "ColorScheme")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "URLPath")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["subscriptionLevel", ["StoreSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["logo", ["StoreLogoType", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, 1]],
      ["theme", ["StoreThemeType", XSD::QName.new(NsEBLBaseComponents, "Theme")], [0, 1]],
      ["headerStyle", ["StoreHeaderStyleCodeType", XSD::QName.new(NsEBLBaseComponents, "HeaderStyle")], [0, 1]],
      ["homePage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HomePage")], [0, 1]],
      ["itemListLayout", ["StoreItemListLayoutCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemListLayout")], [0, 1]],
      ["itemListSortOrder", ["StoreItemListSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemListSortOrder")], [0, 1]],
      ["customHeaderLayout", ["StoreCustomHeaderLayoutCodeType", XSD::QName.new(NsEBLBaseComponents, "CustomHeaderLayout")], [0, 1]],
      ["customHeader", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CustomHeader")], [0, 1]],
      ["exportListings", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExportListings")], [0, 1]],
      ["customCategories", ["StoreCustomCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CustomCategories")], [0, 1]],
      ["customListingHeader", ["StoreCustomListingHeaderType", XSD::QName.new(NsEBLBaseComponents, "CustomListingHeader")], [0, 1]],
      ["merchDisplay", ["MerchDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "MerchDisplay")], [0, 1]],
      ["lastOpenedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastOpenedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => StoreVacationPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreVacationPreferencesType"),
    :schema_element => [
      ["onVacation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "OnVacation")], [0, 1]],
      ["returnDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReturnDate")], [0, 1]],
      ["hideFixedPriceStoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideFixedPriceStoreItems")], [0, 1]],
      ["messageItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MessageItem")], [0, 1]],
      ["messageStore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MessageStore")], [0, 1]],
      ["displayMessageStoreCustomText", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayMessageStoreCustomText")], [0, 1]],
      ["messageStoreCustomText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageStoreCustomText")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => StorefrontType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StorefrontType"),
    :schema_element => [
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")]],
      ["storeCategory2ID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategory2ID")]],
      ["storeURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StoreURL")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SubscriptionType"),
    :schema_element => [
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["siteID", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["active", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Active")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SuggestedCategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryArrayType"),
    :schema_element => [
      ["suggestedCategory", ["SuggestedCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "SuggestedCategory")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SuggestedCategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryType"),
    :schema_element => [
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["percentItemFound", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PercentItemFound")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SummaryEventScheduleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryEventScheduleType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["summaryPeriod", ["SummaryWindowPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "SummaryPeriod")], [0, 1]],
      ["frequency", ["SummaryFrequencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Frequency")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => SupportedEventTypesArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SupportedEventTypesArrayType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => TCREnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TCREnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TaxJurisdictionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaxJurisdictionType"),
    :schema_element => [
      ["jurisdictionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "JurisdictionID")], [0, 1]],
      ["salesTaxPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "SalesTaxPercent")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["jurisdictionName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "JurisdictionName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TaxTableType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaxTableType"),
    :schema_element => [
      ["taxJurisdiction", ["TaxJurisdictionType[]", XSD::QName.new(NsEBLBaseComponents, "TaxJurisdiction")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ThemeGroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ThemeGroupType"),
    :schema_element => [
      ["groupID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GroupID")], [0, 1]],
      ["groupName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "GroupName")], [0, 1]],
      ["themeID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, nil]],
      ["themeTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeTotal")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TicketDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TicketDetailsType"),
    :schema_element => [
      ["eventType", ["TicketEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["eventDate", ["DateType", XSD::QName.new(NsEBLBaseComponents, "EventDate")], [0, 1]],
      ["stateOrProvince", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StateOrProvince")], [0, 1]],
      ["cityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CityName")], [0, 1]],
      ["ticketQuantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TicketQuantity")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TimeZoneDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TimeZoneDetailsType"),
    :schema_element => [
      ["timeZoneID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TimeZoneID")], [0, 1]],
      ["standardLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StandardLabel")], [0, 1]],
      ["standardOffset", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StandardOffset")], [0, 1]],
      ["daylightSavingsLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsLabel")], [0, 1]],
      ["daylightSavingsOffset", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsOffset")], [0, 1]],
      ["daylightSavingsInEffect", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsInEffect")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TokenStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenStatusType"),
    :schema_element => [
      ["status", ["TokenStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["revocationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RevocationTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionArrayType"),
    :schema_element => [
      ["transaction", ["TransactionType[]", XSD::QName.new(NsEBLBaseComponents, "Transaction")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => TransactionStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionStatusType"),
    :schema_element => [
      ["eBayPaymentStatus", "PaymentStatusCodeType", [0, 1]],
      ["checkoutStatus", ["CheckoutStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["lastTimeModified", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastTimeModified")], [0, 1]],
      ["paymentMethodUsed", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethodUsed")], [0, 1]],
      ["completeStatus", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CompleteStatus")], [0, 1]],
      ["buyerSelectedShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerSelectedShipping")], [0, 1]],
      ["paymentHoldStatus", ["PaymentHoldStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentHoldStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => TransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionType"),
    :schema_element => [
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["convertedAdjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedAdjustmentAmount")], [0, 1]],
      ["buyer", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Buyer")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["convertedAmountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedAmountPaid")], [0, 1]],
      ["convertedTransactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedTransactionPrice")], [0, 1]],
      ["createdDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedDate")], [0, 1]],
      ["depositType", ["DepositTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DepositType")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["quantityPurchased", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityPurchased")], [0, 1]],
      ["status", ["TransactionStatusType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["transactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TransactionPrice")], [0, 1]],
      ["bestOfferSale", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferSale")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, nil]],
      ["sellingManagerProductDetails", ["SellingManagerProductDetailsType", XSD::QName.new(NsEBLBaseComponents, "SellingManagerProductDetails")], [0, 1]],
      ["shippingServiceSelected", ["ShippingServiceOptionsType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceSelected")], [0, 1]],
      ["buyerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerMessage")], [0, 1]],
      ["dutchAuctionBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DutchAuctionBid")], [0, 1]],
      ["buyerPaidStatus", ["PaidStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerPaidStatus")], [0, 1]],
      ["sellerPaidStatus", ["PaidStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerPaidStatus")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["totalPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalPrice")], [0, 1]],
      ["feedbackLeft", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeft")], [0, 1]],
      ["feedbackReceived", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackReceived")], [0, 1]],
      ["containingOrder", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "ContainingOrder")], [0, 1]],
      ["finalValueFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FinalValueFee")], [0, 1]],
      ["transactionPlatform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "TransactionPlatform")], [0, 1]],
      ["listingCheckoutRedirectPreference", ["ListingCheckoutRedirectPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreference")], [0, 1]],
      ["refundArray", ["RefundArrayType", XSD::QName.new(NsEBLBaseComponents, "RefundArray")], [0, 1]],
      ["transactionSiteID", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "TransactionSiteID")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["cartID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CartID")], [0, 1]],
      ["sellerContactBuyerByEmail", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactBuyerByEmail")], [0, 1]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["paisaPayID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PaisaPayID")], [0, 1]],
      ["buyerGuaranteePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteePrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => URLDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "URLDetailsType"),
    :schema_element => [
      ["uRLType", ["URLTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "URLType")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UnitOfMeasurementDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementDetailsType"),
    :schema_element => [
      ["unitOfMeasurement", ["UnitOfMeasurementType[]", XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurement")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UnitOfMeasurementType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementType"),
    :schema_element => [
      ["alternateText", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "AlternateText")], [0, nil]],
      ["suggestedText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SuggestedText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UserConsentRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserConsentRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UserIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIDArrayType"),
    :schema_element => [
      ["userID", ["[]", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UserIdFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIdFilterType"),
    :schema_element => [
      ["excludeSellers", ["[]", XSD::QName.new(NsEBLBaseComponents, "ExcludeSellers")], [0, 100]],
      ["includeSellers", ["[]", XSD::QName.new(NsEBLBaseComponents, "IncludeSellers")], [0, 100]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => UserType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserType"),
    :schema_element => [
      ["aboutMePage", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AboutMePage")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["rESTToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RESTToken")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["positiveFeedbackPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPercent")], [0, 1]],
      ["feedbackPrivate", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FeedbackPrivate")], [0, 1]],
      ["feedbackRatingStar", ["FeedbackRatingStarCodeType", XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingStar")], [0, 1]],
      ["iDVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IDVerified")], [0, 1]],
      ["eBayGoodStanding", "SOAP::SOAPBoolean", [0, 1]],
      ["newUser", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NewUser")], [0, 1]],
      ["registrationAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "RegistrationAddress")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["status", ["UserStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["userIDChanged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserIDChanged")], [0, 1]],
      ["userIDLastChanged", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserIDLastChanged")], [0, 1]],
      ["vATStatus", ["VATStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VATStatus")], [0, 1]],
      ["buyerInfo", ["BuyerType", XSD::QName.new(NsEBLBaseComponents, "BuyerInfo")], [0, 1]],
      ["sellerInfo", ["SellerType", XSD::QName.new(NsEBLBaseComponents, "SellerInfo")], [0, 1]],
      ["charityAffiliations", ["CharityAffiliationsType", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliations")], [0, 1]],
      ["payPalAccountLevel", ["PayPalAccountLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountLevel")], [0, 1]],
      ["payPalAccountType", ["PayPalAccountTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountType")], [0, 1]],
      ["payPalAccountStatus", ["PayPalAccountStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountStatus")], [0, 1]],
      ["userSubscription", ["EBaySubscriptionTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "UserSubscription")], [0, nil]],
      ["siteVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SiteVerified")], [0, 1]],
      ["skypeID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SkypeID")], [0, nil]],
      ["eBayWikiReadOnly", "SOAP::SOAPBoolean", [0, 1]],
      ["tUVLevel", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TUVLevel")], [0, 1]],
      ["vATID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATID")], [0, 1]],
      ["motorsDealer", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsDealer")], [0, 1]],
      ["sellerPaymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentMethod")], [0, 1]],
      ["biddingSummary", ["BiddingSummaryType", XSD::QName.new(NsEBLBaseComponents, "BiddingSummary")], [0, 1]],
      ["userAnonymized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserAnonymized")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["enterpriseSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EnterpriseSeller")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VATDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VATDetailsType"),
    :schema_element => [
      ["businessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BusinessSeller")], [0, 1]],
      ["restrictedToBusiness", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RestrictedToBusiness")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["vATSite", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATSite")], [0, 1]],
      ["vATID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ValType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValType"),
    :schema_element => [
      ["valueLiteral", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ValueLiteral")], [0, 1]],
      ["suggestedValueLiteral", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SuggestedValueLiteral")], [0, nil]],
      ["valueID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ValueID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => ValuePackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReasonCodeDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeDetailsType"),
    :schema_element => [
      ["veROSiteDetail", ["VeROSiteDetailType[]", XSD::QName.new(NsEBLBaseComponents, "VeROSiteDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["veROReasonCodeID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeID")], [0, 1]],
      ["messageToSeller", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageToSeller")], [0, 1]],
      ["copyEmailToRightsOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CopyEmailToRightsOwner")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportItemsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsType"),
    :schema_element => [
      ["reportItem", ["VeROReportItemType[]", XSD::QName.new(NsEBLBaseComponents, "ReportItem")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportedItemDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportedItemDetailsType"),
    :schema_element => [
      ["reportedItem", ["VeROReportedItemType[]", XSD::QName.new(NsEBLBaseComponents, "ReportedItem")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROReportedItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportedItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["itemStatus", ["VeROItemStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemStatus")], [0, 1]],
      ["itemReasonForFailure", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemReasonForFailure")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VeROSiteDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROSiteDetailType"),
    :schema_element => [
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["reasonCodeDetail", ["ReasonCodeDetailType[]", XSD::QName.new(NsEBLBaseComponents, "ReasonCodeDetail")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => VerifiedUserRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifiedUserRequirementsType"),
    :schema_element => [
      ["verifiedUser", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "VerifiedUser")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => WantItNowPostArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WantItNowPostArrayType"),
    :schema_element => [
      ["wantItNowPost", ["WantItNowPostType[]", XSD::QName.new(NsEBLBaseComponents, "WantItNowPost")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => WantItNowPostType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WantItNowPostType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["responseCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ResponseCount")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => WarrantyDurationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationDetailsType"),
    :schema_element => [
      ["warrantyDurationOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => WarrantyOfferedDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedDetailsType"),
    :schema_element => [
      ["warrantyOfferedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => WarrantyTypeDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeDetailsType"),
    :schema_element => [
      ["warrantyTypeOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => WishListEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WishListEntryType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["product", ["ExpressProductType", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Notes")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["quantityWanted", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityWanted")], [0, 1]],
      ["quantityReceived", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityReceived")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => XSLFileType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "XSLFileType"),
    :schema_element => [
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]],
      ["fileContent", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileContent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProAdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProContactByEmailEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByEmailEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProSellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProSellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => EBayMotorsProStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  EncodedRegistry.register(
    :class => AckCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AckCodeType")
  )

  EncodedRegistry.register(
    :class => BuyerPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerPaymentMethodCodeType")
  )

  EncodedRegistry.register(
    :class => DetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DetailLevelCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeActivityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeActivityCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeCreditEligibilityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeCreditEligibilityCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeExplanationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeExplanationCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeFilterTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeFilterTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeMessageSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeMessageSourceCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeReasonCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeRecordTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeResolutionReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReasonCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeResolutionRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionRecordTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeSortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeSortTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeStateCodeType")
  )

  EncodedRegistry.register(
    :class => DisputeStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeStatusCodeType")
  )

  EncodedRegistry.register(
    :class => ErrorClassificationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorClassificationCodeType")
  )

  EncodedRegistry.register(
    :class => ErrorHandlingCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorHandlingCodeType")
  )

  EncodedRegistry.register(
    :class => InvocationStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InvocationStatusType")
  )

  EncodedRegistry.register(
    :class => MeasurementSystemCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MeasurementSystemCodeType")
  )

  EncodedRegistry.register(
    :class => SeverityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SeverityCodeType")
  )

  EncodedRegistry.register(
    :class => WarningLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarningLevelCodeType")
  )

  EncodedRegistry.register(
    :class => AccessRuleCurrentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccessRuleCurrentStatusCodeType")
  )

  EncodedRegistry.register(
    :class => AccessRuleStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccessRuleStatusCodeType")
  )

  EncodedRegistry.register(
    :class => AccountDetailEntryCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountDetailEntryCodeType")
  )

  EncodedRegistry.register(
    :class => AccountEntrySortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntrySortTypeCodeType")
  )

  EncodedRegistry.register(
    :class => AccountHistorySelectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountHistorySelectionCodeType")
  )

  EncodedRegistry.register(
    :class => AccountStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountStateCodeType")
  )

  EncodedRegistry.register(
    :class => AdFormatEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabledCodeType")
  )

  EncodedRegistry.register(
    :class => AdFormatLeadStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadStatusCodeType")
  )

  EncodedRegistry.register(
    :class => AddressOwnerCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressOwnerCodeType")
  )

  EncodedRegistry.register(
    :class => AddressRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressRecordTypeCodeType")
  )

  EncodedRegistry.register(
    :class => AddressStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressStatusCodeType")
  )

  EncodedRegistry.register(
    :class => AnnouncementMessageCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AnnouncementMessageCodeType")
  )

  EncodedRegistry.register(
    :class => ApplicationDeviceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApplicationDeviceTypeCodeType")
  )

  EncodedRegistry.register(
    :class => AuthTokenTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AuthTokenTypeCodeType")
  )

  EncodedRegistry.register(
    :class => AutomatedLeaveFeedbackEventCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AutomatedLeaveFeedbackEventCodeType")
  )

  EncodedRegistry.register(
    :class => BalanceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BalanceCodeType")
  )

  EncodedRegistry.register(
    :class => BestOfferActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferActionCodeType")
  )

  EncodedRegistry.register(
    :class => BestOfferStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferStatusCodeType")
  )

  EncodedRegistry.register(
    :class => BestOfferTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferTypeCodeType")
  )

  EncodedRegistry.register(
    :class => BidActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidActionCodeType")
  )

  EncodedRegistry.register(
    :class => BidGroupItemStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupItemStatusCodeType")
  )

  EncodedRegistry.register(
    :class => BidGroupStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupStatusCodeType")
  )

  EncodedRegistry.register(
    :class => BidderStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderStatusCodeType")
  )

  EncodedRegistry.register(
    :class => BidderTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderTypeCodeType")
  )

  EncodedRegistry.register(
    :class => BulkCatalogListerStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BulkCatalogListerStatusCodeType")
  )

  EncodedRegistry.register(
    :class => BuyerProtectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionCodeType")
  )

  EncodedRegistry.register(
    :class => BuyerProtectionSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionSourceCodeType")
  )

  EncodedRegistry.register(
    :class => BuyerSatisfactionStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfactionStatusCodeType")
  )

  EncodedRegistry.register(
    :class => CalculatedShippingChargeOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingChargeOptionCodeType")
  )

  EncodedRegistry.register(
    :class => CalculatedShippingRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateOptionCodeType")
  )

  EncodedRegistry.register(
    :class => CategoryFeatureDetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryFeatureDetailLevelCodeType")
  )

  EncodedRegistry.register(
    :class => CategoryListingsOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryListingsOrderCodeType")
  )

  EncodedRegistry.register(
    :class => CategoryListingsSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryListingsSearchCodeType")
  )

  EncodedRegistry.register(
    :class => CharacteristicsSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSearchCodeType")
  )

  EncodedRegistry.register(
    :class => CharityAffiliationTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationTypeCodeType")
  )

  EncodedRegistry.register(
    :class => CharitySellerStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharitySellerStatusCodeType")
  )

  EncodedRegistry.register(
    :class => CharityStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityStatusCodeType")
  )

  EncodedRegistry.register(
    :class => CheckoutMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutMethodCodeType")
  )

  EncodedRegistry.register(
    :class => CheckoutStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutStatusCodeType")
  )

  EncodedRegistry.register(
    :class => ClassifiedAdBestOfferEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabledCodeType")
  )

  EncodedRegistry.register(
    :class => ClassifiedAdPaymentMethodEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabledCodeType")
  )

  EncodedRegistry.register(
    :class => CombinedPaymentOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentOptionCodeType")
  )

  EncodedRegistry.register(
    :class => CombinedPaymentPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPeriodCodeType")
  )

  EncodedRegistry.register(
    :class => CommentTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CommentTypeCodeType")
  )

  EncodedRegistry.register(
    :class => CompleteStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteStatusCodeType")
  )

  EncodedRegistry.register(
    :class => CountryCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CountryCodeType")
  )

  EncodedRegistry.register(
    :class => CurrencyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CurrencyCodeType")
  )

  EncodedRegistry.register(
    :class => DateSpecifierCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DateSpecifierCodeType")
  )

  EncodedRegistry.register(
    :class => DaysCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DaysCodeType")
  )

  EncodedRegistry.register(
    :class => DepositTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DepositTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DescriptionReviseModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionReviseModeCodeType")
  )

  EncodedRegistry.register(
    :class => DescriptionTemplateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplateCodeType")
  )

  EncodedRegistry.register(
    :class => DetailNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DetailNameCodeType")
  )

  EncodedRegistry.register(
    :class => DeviceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeviceTypeCodeType")
  )

  EncodedRegistry.register(
    :class => DiscountCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountCodeType")
  )

  EncodedRegistry.register(
    :class => DiscountNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountNameCodeType")
  )

  EncodedRegistry.register(
    :class => DisplayPayNowButtonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisplayPayNowButtonCodeType")
  )

  EncodedRegistry.register(
    :class => EBaySubscriptionTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EBaySubscriptionTypeCodeType")
  )

  EncodedRegistry.register(
    :class => EnableCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EnableCodeType")
  )

  EncodedRegistry.register(
    :class => EndOfAuctionLogoTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionLogoTypeCodeType")
  )

  EncodedRegistry.register(
    :class => EndReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndReasonCodeType")
  )

  EncodedRegistry.register(
    :class => EscrowCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EscrowCodeType")
  )

  EncodedRegistry.register(
    :class => ExpressSellingPreferenceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreferenceCodeType")
  )

  EncodedRegistry.register(
    :class => ExternalProductCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalProductCodeType")
  )

  EncodedRegistry.register(
    :class => FeatureIDCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeatureIDCodeType")
  )

  EncodedRegistry.register(
    :class => FeedbackRatingDetailCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingDetailCodeType")
  )

  EncodedRegistry.register(
    :class => FeedbackRatingStarCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingStarCodeType")
  )

  EncodedRegistry.register(
    :class => FeedbackResponseCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackResponseCodeType")
  )

  EncodedRegistry.register(
    :class => FeedbackSummaryPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryPeriodCodeType")
  )

  EncodedRegistry.register(
    :class => FlatRateInsuranceRangeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCodeType")
  )

  EncodedRegistry.register(
    :class => FlatShippingRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingRateOptionCodeType")
  )

  EncodedRegistry.register(
    :class => GallerySortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GallerySortFilterCodeType")
  )

  EncodedRegistry.register(
    :class => GalleryTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GalleryTypeCodeType")
  )

  EncodedRegistry.register(
    :class => GeneralPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeneralPaymentMethodCodeType")
  )

  EncodedRegistry.register(
    :class => GeographicExposureCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeographicExposureCodeType")
  )

  EncodedRegistry.register(
    :class => GetAllBiddersModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersModeCodeType")
  )

  EncodedRegistry.register(
    :class => GiftServicesCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GiftServicesCodeType")
  )

  EncodedRegistry.register(
    :class => GranularityLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GranularityLevelCodeType")
  )

  EncodedRegistry.register(
    :class => HandlingNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HandlingNameCodeType")
  )

  EncodedRegistry.register(
    :class => HitCounterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HitCounterCodeType")
  )

  EncodedRegistry.register(
    :class => INEscrowWorkflowTimelineCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimelineCodeType")
  )

  EncodedRegistry.register(
    :class => InsuranceOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceOptionCodeType")
  )

  EncodedRegistry.register(
    :class => InsuranceSelectedCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceSelectedCodeType")
  )

  EncodedRegistry.register(
    :class => InventoryTrackingMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InventoryTrackingMethodCodeType")
  )

  EncodedRegistry.register(
    :class => ItemConditionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemConditionCodeType")
  )

  EncodedRegistry.register(
    :class => ItemFormatSortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemFormatSortFilterCodeType")
  )

  EncodedRegistry.register(
    :class => ItemLocationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemLocationCodeType")
  )

  EncodedRegistry.register(
    :class => ItemSortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSortFilterCodeType")
  )

  EncodedRegistry.register(
    :class => ItemSortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSortTypeCodeType")
  )

  EncodedRegistry.register(
    :class => ItemSpecificSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificSourceCodeType")
  )

  EncodedRegistry.register(
    :class => ItemSpecificsEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabledCodeType")
  )

  EncodedRegistry.register(
    :class => ItemTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTypeCodeType")
  )

  EncodedRegistry.register(
    :class => ItemTypeFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilterCodeType")
  )

  EncodedRegistry.register(
    :class => ListingDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationCodeType")
  )

  EncodedRegistry.register(
    :class => ListingEnhancementDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationCodeType")
  )

  EncodedRegistry.register(
    :class => ListingEnhancementsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementsCodeType")
  )

  EncodedRegistry.register(
    :class => ListingFlowCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingFlowCodeType")
  )

  EncodedRegistry.register(
    :class => ListingStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingStatusCodeType")
  )

  EncodedRegistry.register(
    :class => ListingSubtypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingSubtypeCodeType")
  )

  EncodedRegistry.register(
    :class => ListingTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTypeCodeType")
  )

  EncodedRegistry.register(
    :class => LogoTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LogoTypeCodeType")
  )

  EncodedRegistry.register(
    :class => MailOptionsTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MailOptionsTypeCodeType")
  )

  EncodedRegistry.register(
    :class => MarkUpMarkDownEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEventTypeCodeType")
  )

  EncodedRegistry.register(
    :class => MerchDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MerchDisplayCodeType")
  )

  EncodedRegistry.register(
    :class => MerchandizingPrefCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MerchandizingPrefCodeType")
  )

  EncodedRegistry.register(
    :class => MessageStatusTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MessageStatusTypeCodeType")
  )

  EncodedRegistry.register(
    :class => MessageTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MessageTypeCodeType")
  )

  EncodedRegistry.register(
    :class => ModifyActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ModifyActionCodeType")
  )

  EncodedRegistry.register(
    :class => MyMessagesAlertResolutionStatusCode,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertResolutionStatusCode")
  )

  EncodedRegistry.register(
    :class => MyMessagesFolderOperationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderOperationCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationDeliveryStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDeliveryStatusCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationEventPropertyNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventPropertyNameCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationEventStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventStateCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventTypeCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationPayloadTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationPayloadTypeCodeType")
  )

  EncodedRegistry.register(
    :class => NotificationRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationRoleCodeType")
  )

  EncodedRegistry.register(
    :class => OrderRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderRoleCodeType")
  )

  EncodedRegistry.register(
    :class => OrderStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PaidStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaidStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PayPalAccountLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountLevelCodeType")
  )

  EncodedRegistry.register(
    :class => PayPalAccountStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PayPalAccountTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountTypeCodeType")
  )

  EncodedRegistry.register(
    :class => PaymentHoldStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentHoldStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PaymentMethodSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentMethodSearchCodeType")
  )

  EncodedRegistry.register(
    :class => PaymentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PaymentTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentTypeCodeType")
  )

  EncodedRegistry.register(
    :class => PeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PeriodCodeType")
  )

  EncodedRegistry.register(
    :class => PhotoDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PhotoDisplayCodeType")
  )

  EncodedRegistry.register(
    :class => PictureFormatCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureFormatCodeType")
  )

  EncodedRegistry.register(
    :class => PictureManagerActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerActionCodeType")
  )

  EncodedRegistry.register(
    :class => PictureManagerDetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailLevelCodeType")
  )

  EncodedRegistry.register(
    :class => PictureManagerPictureDisplayTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureDisplayTypeCodeType")
  )

  EncodedRegistry.register(
    :class => PictureManagerSubscriptionLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerSubscriptionLevelCodeType")
  )

  EncodedRegistry.register(
    :class => PictureSetCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSetCodeType")
  )

  EncodedRegistry.register(
    :class => PictureSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSourceCodeType")
  )

  EncodedRegistry.register(
    :class => PictureUploadPolicyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureUploadPolicyCodeType")
  )

  EncodedRegistry.register(
    :class => PolicyComplianceStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PolicyComplianceStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PreferredLocationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PreferredLocationCodeType")
  )

  EncodedRegistry.register(
    :class => ProductSortCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSortCodeType")
  )

  EncodedRegistry.register(
    :class => ProductStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductStateCodeType")
  )

  EncodedRegistry.register(
    :class => ProductUseCaseCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductUseCaseCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionItemPriceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionItemPriceTypeCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionItemSelectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionItemSelectionCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionMethodCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionSchemeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionSchemeCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionalSaleStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleStatusCodeType")
  )

  EncodedRegistry.register(
    :class => PromotionalSaleTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleTypeCodeType")
  )

  EncodedRegistry.register(
    :class => PurchasePurposeTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PurchasePurposeTypeCodeType")
  )

  EncodedRegistry.register(
    :class => QuantityOperatorCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuantityOperatorCodeType")
  )

  EncodedRegistry.register(
    :class => QuestionTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuestionTypeCodeType")
  )

  EncodedRegistry.register(
    :class => RCSPaymentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RCSPaymentStatusCodeType")
  )

  EncodedRegistry.register(
    :class => RangeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RangeCodeType")
  )

  EncodedRegistry.register(
    :class => RecipientRelationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RecipientRelationCodeType")
  )

  EncodedRegistry.register(
    :class => RecommendationEngineCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RecommendationEngineCodeType")
  )

  EncodedRegistry.register(
    :class => RefundOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => RefundReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundReasonCodeType")
  )

  EncodedRegistry.register(
    :class => RefundTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundTypeCodeType")
  )

  EncodedRegistry.register(
    :class => ReturnsAcceptedOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => ReturnsWithinOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => SMSSubscriptionErrorCodeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionErrorCodeCodeType")
  )

  EncodedRegistry.register(
    :class => SMSSubscriptionUserStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionUserStatusCodeType")
  )

  EncodedRegistry.register(
    :class => SearchFlagCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchFlagCodeType")
  )

  EncodedRegistry.register(
    :class => SearchFlagsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchFlagsCodeType")
  )

  EncodedRegistry.register(
    :class => SearchResultValuesCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultValuesCodeType")
  )

  EncodedRegistry.register(
    :class => SearchSortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchSortOrderCodeType")
  )

  EncodedRegistry.register(
    :class => SearchStandingStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStandingStatusCodeType")
  )

  EncodedRegistry.register(
    :class => SearchTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchTypeCodeType")
  )

  EncodedRegistry.register(
    :class => SecondChanceOfferDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SecondChanceOfferDurationCodeType")
  )

  EncodedRegistry.register(
    :class => SelectionModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SelectionModeCodeType")
  )

  EncodedRegistry.register(
    :class => SellerAccountStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerAccountStatusCodeType")
  )

  EncodedRegistry.register(
    :class => SellerBusinessCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerBusinessCodeType")
  )

  EncodedRegistry.register(
    :class => SellerDashboardAlertSeverityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerDashboardAlertSeverityCodeType")
  )

  EncodedRegistry.register(
    :class => SellerGuaranteeLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeLevelCodeType")
  )

  EncodedRegistry.register(
    :class => SellerLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerLevelCodeType")
  )

  EncodedRegistry.register(
    :class => SellerPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentMethodCodeType")
  )

  EncodedRegistry.register(
    :class => SetUserNotesActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesActionCodeType")
  )

  EncodedRegistry.register(
    :class => ShipmentDeliveryStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentDeliveryStatusCodeType")
  )

  EncodedRegistry.register(
    :class => ShipmentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentStatusCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingCarrierCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingCostPaidByOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingFeatureCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingFeatureCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingPackageCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingPackageCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingRateTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingRateTypeCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingRegionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingRegionCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingServiceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCodeType")
  )

  EncodedRegistry.register(
    :class => ShippingTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingTypeCodeType")
  )

  EncodedRegistry.register(
    :class => SimpleItemSortCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SimpleItemSortCodeType")
  )

  EncodedRegistry.register(
    :class => SiteCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteCodeType")
  )

  EncodedRegistry.register(
    :class => SiteIDFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteIDFilterCodeType")
  )

  EncodedRegistry.register(
    :class => SkypeContactOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeContactOptionCodeType")
  )

  EncodedRegistry.register(
    :class => SortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SortOrderCodeType")
  )

  EncodedRegistry.register(
    :class => StatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StatusCodeType")
  )

  EncodedRegistry.register(
    :class => StoreCategoryUpdateActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCategoryUpdateActionCodeType")
  )

  EncodedRegistry.register(
    :class => StoreCustomHeaderLayoutCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomHeaderLayoutCodeType")
  )

  EncodedRegistry.register(
    :class => StoreCustomListingHeaderDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderDisplayCodeType")
  )

  EncodedRegistry.register(
    :class => StoreCustomListingHeaderLinkCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderLinkCodeType")
  )

  EncodedRegistry.register(
    :class => StoreCustomPageStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageStatusCodeType")
  )

  EncodedRegistry.register(
    :class => StoreFontFaceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontFaceCodeType")
  )

  EncodedRegistry.register(
    :class => StoreFontSizeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontSizeCodeType")
  )

  EncodedRegistry.register(
    :class => StoreHeaderStyleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreHeaderStyleCodeType")
  )

  EncodedRegistry.register(
    :class => StoreItemListLayoutCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreItemListLayoutCodeType")
  )

  EncodedRegistry.register(
    :class => StoreItemListSortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreItemListSortOrderCodeType")
  )

  EncodedRegistry.register(
    :class => StoreSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSearchCodeType")
  )

  EncodedRegistry.register(
    :class => StoreSubscriptionLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionLevelCodeType")
  )

  EncodedRegistry.register(
    :class => StringMatchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StringMatchCodeType")
  )

  EncodedRegistry.register(
    :class => SummaryFrequencyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryFrequencyCodeType")
  )

  EncodedRegistry.register(
    :class => SummaryWindowPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryWindowPeriodCodeType")
  )

  EncodedRegistry.register(
    :class => TaskStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaskStatusCodeType")
  )

  EncodedRegistry.register(
    :class => TicketEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TicketEventTypeCodeType")
  )

  EncodedRegistry.register(
    :class => TokenReturnMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenReturnMethodCodeType")
  )

  EncodedRegistry.register(
    :class => TokenStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenStatusCodeType")
  )

  EncodedRegistry.register(
    :class => TradingRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TradingRoleCodeType")
  )

  EncodedRegistry.register(
    :class => TransactionPlatformCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionPlatformCodeType")
  )

  EncodedRegistry.register(
    :class => TransactionPlatformType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionPlatformType")
  )

  EncodedRegistry.register(
    :class => UPSRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UPSRateOptionCodeType")
  )

  EncodedRegistry.register(
    :class => URLTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "URLTypeCodeType")
  )

  EncodedRegistry.register(
    :class => UnitCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitCodeType")
  )

  EncodedRegistry.register(
    :class => UserStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserStatusCodeType")
  )

  EncodedRegistry.register(
    :class => VATStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VATStatusCodeType")
  )

  EncodedRegistry.register(
    :class => VeROItemStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROItemStatusCodeType")
  )

  EncodedRegistry.register(
    :class => VeROReportPacketStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatusCodeType")
  )

  EncodedRegistry.register(
    :class => WarrantyDurationOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => WarrantyOfferedCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedCodeType")
  )

  EncodedRegistry.register(
    :class => WarrantyTypeOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOptionsCodeType")
  )

  EncodedRegistry.register(
    :class => WirelessCarrierIDCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WirelessCarrierIDCodeType")
  )

  LiteralRegistry.register(
    :class => AddDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeExplanation", ["DisputeExplanationCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeExplanation")], [0, 1]],
      ["disputeReason", ["DisputeReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeReason")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["messageText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageText")], [0, 1]],
      ["disputeActivity", ["DisputeActivityCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeActivity")], [0, 1]],
      ["shippingCarrierUsed", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierUsed")], [0, 1]],
      ["shipmentTrackNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackNumber")], [0, 1]],
      ["shippingTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippingTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddLiveAuctionItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddLiveAuctionItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageAAQToPartnerRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageAAQToPartnerResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageRTQRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageRTQResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderRequestContainer", ["AddMemberMessagesAAQToBidderRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderResponseContainer", ["AddMemberMessagesAAQToBidderResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddOrderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddOrderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["order", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddOrderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddOrderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["createdTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddSecondChanceItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddSecondChanceItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToItemDescriptionRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToItemDescriptionResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToWatchListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToWatchListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddTransactionConfirmationItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")]],
      ["verifyEligibilityOnly", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VerifyEligibilityOnly")]],
      ["recipientPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientPostalCode")]],
      ["recipientRelationType", ["RecipientRelationCodeType", XSD::QName.new(NsEBLBaseComponents, "RecipientRelationType")]],
      ["negotiatedPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "NegotiatedPrice")]],
      ["listingDuration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")]],
      ["comments", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Comments")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddTransactionConfirmationItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ApproveLiveAuctionBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidApproval", ["BidApprovalArrayType", XSD::QName.new(NsEBLBaseComponents, "BidApproval")], [0, 1]],
      ["approveAllPending", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApproveAllPending")], [0, 1]],
      ["allApprovedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AllApprovedBiddingLimit")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ApproveLiveAuctionBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderUpdateStatus", ["LiveAuctionApprovalStatusArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderUpdateStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CompleteSaleRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["feedbackInfo", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackInfo")], [0, 1]],
      ["shipped", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Shipped")], [0, 1]],
      ["paid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Paid")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["shipment", ["ShipmentType", XSD::QName.new(NsEBLBaseComponents, "Shipment")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CompleteSaleResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ConfirmIdentityRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ConfirmIdentityResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DeleteMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DeleteMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EndItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["endingReason", ["EndReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "EndingReason")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => EndItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FetchTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FetchTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["secretID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SecretID")], [0, 1]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]],
      ["includeRESTToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeRESTToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FetchTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FetchTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]],
      ["rESTToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RESTToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAccountRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAccountRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountHistorySelection", ["AccountHistorySelectionCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountHistorySelection")], [0, 1]],
      ["invoiceDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "InvoiceDate")], [0, 1]],
      ["beginDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "BeginDate")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndDate")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["excludeBalance", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeBalance")], [0, 1]],
      ["excludeSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeSummary")], [0, 1]],
      ["accountEntrySortType", ["AccountEntrySortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountEntrySortType")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAccountResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAccountResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AccountID")], [0, 1]],
      ["accountSummary", ["AccountSummaryType", XSD::QName.new(NsEBLBaseComponents, "AccountSummary")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["accountEntries", ["AccountEntriesType", XSD::QName.new(NsEBLBaseComponents, "AccountEntries")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreEntries", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreEntries")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAdFormatLeadsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["status", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["includeMemberMessages", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeMemberMessages")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAdFormatLeadsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["adFormatLead", ["AdFormatLeadType[]", XSD::QName.new(NsEBLBaseComponents, "AdFormatLead")], [0, nil]],
      ["adFormatLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAllBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["callMode", ["GetAllBiddersModeCodeType", XSD::QName.new(NsEBLBaseComponents, "CallMode")], [0, 1]],
      ["includeBiddingSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBiddingSummary")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAllBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["highBidder", [nil, XSD::QName.new(NsEBLBaseComponents, "HighBidder")], [0, 1]],
      ["highestBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighestBid")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetApiAccessRulesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetApiAccessRulesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["apiAccessRule", ["ApiAccessRuleType[]", XSD::QName.new(NsEBLBaseComponents, "ApiAccessRule")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesCSRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, nil]],
      ["includeCategoryMappingDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCategoryMappingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesCSResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesXSLRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesXSLResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBestOffersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["bestOfferStatus", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBestOffersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bestOfferArray", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferArray")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBidderListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBidderListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["activeItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ActiveItemsOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBidderListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetBidderListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidder", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Bidder")], [0, 1]],
      ["bidItemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidItemArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categorySiteID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategorySiteID")], [0, 1]],
      ["categoryParent", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParent")], [0, nil]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["reservePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReservePriceAllowed")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["reduceReserveAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReduceReserveAllowed")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategory2CSRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategory2CSResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["mappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "MappedCategoryArray")], [0, 1]],
      ["unmappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "UnmappedCategoryArray")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["siteWideCharacteristicSets", ["SiteWideCharacteristicsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteWideCharacteristicSets")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryFeaturesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]],
      ["featureID", ["FeatureIDCodeType[]", XSD::QName.new(NsEBLBaseComponents, "FeatureID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryFeaturesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["category", ["CategoryFeatureType[]", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, nil]],
      ["siteDefaults", ["SiteDefaultsType", XSD::QName.new(NsEBLBaseComponents, "SiteDefaults")], [0, 1]],
      ["featureDefinitions", ["FeatureDefinitionsType", XSD::QName.new(NsEBLBaseComponents, "FeatureDefinitions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryListingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["CategoryListingsSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["orderBy", ["CategoryListingsOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderBy")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchLocation", ["SearchLocationType", XSD::QName.new(NsEBLBaseComponents, "SearchLocation")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryListingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["subCategories", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SubCategories")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryMappingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryMappingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryMapping", ["CategoryMappingType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryMapping")], [0, nil]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategorySpecificsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["maxNames", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxNames")], [0, 1]],
      ["maxValuesPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxValuesPerName")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategorySpecificsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryItemSpecifics", ["CategoryItemSpecificsType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryItemSpecifics")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetChallengeTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetChallengeTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["imageChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ImageChallengeURL")], [0, 1]],
      ["audioChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AudioChallengeURL")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCharitiesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["charityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityName")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["charityRegion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityRegion")], [0, 1]],
      ["charityDomain", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityDomain")], [0, 1]],
      ["includeDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeDescription")], [0, 1]],
      ["matchType", ["StringMatchCodeType", XSD::QName.new(NsEBLBaseComponents, "MatchType")], [0, 1]],
      ["featured", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Featured")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCharitiesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charity", ["CharityInfoType[]", XSD::QName.new(NsEBLBaseComponents, "Charity")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetClientAlertsAuthTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetClientAlertsAuthTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["clientAlertsAuthToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ClientAlertsAuthToken")], [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetContextualKeywordsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["encoding", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Encoding")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetContextualKeywordsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["contextSearchAsset", ["ContextSearchAssetType[]", XSD::QName.new(NsEBLBaseComponents, "ContextSearchAsset")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCrossPromotionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["promotionViewMode", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionViewMode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCrossPromotionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["crossPromotion", ["CrossPromotionsType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDescriptionTemplatesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["lastModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedTime")], [0, 1]],
      ["motorVehicles", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorVehicles")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDescriptionTemplatesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["descriptionTemplate", ["DescriptionTemplateType[]", XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplate")], [0, nil]],
      ["layoutTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LayoutTotal")], [0, 1]],
      ["obsoleteLayoutID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteLayoutID")], [0, nil]],
      ["obsoleteThemeID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteThemeID")], [0, nil]],
      ["themeGroup", ["ThemeGroupType[]", XSD::QName.new(NsEBLBaseComponents, "ThemeGroup")], [0, nil]],
      ["themeTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeTotal")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dispute", ["DisputeType", XSD::QName.new(NsEBLBaseComponents, "Dispute")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["commentType", ["CommentTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackDetailArray", ["FeedbackDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailArray")], [0, 1]],
      ["feedbackDetailItemTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailItemTotal")], [0, 1]],
      ["feedbackSummary", ["FeedbackSummaryType", XSD::QName.new(NsEBLBaseComponents, "FeedbackSummary")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetHighBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetHighBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["includeCrossPromotion", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCrossPromotion")], [0, 1]],
      ["includeItemSpecifics", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemSpecifics")], [0, 1]],
      ["includeTaxTable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeTaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRecommendationsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsRequestContainer", ["GetRecommendationsRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsRequestContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRecommendationsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsResponseContainer", ["GetRecommendationsResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsResponseContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemShippingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["quantitySold", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantitySold")], [0, 1]],
      ["destinationPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DestinationPostalCode")], [0, 1]],
      ["destinationCountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "DestinationCountryCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemShippingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemsAwaitingFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sort", ["ItemSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemsAwaitingFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemsAwaitingFeedback", ["PaginatedTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemsAwaitingFeedback")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionBiddersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidderStatus", ["BidderStatusCodeType[]", XSD::QName.new(NsEBLBaseComponents, "BidderStatus")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionBiddersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderDetails", ["BidderDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderDetails")], [0, 1]],
      ["totalPending", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalPending")], [0, 1]],
      ["totalApproved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalApproved")], [0, 1]],
      ["totalDenied", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalDenied")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionCatalogDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionCatalogDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["liveAuctionCatalog", ["LiveAuctionCatalogType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionCatalog")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMemberMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["mailMessageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MailMessageType")], [0, 1]],
      ["messageStatus", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageStatus")], [0, 1]],
      ["displayToPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayToPublic")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["memberMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MemberMessageID")], [0, 1]],
      ["senderID", [nil, XSD::QName.new(NsEBLBaseComponents, "SenderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMemberMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["memberMessage", ["MemberMessageExchangeArrayType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMessagePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["includeASQPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMessagePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["externalMessageIDs", ["MyMessagesExternalMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageIDs")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["summary", ["MyMessagesSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["alerts", ["MyMessagesAlertArrayType", XSD::QName.new(NsEBLBaseComponents, "Alerts")], [0, 1]],
      ["messages", ["MyMessagesMessageArrayType", XSD::QName.new(NsEBLBaseComponents, "Messages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayBuyingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, 1]],
      ["bidAssistantList", ["BidAssistantListType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayBuyingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingSummary", ["BuyingSummaryType", XSD::QName.new(NsEBLBaseComponents, "BuyingSummary")], [0, 1]],
      ["watchList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBayFavoriteSearchListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBayFavoriteSellerListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, nil]],
      ["bidAssistantList", ["BidGroupArrayType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayRemindersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayRemindersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBaySellingRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["scheduledList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBaySellingResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingSummary", ["SellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "SellingSummary")], [0, 1]],
      ["scheduledList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["summary", ["MyeBaySellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["preferenceLevel", ["NotificationRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PreferenceLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationsUsageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationsUsageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["notificationDetailsArray", ["NotificationDetailsArrayType", XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsArray")], [0, 1]],
      ["markUpMarkDownHistory", ["MarkUpMarkDownHistoryType", XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownHistory")], [0, 1]],
      ["notificationStatistics", ["NotificationStatisticsType", XSD::QName.new(NsEBLBaseComponents, "NotificationStatistics")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrderTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemTransactionIDArray", ["ItemTransactionIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDArray")], [0, 1]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["includeFinalValueFees", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFees")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrderTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrdersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["createTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeFrom")], [0, 1]],
      ["createTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeTo")], [0, 1]],
      ["orderRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderRole")], [0, 1]],
      ["orderStatus", ["OrderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderStatus")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetOrdersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreOrders")], [0, 1]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]],
      ["ordersPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "OrdersPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedOrderCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedOrderCountActual")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["folderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["pictureManagerDetailLevel", ["PictureManagerDetailLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["subscription", ["PictureManagerSubscriptionType[]", XSD::QName.new(NsEBLBaseComponents, "Subscription")], [0, nil]],
      ["pictureType", ["PictureManagerPictureDisplayType[]", XSD::QName.new(NsEBLBaseComponents, "PictureType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPopularKeywordsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["includeChildCategories", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeChildCategories")], [0, 1]],
      ["maxKeywordsRetrieved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxKeywordsRetrieved")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPopularKeywordsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFamilyMembersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFamilyMembersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductFinderData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderXSLRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderXSLResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productSearchPage", ["ProductSearchPageType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchPage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSellingPagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["useCase", ["ProductUseCaseCodeType", XSD::QName.new(NsEBLBaseComponents, "UseCase")], [0, 1]],
      ["product", ["ProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSellingPagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSellingPagesData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductSellingPagesData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, 1]],
      ["productSort", ["ProductSortCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductSort")], [0, 1]],
      ["includeItemArray", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemArray")], [0, 1]],
      ["includeReviewDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReviewDetails")], [0, 1]],
      ["includeBuyingGuideDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBuyingGuideDetails")], [0, 1]],
      ["includeHistogram", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeHistogram")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetProductsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["characteristicsSetProductHistogram", ["CharacteristicsSetProductHistogramType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetProductHistogram")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["approximatePages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ApproximatePages")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]],
      ["totalProducts", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalProducts")], [0, 1]],
      ["product", ["CatalogProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionRulesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionRulesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionRuleArray", ["PromotionRuleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionRuleArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionalSaleDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionalSaleDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleDetails", ["PromotionalSaleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["searchFlags", ["SearchFlagsCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchFlags")], [0, nil]],
      ["priceRangeFilter", ["PriceRangeFilterType", XSD::QName.new(NsEBLBaseComponents, "PriceRangeFilter")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["SearchTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["userIdFilter", ["UserIdFilterType", XSD::QName.new(NsEBLBaseComponents, "UserIdFilter")], [0, 1]],
      ["searchLocationFilter", ["SearchLocationFilterType", XSD::QName.new(NsEBLBaseComponents, "SearchLocationFilter")], [0, 1]],
      ["storeSearchFilter", ["SearchStoreFilterType", XSD::QName.new(NsEBLBaseComponents, "StoreSearchFilter")], [0, 1]],
      ["order", ["SearchSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchRequest", ["SearchRequestType", XSD::QName.new(NsEBLBaseComponents, "SearchRequest")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["categories", ["RequestCategoriesType", XSD::QName.new(NsEBLBaseComponents, "Categories")], [0, 1]],
      ["totalOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TotalOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["expandSearch", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpandSearch")], [0, 1]],
      ["lot", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Lot")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["quantityOperator", ["QuantityOperatorCodeType", XSD::QName.new(NsEBLBaseComponents, "QuantityOperator")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["charityID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["bidRange", ["BidRangeType", XSD::QName.new(NsEBLBaseComponents, "BidRange")], [0, 1]],
      ["itemCondition", ["ItemConditionCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemCondition")], [0, 1]],
      ["ticketFinder", ["TicketDetailsType", XSD::QName.new(NsEBLBaseComponents, "TicketFinder")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchResultItemArray", ["SearchResultItemArrayType", XSD::QName.new(NsEBLBaseComponents, "SearchResultItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["storeExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreExpansionArray")], [0, 1]],
      ["internationalExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "InternationalExpansionArray")], [0, 1]],
      ["filterRemovedExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "FilterRemovedExpansionArray")], [0, 1]],
      ["allCategoriesExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "AllCategoriesExpansionArray")], [0, 1]],
      ["spellingSuggestion", ["SpellingSuggestionType", XSD::QName.new(NsEBLBaseComponents, "SpellingSuggestion")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerDashboardRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerDashboardResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchStanding", ["SearchStandingDashboardType", XSD::QName.new(NsEBLBaseComponents, "SearchStanding")], [0, 1]],
      ["sellerFeeDiscount", ["SellerFeeDiscountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerFeeDiscount")], [0, 1]],
      ["powerSellerStatus", ["PowerSellerDashboardType", XSD::QName.new(NsEBLBaseComponents, "PowerSellerStatus")], [0, 1]],
      ["policyCompliance", ["PolicyComplianceDashboardType", XSD::QName.new(NsEBLBaseComponents, "PolicyCompliance")], [0, 1]],
      ["buyerSatisfaction", ["BuyerSatisfactionDashboardType", XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfaction")], [0, 1]],
      ["sellerAccount", ["SellerAccountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerAccount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerEventsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["newItemFilter", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NewItemFilter")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerEventsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["motorsDealerUsers", ["UserIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MotorsDealerUsers")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["sort", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["adminEndedItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdminEndedItemsOnly")], [0, 1]],
      ["categoryID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedItemCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedItemCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerPaymentsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["paymentTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeFrom")], [0, 1]],
      ["paymentTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerPaymentsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMorePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMorePayments")], [0, 1]],
      ["sellerPayment", ["SellerPaymentType[]", XSD::QName.new(NsEBLBaseComponents, "SellerPayment")], [0, nil]],
      ["paymentsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedPaymentCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedPaymentCountActual")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerTransactionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerTransactionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSessionIDRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["ruName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RuName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSessionIDResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShippingDiscountProfilesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShippingDiscountProfilesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryStructureOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryStructureOnly")], [0, 1]],
      ["rootCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "RootCategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCategoryUpdateStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCategoryUpdateStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCustomPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pageID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PageID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCustomPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPageArray", ["StoreCustomPageArrayType", XSD::QName.new(NsEBLBaseComponents, "CustomPageArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["basicThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "BasicThemeArray")], [0, 1]],
      ["advancedThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "AdvancedThemeArray")], [0, 1]],
      ["logoArray", ["StoreLogoArrayType", XSD::QName.new(NsEBLBaseComponents, "LogoArray")], [0, 1]],
      ["subscriptionArray", ["StoreSubscriptionArrayType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionArray")], [0, 1]],
      ["maxCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategories")], [0, 1]],
      ["maxCategoryLevels", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategoryLevels")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStorePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStorePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSuggestedCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSuggestedCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["suggestedCategoryArray", ["SuggestedCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTaxTableRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTaxTableResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTokenStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTokenStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["tokenStatus", ["TokenStatusType", XSD::QName.new(NsEBLBaseComponents, "TokenStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["user", ["UserType", XSD::QName.new(NsEBLBaseComponents, "User")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserContactDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["contactID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContactID")], [0, 1]],
      ["requesterID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RequesterID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserContactDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["contactAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ContactAddress")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserDisputesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeFilterType", ["DisputeFilterTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterType")], [0, 1]],
      ["disputeSortType", ["DisputeSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeSortType")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserDisputesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "StartingDisputeID")], [0, 1]],
      ["endingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "EndingDisputeID")], [0, 1]],
      ["disputeArray", ["DisputeArrayType", XSD::QName.new(NsEBLBaseComponents, "DisputeArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["disputeFilterCount", ["DisputeFilterCountType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterCount")], [0, nil]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["showBidderNoticePreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowBidderNoticePreferences")]],
      ["showCombinedPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCombinedPaymentPreferences")]],
      ["showCrossPromotionPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCrossPromotionPreferences")]],
      ["showSellerPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerPaymentPreferences")]],
      ["showEndOfAuctionEmailPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEndOfAuctionEmailPreferences")], [0, 1]],
      ["showSellerFavoriteItemPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerFavoriteItemPreferences")], [0, 1]],
      ["showProStoresPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowProStoresPreferences")], [0, 1]],
      ["showEmailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]],
      ["proStoresPreference", ["ProStoresCheckoutPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ProStoresPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReasonCodeDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["reasonCodeID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReasonCodeID")], [0, 1]],
      ["returnAllSites", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnAllSites")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReasonCodeDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReasonCodeDetails", ["VeROReasonCodeDetailsType", XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReportStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeReportedItemDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReportedItemDetails")], [0, 1]],
      ["timeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeFrom")], [0, 1]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReportStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]],
      ["reportedItemDetails", ["VeROReportedItemDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReportedItemDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowPostRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowPostResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPost", ["WantItNowPostType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowSearchResultsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["searchInDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchInDescription")], [0, 1]],
      ["searchWorldwide", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchWorldwide")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowSearchResultsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPostArray", ["WantItNowPostArrayType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPostArray")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["detailName", ["DetailNameCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["countryDetails", ["CountryDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CountryDetails")], [0, nil]],
      ["currencyDetails", ["CurrencyDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CurrencyDetails")], [0, nil]],
      ["dispatchTimeMaxDetails", ["DispatchTimeMaxDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMaxDetails")], [0, nil]],
      ["paymentOptionDetails", ["PaymentOptionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentOptionDetails")], [0, nil]],
      ["regionDetails", ["RegionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionDetails")], [0, nil]],
      ["shippingLocationDetails", ["ShippingLocationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingLocationDetails")], [0, nil]],
      ["shippingServiceDetails", ["ShippingServiceDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceDetails")], [0, nil]],
      ["siteDetails", ["SiteDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteDetails")], [0, nil]],
      ["taxJurisdiction", ["TaxJurisdictionType[]", XSD::QName.new(NsEBLBaseComponents, "TaxJurisdiction")], [0, nil]],
      ["uRLDetails", ["URLDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "URLDetails")], [0, nil]],
      ["timeZoneDetails", ["TimeZoneDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "TimeZoneDetails")], [0, nil]],
      ["itemSpecificDetails", ["ItemSpecificDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificDetails")], [0, nil]],
      ["unitOfMeasurementDetails", ["UnitOfMeasurementDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementDetails")], [0, nil]],
      ["regionOfOriginDetails", ["RegionOfOriginDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionOfOriginDetails")], [0, nil]],
      ["shippingPackageDetails", ["ShippingPackageDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingPackageDetails")], [0, nil]],
      ["shippingCarrierDetails", ["ShippingCarrierDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierDetails")], [0, nil]],
      ["returnPolicyDetails", ["ReturnPolicyDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayOfficialTimeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayOfficialTimeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => IssueRefundRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "IssueRefundRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["refundReason", ["RefundReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundReason")], [0, 1]],
      ["refundType", ["RefundTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundType")], [0, 1]],
      ["refundAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundAmount")], [0, 1]],
      ["refundMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RefundMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => IssueRefundResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "IssueRefundResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["refundFromSeller", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundFromSeller")], [0, 1]],
      ["totalRefundToBuyer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalRefundToBuyer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LeaveFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUser", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUser")], [0, 1]],
      ["sellerItemRatingDetailArray", ["ItemRatingDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "SellerItemRatingDetailArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LeaveFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => PlaceOfferRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["offer", ["OfferType", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["blockOnWarning", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BlockOnWarning")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => PlaceOfferResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingStatus", ["SellingStatusType", XSD::QName.new(NsEBLBaseComponents, "SellingStatus")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["bestOffer", ["BestOfferType", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RelistItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelistItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => RelistItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelistItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RemoveFromWatchListRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]],
      ["removeAllItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RemoveAllItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RemoveFromWatchListResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToBestOfferRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", ["[]", XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, nil]],
      ["action", ["BestOfferActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["sellerResponse", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerResponse")], [0, 1]],
      ["counterOfferPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CounterOfferPrice")], [0, 1]],
      ["counterOfferQuantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CounterOfferQuantity")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToBestOfferResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["respondToBestOffer", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "RespondToBestOffer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToFeedbackRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUserID")], [0, 1]],
      ["responseType", ["FeedbackResponseCodeType", XSD::QName.new(NsEBLBaseComponents, "ResponseType")], [0, 1]],
      ["responseText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ResponseText")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToFeedbackResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToWantItNowPostRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToWantItNowPostResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseCheckoutStatusRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["paymentMethodUsed", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethodUsed")], [0, 1]],
      ["checkoutStatus", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["checkoutMethod", ["CheckoutMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutMethod")], [0, 1]],
      ["insuranceType", ["InsuranceSelectedCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceType")], [0, 1]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["buyerID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerID")], [0, 1]],
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["salesTax", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["shippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingCost")], [0, 1]],
      ["encryptedID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EncryptedID")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, 1]],
      ["multipleSellerPaymentID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MultipleSellerPaymentID")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseCheckoutStatusResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseLiveAuctionItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseLiveAuctionItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["flagged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Flagged")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesFoldersRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["operation", ["MyMessagesFolderOperationCodeType", XSD::QName.new(NsEBLBaseComponents, "Operation")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong[]", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, nil]],
      ["folderName", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesFoldersResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RevokeTokenRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["unsubscribeNotification", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UnsubscribeNotification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RevokeTokenResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerReverseDisputeRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["disputeResolutionReason", ["DisputeResolutionReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReason")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerReverseDisputeResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SendInvoiceRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["internationalShippingServiceOptions", ["InternationalShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOptions")], [0, nil]],
      ["shippingServiceOptions", ["ShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptions")], [0, nil]],
      ["salesTax", ["SalesTaxType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["checkoutInstructions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CheckoutInstructions")], [0, 1]],
      ["emailCopyToSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCopyToSeller")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SendInvoiceResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetMessagePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetMessagePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetNotificationPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetNotificationPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPictureManagerDetailsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]],
      ["action", ["PictureManagerActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPictureManagerDetailsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleDetails", ["PromotionalSaleType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleListingsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleItemIDArray")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["categoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["allFixedPriceItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllFixedPriceItems")], [0, 1]],
      ["allStoreInventoryItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllStoreInventoryItems")], [0, 1]],
      ["allAuctionItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllAuctionItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleListingsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetSellingManagerFeedbackOptionsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["automatedLeaveFeedbackEvent", ["AutomatedLeaveFeedbackEventCodeType", XSD::QName.new(NsEBLBaseComponents, "AutomatedLeaveFeedbackEvent")], [0, 1]],
      ["storedComments", ["FeedbackCommentArrayType", XSD::QName.new(NsEBLBaseComponents, "StoredComments")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetSellingManagerFeedbackOptionsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetShippingDiscountProfilesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]],
      ["modifyActionCode", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "ModifyActionCode")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetShippingDiscountProfilesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCategoriesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["StoreCategoryUpdateActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["itemDestinationCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ItemDestinationCategoryID")], [0, 1]],
      ["destinationParentCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DestinationParentCategoryID")], [0, 1]],
      ["storeCategories", ["StoreCustomCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreCategories")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCategoriesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCustomPageRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCustomPageResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStorePreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStorePreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetTaxTableRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetTaxTableResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserNotesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["action", ["SetUserNotesActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["noteText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NoteText")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserNotesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserPreferencesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserPreferencesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UploadSiteHostedPicturesRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureName")], [0, 1]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["pictureSet", ["PictureSetCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSet")], [0, 1]],
      ["pictureData", ["Base64BinaryType", XSD::QName.new(NsEBLBaseComponents, "PictureData")], [0, 1]],
      ["pictureUploadPolicy", ["PictureUploadPolicyCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureUploadPolicy")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => UploadSiteHostedPicturesResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["siteHostedPictureDetails", ["SiteHostedPictureDetailsType", XSD::QName.new(NsEBLBaseComponents, "SiteHostedPictureDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateChallengeInputRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["userInput", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserInput")], [0, 1]],
      ["keepTokenValid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "KeepTokenValid")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateChallengeInputResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["validToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValidToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateTestUserRegistrationRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]],
      ["subscribeSA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSA")], [0, 1]],
      ["subscribeSAPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSAPro")], [0, 1]],
      ["subscribeSM", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSM")], [0, 1]],
      ["subscribeSMPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSMPro")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateTestUserRegistrationResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemsRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["rightsOwnerID", [nil, XSD::QName.new(NsEBLBaseComponents, "RightsOwnerID")], [0, 1]],
      ["reportItems", ["VeROReportItemsType", XSD::QName.new(NsEBLBaseComponents, "ReportItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemsResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["expressListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressListing")], [0, 1]],
      ["expressItemRequirements", ["ExpressItemRequirementsType", XSD::QName.new(NsEBLBaseComponents, "ExpressItemRequirements")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddSecondChanceItemRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemRequestType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractRequestType"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddSecondChanceItemResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemResponseType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => BotBlockRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BotBlockRequestType"),
    :schema_element => [
      ["botBlockToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockToken")], [0, 1]],
      ["botBlockUserInput", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockUserInput")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BotBlockResponseType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BotBlockResponseType"),
    :schema_element => [
      ["botBlockToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockToken")], [0, 1]],
      ["botBlockUrl", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockUrl")], [0, 1]],
      ["botBlockAudioUrl", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BotBlockAudioUrl")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CustomSecurityHeaderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CustomSecurityHeaderType"),
    :schema_element => [
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["credentials", ["UserIdPasswordType", XSD::QName.new(NsEBLBaseComponents, "Credentials")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DisputeFilterCountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeFilterCountType"),
    :schema_element => [
      ["disputeFilterType", ["DisputeFilterTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterType")], [0, 1]],
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DisputeMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeMessageType"),
    :schema_element => [
      ["messageID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["messageSource", ["DisputeMessageSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageSource")], [0, 1]],
      ["messageCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "MessageCreationTime")], [0, 1]],
      ["messageText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DisputeResolutionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionType"),
    :schema_element => [
      ["disputeResolutionRecordType", ["DisputeResolutionRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionRecordType")], [0, 1]],
      ["disputeResolutionReason", ["DisputeResolutionReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReason")], [0, 1]],
      ["resolutionTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ResolutionTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DuplicateInvocationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetailsType"),
    :schema_element => [
      ["duplicateInvocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationID")], [0, 1]],
      ["status", ["InvocationStatusType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["invocationTrackingID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InvocationTrackingID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ErrorParameterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorParameterType"),
    :schema_element => [
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "ParamID") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => ErrorType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorType"),
    :schema_element => [
      ["shortMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShortMessage")], [0, 1]],
      ["longMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LongMessage")], [0, 1]],
      ["errorCode", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["userDisplayHint", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserDisplayHint")], [0, 1]],
      ["severityCode", ["SeverityCodeType", XSD::QName.new(NsEBLBaseComponents, "SeverityCode")], [0, 1]],
      ["errorParameters", ["ErrorParameterType[]", XSD::QName.new(NsEBLBaseComponents, "ErrorParameters")], [0, nil]],
      ["errorClassification", ["ErrorClassificationCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorClassification")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FaultDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FaultDetailsType"),
    :schema_element => [
      ["errorCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["severity", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Severity")], [0, 1]],
      ["detailedMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DetailedMessage")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MeasureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MeasureType"),
    :schema_attribute => {
      XSD::QName.new(nil, "unit") => "SOAP::SOAPToken",
      XSD::QName.new(nil, "measurementSystem") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => PaginationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginationType"),
    :schema_element => [
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => QuantityType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuantityType"),
    :schema_attribute => {
      XSD::QName.new(nil, "unit") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => UserIdPasswordType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIdPasswordType"),
    :schema_element => [
      ["appId", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AppId")], [0, 1]],
      ["devId", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DevId")], [0, 1]],
      ["authCert", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AuthCert")], [0, 1]],
      ["username", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Username")], [0, 1]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Password")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => XMLRequesterCredentialsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "XMLRequesterCredentialsType"),
    :schema_element => [
      ["username", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Username")], [0, 1]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Password")], [0, 1]],
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ASQPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ASQPreferencesType"),
    :schema_element => [
      ["resetDefaultSubjects", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResetDefaultSubjects")], [0, 1]],
      ["subject", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AccountEntriesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntriesType"),
    :schema_element => [
      ["accountEntry", ["AccountEntryType[]", XSD::QName.new(NsEBLBaseComponents, "AccountEntry")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AccountEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntryType"),
    :schema_element => [
      ["accountDetailsEntryType", ["AccountDetailEntryCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountDetailsEntryType")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["balance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Balance")], [0, 1]],
      ["date", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Date")], [0, 1]],
      ["grossDetailAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "GrossDetailAmount")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Memo")], [0, 1]],
      ["netDetailAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "NetDetailAmount")], [0, 1]],
      ["refNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RefNumber")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AccountSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountSummaryType"),
    :schema_element => [
      ["accountState", ["AccountStateCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountState")], [0, 1]],
      ["invoicePayment", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoicePayment")], [0, 1]],
      ["invoiceCredit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceCredit")], [0, 1]],
      ["invoiceNewFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceNewFee")], [0, 1]],
      ["additionalAccount", ["AdditionalAccountType[]", XSD::QName.new(NsEBLBaseComponents, "AdditionalAccount")], [0, nil]],
      ["amountPastDue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPastDue")], [0, 1]],
      ["bankAccountInfo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BankAccountInfo")], [0, 1]],
      ["bankModifyDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "BankModifyDate")], [0, 1]],
      ["billingCycleDate", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BillingCycleDate")], [0, 1]],
      ["creditCardExpiration", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreditCardExpiration")], [0, 1]],
      ["creditCardInfo", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CreditCardInfo")], [0, 1]],
      ["creditCardModifyDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreditCardModifyDate")], [0, 1]],
      ["currentBalance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CurrentBalance")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["invoiceBalance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InvoiceBalance")], [0, 1]],
      ["invoiceDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "InvoiceDate")], [0, 1]],
      ["lastAmountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LastAmountPaid")], [0, 1]],
      ["lastPaymentDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastPaymentDate")], [0, 1]],
      ["pastDue", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PastDue")], [0, 1]],
      ["paymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AdFormatLeadType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadType"),
    :schema_element => [
      ["additionalInformation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AdditionalInformation")], [0, 1]],
      ["address", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "Address")], [0, 1]],
      ["bestTimeToCall", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BestTimeToCall")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["submittedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "SubmittedTime")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["itemTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemTitle")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["memberMessage", ["MemberMessageExchangeArrayType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]],
      ["status", ["AdFormatLeadStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["leadFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LeadFee")], [0, 1]],
      ["externalEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalEmail")], [0, 1]],
      ["purchaseTimeFrame", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PurchaseTimeFrame")], [0, 1]],
      ["tradeInYear", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInYear")], [0, 1]],
      ["tradeInMake", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInMake")], [0, 1]],
      ["tradeInModel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeInModel")], [0, 1]],
      ["financingAnswer", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FinancingAnswer")], [0, 1]],
      ["answer1", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Answer1")], [0, 1]],
      ["answer2", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Answer2")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderRequestContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestContainerType"),
    :schema_element => [
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["itemID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderResponseContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseContainerType"),
    :schema_element => [
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AdditionalAccountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdditionalAccountType"),
    :schema_element => [
      ["balance", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Balance")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["accountCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AccountCode")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddressType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["street", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street")], [0, 1]],
      ["street1", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street1")], [0, 1]],
      ["street2", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Street2")], [0, 1]],
      ["cityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CityName")], [0, 1]],
      ["county", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "County")], [0, 1]],
      ["stateOrProvince", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StateOrProvince")], [0, 1]],
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["countryName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CountryName")], [0, 1]],
      ["phone", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone")], [0, 1]],
      ["phoneCountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "PhoneCountryCode")], [0, 1]],
      ["phoneCountryPrefix", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneCountryPrefix")], [0, 1]],
      ["phoneAreaOrCityCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneAreaOrCityCode")], [0, 1]],
      ["phoneLocalNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PhoneLocalNumber")], [0, 1]],
      ["phone2CountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Phone2CountryCode")], [0, 1]],
      ["phone2CountryPrefix", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2CountryPrefix")], [0, 1]],
      ["phone2AreaOrCityCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2AreaOrCityCode")], [0, 1]],
      ["phone2LocalNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2LocalNumber")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["addressID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AddressID")], [0, 1]],
      ["addressOwner", ["AddressOwnerCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressOwner")], [0, 1]],
      ["addressStatus", ["AddressStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressStatus")], [0, 1]],
      ["externalAddressID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalAddressID")], [0, 1]],
      ["internationalName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalName")], [0, 1]],
      ["internationalStateAndCity", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalStateAndCity")], [0, 1]],
      ["internationalStreet", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalStreet")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CompanyName")], [0, 1]],
      ["addressRecordType", ["AddressRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AddressRecordType")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FirstName")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LastName")], [0, 1]],
      ["phone2", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Phone2")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AffiliateTrackingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetailsType"),
    :schema_element => [
      ["trackingID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TrackingID")], [0, 1]],
      ["trackingPartnerCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TrackingPartnerCode")], [0, 1]],
      ["applicationDeviceType", ["ApplicationDeviceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeviceType")], [0, 1]],
      ["affiliateUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AffiliateUserID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AmountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AmountType"),
    :schema_attribute => {
      XSD::QName.new(nil, "currencyID") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => AnnouncementMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AnnouncementMessageType"),
    :schema_element => [
      ["announcementStartTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "AnnouncementStartTime")], [0, 1]],
      ["eventTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EventTime")], [0, 1]],
      ["messageType", ["AnnouncementMessageCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ApiAccessRuleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApiAccessRuleType"),
    :schema_element => [
      ["callName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CallName")], [0, 1]],
      ["countsTowardAggregate", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CountsTowardAggregate")], [0, 1]],
      ["dailyHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailyHardLimit")], [0, 1]],
      ["dailySoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailySoftLimit")], [0, 1]],
      ["dailyUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DailyUsage")], [0, 1]],
      ["hourlyHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlyHardLimit")], [0, 1]],
      ["hourlySoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlySoftLimit")], [0, 1]],
      ["hourlyUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HourlyUsage")], [0, 1]],
      ["period", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["periodicHardLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicHardLimit")], [0, 1]],
      ["periodicSoftLimit", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicSoftLimit")], [0, 1]],
      ["periodicUsage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PeriodicUsage")], [0, 1]],
      ["periodicStartDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PeriodicStartDate")], [0, 1]],
      ["modTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTime")], [0, 1]],
      ["ruleCurrentStatus", ["AccessRuleCurrentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "RuleCurrentStatus")], [0, 1]],
      ["ruleStatus", ["AccessRuleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "RuleStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ApplicationDeliveryPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferencesType"),
    :schema_element => [
      ["applicationURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ApplicationURL")], [0, 1]],
      ["applicationEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "ApplicationEnable")], [0, 1]],
      ["alertEmail", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "AlertEmail")], [0, 1]],
      ["alertEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "AlertEnable")], [0, 1]],
      ["notificationPayloadType", ["NotificationPayloadTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "NotificationPayloadType")], [0, 1]],
      ["deviceType", ["DeviceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DeviceType")], [0, 1]],
      ["payloadVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayloadVersion")], [0, 1]],
      ["deliveryURLDetails", ["DeliveryURLDetailType[]", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AttributeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeArrayType"),
    :schema_element => [
      ["attribute", ["AttributeType[]", XSD::QName.new(NsEBLBaseComponents, "Attribute")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AttributeRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeRecommendationsType"),
    :schema_element => [
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AttributeSetArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeSetArrayType"),
    :schema_element => [
      ["attributeSet", ["AttributeSetType[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSet")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AttributeSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeSetType"),
    :schema_element => [
      ["attribute", ["AttributeType[]", XSD::QName.new(NsEBLBaseComponents, "Attribute")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeSetID") => "SOAP::SOAPInt",
      XSD::QName.new(nil, "attributeSetVersion") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => AttributeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AttributeType"),
    :schema_element => [
      ["value", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeID") => "SOAP::SOAPInt",
      XSD::QName.new(nil, "attributeLabel") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => AverageRatingDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetailArrayType"),
    :schema_element => [
      ["averageRatingDetails", ["AverageRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AverageRatingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetailsType"),
    :schema_element => [
      ["ratingDetail", ["FeedbackRatingDetailCodeType", XSD::QName.new(NsEBLBaseComponents, "RatingDetail")], [0, 1]],
      ["rating", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["ratingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RatingCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AverageRatingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AverageRatingSummaryType"),
    :schema_element => [
      ["feedbackSummaryPeriod", ["FeedbackSummaryPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryPeriod")], [0, 1]],
      ["averageRatingDetails", ["AverageRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => Base64BinaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "Base64BinaryType"),
    :schema_attribute => {
      XSD::QName.new(nil, "contentType") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => BasicAmountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BasicAmountType"),
    :schema_attribute => {
      XSD::QName.new(nil, "currencyID") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => BasicUpgradePackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferArrayType"),
    :schema_element => [
      ["bestOffer", ["BestOfferType[]", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferCounterEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferDetailsType"),
    :schema_element => [
      ["bestOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BestOfferCount")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["bestOffer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, 1]],
      ["bestOfferStatus", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferStatus")], [0, 1]],
      ["bestOfferType", ["BestOfferTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BestOfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferType"),
    :schema_element => [
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["buyer", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Buyer")], [0, 1]],
      ["price", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Price")], [0, 1]],
      ["status", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["buyerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerMessage")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]],
      ["bestOfferCodeType", ["BestOfferTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferCodeType")], [0, 1]],
      ["callStatus", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CallStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidApprovalArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidApprovalArrayType"),
    :schema_element => [
      ["liveAuctionBid", ["BidApprovalType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBid")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidApprovalType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidApprovalType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["approvedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ApprovedBiddingLimit")], [0, 1]],
      ["declinedComment", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeclinedComment")], [0, 1]],
      ["status", ["BidderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidAssistantListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidAssistantListType"),
    :schema_element => [
      ["bidGroupID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidGroupID")], [0, 1]],
      ["includeNotes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeNotes")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidGroupArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupArrayType"),
    :schema_element => [
      ["bidGroup", ["BidGroupType[]", XSD::QName.new(NsEBLBaseComponents, "BidGroup")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => BidGroupItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["bidGroupItemStatus", ["BidGroupItemStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidGroupItemStatus")], [0, 1]],
      ["maxBidAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBidAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidGroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupType"),
    :schema_element => [
      ["bidGroupItem", ["BidGroupItemType[]", XSD::QName.new(NsEBLBaseComponents, "BidGroupItem")], [0, nil]],
      ["bidGroupID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidGroupID")], [0, 1]],
      ["bidGroupName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BidGroupName")], [0, 1]],
      ["bidGroupStatus", ["BidGroupStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidGroupStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidRangeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidRangeType"),
    :schema_element => [
      ["minimumBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumBidCount")], [0, 1]],
      ["maximumBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaximumBidCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidderDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderDetailArrayType"),
    :schema_element => [
      ["bidderDetail", ["BidderDetailType[]", XSD::QName.new(NsEBLBaseComponents, "BidderDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => BidderDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderDetailType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["liveAuctionBidResult", ["LiveAuctionBidType", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidResult")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BidderNoticePreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferencesType"),
    :schema_element => [
      ["unsuccessfulBidderNoticeIncludeMyItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UnsuccessfulBidderNoticeIncludeMyItems")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BiddingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BiddingDetailsType"),
    :schema_element => [
      ["convertedMaxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedMaxBid")], [0, 1]],
      ["maxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBid")], [0, 1]],
      ["quantityBid", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityBid")], [0, 1]],
      ["quantityWon", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityWon")], [0, 1]],
      ["winning", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Winning")], [0, 1]],
      ["bidAssistant", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BidAssistant")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BiddingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BiddingSummaryType"),
    :schema_element => [
      ["summaryDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SummaryDays")], [0, 1]],
      ["totalBids", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalBids")], [0, 1]],
      ["bidActivityWithSeller", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidActivityWithSeller")], [0, 1]],
      ["bidsToUniqueSellers", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidsToUniqueSellers")], [0, 1]],
      ["bidsToUniqueCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidsToUniqueCategories")], [0, 1]],
      ["bidRetractions", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidRetractions")], [0, 1]],
      ["itemBidDetails", ["ItemBidDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemBidDetails")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BusinessSellerDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BusinessSellerDetailsType"),
    :schema_element => [
      ["address", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "Address")], [0, 1]],
      ["fax", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Fax")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["additionalContactInformation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AdditionalContactInformation")], [0, 1]],
      ["tradeRegistrationNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TradeRegistrationNumber")], [0, 1]],
      ["legalInvoice", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LegalInvoice")], [0, 1]],
      ["termsAndConditions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TermsAndConditions")], [0, 1]],
      ["vATDetails", ["VATDetailsType", XSD::QName.new(NsEBLBaseComponents, "VATDetails")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerGuaranteeEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerProtectionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionDetailsType"),
    :schema_element => [
      ["buyerProtectionSource", ["BuyerProtectionSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionSource")], [0, 1]],
      ["buyerProtectionStatus", ["BuyerProtectionCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerRequirementDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerRequirementDetailsType"),
    :schema_element => [
      ["shipToRegistrationCountry", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShipToRegistrationCountry")], [0, 1]],
      ["zeroFeedbackScore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ZeroFeedbackScore")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]],
      ["maximumItemRequirements", ["MaximumItemRequirementsType", XSD::QName.new(NsEBLBaseComponents, "MaximumItemRequirements")], [0, 1]],
      ["linkedPayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LinkedPayPalAccount")], [0, 1]],
      ["verifiedUserRequirements", ["VerifiedUserRequirementsType", XSD::QName.new(NsEBLBaseComponents, "VerifiedUserRequirements")], [0, 1]],
      ["maximumUnpaidItemStrikesInfo", ["MaximumUnpaidItemStrikesInfoType", XSD::QName.new(NsEBLBaseComponents, "MaximumUnpaidItemStrikesInfo")], [0, 1]],
      ["maximumBuyerPolicyViolations", ["MaximumBuyerPolicyViolationsType", XSD::QName.new(NsEBLBaseComponents, "MaximumBuyerPolicyViolations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerRoleMetricsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerRoleMetricsType"),
    :schema_element => [
      ["positiveFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackLeftCount")], [0, 1]],
      ["negativeFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackLeftCount")], [0, 1]],
      ["neutralFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackLeftCount")], [0, 1]],
      ["feedbackLeftPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeftPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerSatisfactionDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfactionDashboardType"),
    :schema_element => [
      ["status", ["BuyerSatisfactionStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerType"),
    :schema_element => [
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyingGuideDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetailsType"),
    :schema_element => [
      ["buyingGuide", ["BuyingGuideType[]", XSD::QName.new(NsEBLBaseComponents, "BuyingGuide")], [0, nil]],
      ["buyingGuideHub", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideHub")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyingGuideType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingGuideType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["creationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationTime")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => BuyingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyingSummaryType"),
    :schema_element => [
      ["biddingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BiddingCount")], [0, 1]],
      ["winningCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WinningCount")], [0, 1]],
      ["totalWinningCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalWinningCost")], [0, 1]],
      ["wonCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WonCount")], [0, 1]],
      ["totalWonCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalWonCost")], [0, 1]],
      ["wonDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WonDurationInDays")], [0, 1]],
      ["bestOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BestOfferCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CalculatedHandlingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscountType"),
    :schema_element => [
      ["discountName", ["HandlingNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["orderHandlingAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OrderHandlingAmount")], [0, 1]],
      ["eachAdditionalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmount")], [0, 1]],
      ["eachAdditionalOffAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalOffAmount")], [0, 1]],
      ["eachAdditionalPercentOff", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalPercentOff")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CalculatedShippingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscountType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["discountProfile", ["DiscountProfileType[]", XSD::QName.new(NsEBLBaseComponents, "DiscountProfile")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CalculatedShippingPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingPreferencesType"),
    :schema_element => [
      ["calculatedShippingAmountForEntireOrder", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingAmountForEntireOrder")], [0, 1]],
      ["calculatedShippingChargeOption", ["CalculatedShippingChargeOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingChargeOption")], [0, 1]],
      ["calculatedShippingRateOption", ["CalculatedShippingRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateOption")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CalculatedShippingRateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateType"),
    :schema_element => [
      ["originatingPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OriginatingPostalCode")], [0, 1]],
      ["measurementUnit", ["MeasurementSystemCodeType", XSD::QName.new(NsEBLBaseComponents, "MeasurementUnit")], [0, 1]],
      ["packageDepth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageDepth")], [0, 1]],
      ["packageLength", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageLength")], [0, 1]],
      ["packageWidth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageWidth")], [0, 1]],
      ["packagingHandlingCosts", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PackagingHandlingCosts")], [0, 1]],
      ["shippingIrregular", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIrregular")], [0, 1]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["weightMajor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMajor")], [0, 1]],
      ["weightMinor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMinor")], [0, 1]],
      ["internationalPackagingHandlingCosts", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InternationalPackagingHandlingCosts")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CancelOfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CancelOfferArrayType"),
    :schema_element => [
      ["cancelOffer", ["CancelOfferType[]", XSD::QName.new(NsEBLBaseComponents, "CancelOffer")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CancelOfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CancelOfferType"),
    :schema_element => [
      ["offer", ["OfferType", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, 1]],
      ["explanation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Explanation")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CartItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CartItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["referenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReferenceID")], [0, 1]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CatalogProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CatalogProductType"),
    :schema_element => [
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["displayStockPhotos", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayStockPhotos")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["reviewCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReviewCount")], [0, 1]],
      ["reviewDetails", ["ReviewDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReviewDetails")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryArrayType"),
    :schema_element => [
      ["category", ["CategoryType[]", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => CategoryFeatureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryFeatureType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["listingDuration", ["ListingDurationReferenceType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]],
      ["shippingTermsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationReferenceType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["payPalRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "AdFormatEnabledCodeType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPhoneCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProStreetCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "ClassifiedAdBestOfferEnabledCodeType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "ClassifiedAdPaymentMethodEnabledCodeType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["localMarketAdFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineCodeType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["returnPolicyEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["maxFlatShippingCost", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CategoryItemSpecificsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryItemSpecificsType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["updated", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Updated")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CategoryMappingType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryMappingType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "oldID") => "SOAP::SOAPString",
      XSD::QName.new(nil, "id") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => CategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryType"),
    :schema_element => [
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["autoPayEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AutoPayEnabled")], [0, 1]],
      ["b2BVATEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "B2BVATEnabled")], [0, 1]],
      ["catalogEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CatalogEnabled")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["categoryLevel", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryLevel")], [0, 1]],
      ["categoryName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryName")], [0, 1]],
      ["categoryParentID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParentID")], [0, nil]],
      ["categoryParentName", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParentName")], [0, nil]],
      ["productSearchPageAvailable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProductSearchPageAvailable")], [0, 1]],
      ["productFinderIDs", ["ExtendedProductFinderIDType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderIDs")], [0, nil]],
      ["characteristicsSets", ["CharacteristicsSetType[]", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSets")], [0, nil]],
      ["expired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Expired")], [0, 1]],
      ["intlAutosFixedCat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IntlAutosFixedCat")], [0, 1]],
      ["leafCategory", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LeafCategory")], [0, 1]],
      ["virtual", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Virtual")], [0, 1]],
      ["numOfItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumOfItems")], [0, 1]],
      ["sellerGuaranteeEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeEligible")], [0, 1]],
      ["oRPA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ORPA")], [0, 1]],
      ["oRRA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ORRA")], [0, 1]],
      ["lSD", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LSD")], [0, 1]],
      ["keywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Keywords")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharacteristicSetIDsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicSetIDsType"),
    :schema_element => [
      ["iD", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => CharacteristicType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicType"),
    :schema_element => [
      ["attributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeID")]],
      ["dateFormat", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DateFormat")], [0, 1]],
      ["displaySequence", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplaySequence")], [0, 1]],
      ["displayUOM", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayUOM")], [0, 1]],
      ["label", ["LabelType", XSD::QName.new(NsEBLBaseComponents, "Label")], [0, 1]],
      ["sortOrder", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SortOrder")], [0, 1]],
      ["valueList", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "ValueList")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharacteristicsSetProductHistogramType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetProductHistogramType"),
    :schema_element => [
      ["histogramEntry", ["HistogramEntryType[]", XSD::QName.new(NsEBLBaseComponents, "HistogramEntry")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharacteristicsSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, 1]],
      ["attributeSetVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSetVersion")], [0, 1]],
      ["characteristics", ["CharacteristicType[]", XSD::QName.new(NsEBLBaseComponents, "Characteristics")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharityAffiliationDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetailType"),
    :schema_element => [
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["affiliationType", ["CharityAffiliationTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AffiliationType")], [0, 1]],
      ["lastUsedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUsedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharityAffiliationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetailsType"),
    :schema_element => [
      ["charityAffiliationDetail", ["CharityAffiliationDetailType[]", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => CharityAffiliationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString",
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => CharityAffiliationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationsType"),
    :schema_element => [
      ["charityID", ["CharityIDType[]", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharityIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityIDType"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => CharityInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityInfoType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["mission", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Mission")], [0, 1]],
      ["logoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["status", ["CharityStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["searchableString", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchableString")], [0, 1]],
      ["charityRegion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityRegion")], [0, 1]],
      ["charityDomain", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "CharityDomain")], [0, 3]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["logoURLSelling", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURLSelling")], [0, 1]],
      ["displayLogoSelling", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayLogoSelling")], [0, 1]],
      ["displayNameInCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayNameInCheckout")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => CharitySellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharitySellerType"),
    :schema_element => [
      ["charitySellerStatus", ["CharitySellerStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CharitySellerStatus")], [0, 1]],
      ["charityAffiliation", ["CharityAffiliationType[]", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliation")], [0, nil]],
      ["termsAndConditionsAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TermsAndConditionsAccepted")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CharityType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityType"),
    :schema_element => [
      ["charityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityName")], [0, 1]],
      ["charityNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityNumber")], [0, 1]],
      ["donationPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "DonationPercent")], [0, 1]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["mission", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Mission")], [0, 1]],
      ["logoURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["status", ["CharityStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["charityListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CharityListing")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CheckoutOrderDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutOrderDetailType"),
    :schema_element => [
      ["totalCartMerchandiseCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalCartMerchandiseCost")], [0, 1]],
      ["totalCartShippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalCartShippingCost")], [0, 1]],
      ["totalTaxAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalTaxAmount")], [0, 1]],
      ["totalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CheckoutStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutStatusType"),
    :schema_element => [
      ["eBayPaymentStatus", "PaymentStatusCodeType", [0, 1]],
      ["lastModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedTime")], [0, 1]],
      ["paymentMethod", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["status", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdContactByEmailEnabledDefintionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabledDefintionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdPayPerLeadEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdPaymentMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ClassifiedAdStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CombinedFixedPriceTreatmentEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CombinedPaymentPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferencesType"),
    :schema_element => [
      ["calculatedShippingPreferences", ["CalculatedShippingPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingPreferences")], [0, 1]],
      ["combinedPaymentOption", ["CombinedPaymentOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentOption")], [0, 1]],
      ["combinedPaymentPeriod", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPeriod")], [0, 1]],
      ["flatShippingPreferences", ["FlatShippingPreferencesType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingPreferences")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ContactHoursDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ContactHoursDetailsType"),
    :schema_element => [
      ["timeZoneID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TimeZoneID")], [0, 1]],
      ["hours1Days", ["DaysCodeType", XSD::QName.new(NsEBLBaseComponents, "Hours1Days")], [0, 1]],
      ["hours1AnyTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Hours1AnyTime")], [0, 1]],
      ["hours1From", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours1From")], [0, 1]],
      ["hours1To", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours1To")], [0, 1]],
      ["hours2Days", ["DaysCodeType", XSD::QName.new(NsEBLBaseComponents, "Hours2Days")], [0, 1]],
      ["hours2AnyTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Hours2AnyTime")], [0, 1]],
      ["hours2From", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours2From")], [0, 1]],
      ["hours2To", ["SOAP::SOAPTime", XSD::QName.new(NsEBLBaseComponents, "Hours2To")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ContextSearchAssetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ContextSearchAssetType"),
    :schema_element => [
      ["keyword", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Keyword")], [0, 1]],
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["ranking", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Ranking")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CountryDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CountryDetailsType"),
    :schema_element => [
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CrossBorderTradeAustraliaEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CrossBorderTradeGBEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CrossBorderTradeNorthAmericaEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CrossPromotionPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferencesType"),
    :schema_element => [
      ["crossPromotionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionEnabled")], [0, 1]],
      ["crossSellItemFormatSortFilter", ["ItemFormatSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellItemFormatSortFilter")], [0, 1]],
      ["crossSellGallerySortFilter", ["GallerySortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellGallerySortFilter")], [0, 1]],
      ["crossSellItemSortFilter", ["ItemSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "CrossSellItemSortFilter")], [0, 1]],
      ["upSellItemFormatSortFilter", ["ItemFormatSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellItemFormatSortFilter")], [0, 1]],
      ["upSellGallerySortFilter", ["GallerySortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellGallerySortFilter")], [0, 1]],
      ["upSellItemSortFilter", ["ItemSortFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "UpSellItemSortFilter")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CrossPromotionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CrossPromotionsType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["primaryScheme", ["PromotionSchemeCodeType", XSD::QName.new(NsEBLBaseComponents, "PrimaryScheme")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["sellerID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["shippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingDiscount")]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["promotedItem", ["PromotedItemType[]", XSD::QName.new(NsEBLBaseComponents, "PromotedItem")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => CurrencyDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CurrencyDetailsType"),
    :schema_element => [
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DataElementSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DataElementSetType"),
    :schema_element => [
      ["dataElement", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DataElement")], [0, 1]],
      ["dataElementID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DataElementID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "attributeSetID") => "SOAP::SOAPInt"
    }
  )

  LiteralRegistry.register(
    :class => DateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DateType"),
    :schema_element => [
      ["year", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Year")], [0, 1]],
      ["month", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Month")], [0, 1]],
      ["day", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Day")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DeliveryURLDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeliveryURLDetailType"),
    :schema_element => [
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["deliveryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DeliveryURL")], [0, 1]],
      ["status", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DescriptionTemplateType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplateType"),
    :schema_element => [
      ["groupID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GroupID")], [0, 1]],
      ["iD", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, 1]],
      ["imageURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ImageURL")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["templateXML", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TemplateXML")], [0, 1]],
      ["type", ["DescriptionTemplateCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DiscountProfileType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountProfileType"),
    :schema_element => [
      ["discountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DiscountProfileID")], [0, 1]],
      ["discountProfileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DiscountProfileName")], [0, 1]],
      ["eachAdditionalAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmount")], [0, 1]],
      ["eachAdditionalAmountOff", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalAmountOff")], [0, 1]],
      ["eachAdditionalPercentOff", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "EachAdditionalPercentOff")], [0, 1]],
      ["weightOff", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightOff")], [0, 1]],
      ["mappedDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MappedDiscountProfileID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DispatchTimeMaxDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMaxDetailsType"),
    :schema_element => [
      ["dispatchTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMax")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DisputeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeArrayType"),
    :schema_element => [
      ["dispute", ["DisputeType[]", XSD::QName.new(NsEBLBaseComponents, "Dispute")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => DisputeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeType"),
    :schema_element => [
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["disputeRecordType", ["DisputeRecordTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeRecordType")], [0, 1]],
      ["disputeState", ["DisputeStateCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeState")], [0, 1]],
      ["disputeStatus", ["DisputeStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeStatus")], [0, 1]],
      ["otherPartyRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "OtherPartyRole")], [0, 1]],
      ["otherPartyName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OtherPartyName")], [0, 1]],
      ["userRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "UserRole")], [0, 1]],
      ["buyerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "BuyerUserID")], [0, 1]],
      ["sellerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerUserID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["disputeReason", ["DisputeReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeReason")], [0, 1]],
      ["disputeExplanation", ["DisputeExplanationCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeExplanation")], [0, 1]],
      ["disputeCreditEligibility", ["DisputeCreditEligibilityCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeCreditEligibility")], [0, 1]],
      ["disputeCreatedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DisputeCreatedTime")], [0, 1]],
      ["disputeModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DisputeModifiedTime")], [0, 1]],
      ["disputeResolution", ["DisputeResolutionType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeResolution")], [0, nil]],
      ["disputeMessage", ["DisputeMessageType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeMessage")], [0, nil]],
      ["escalation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Escalation")], [0, 1]],
      ["purchaseProtection", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PurchaseProtection")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DistanceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DistanceType"),
    :schema_element => [
      ["distanceMeasurement", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DistanceMeasurement")]],
      ["distanceUnit", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DistanceUnit")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => DutchBINEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EndOfAuctionEmailPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferencesType"),
    :schema_element => [
      ["templateText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TemplateText")], [0, 1]],
      ["logoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "LogoURL")], [0, 1]],
      ["logoType", ["EndOfAuctionLogoTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "LogoType")], [0, 1]],
      ["emailCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCustomized")], [0, 1]],
      ["textCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TextCustomized")], [0, 1]],
      ["logoCustomized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LogoCustomized")], [0, 1]],
      ["copyEmail", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CopyEmail")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpansionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpansionArrayType"),
    :schema_element => [
      ["expansionItem", ["SearchResultItemType[]", XSD::QName.new(NsEBLBaseComponents, "ExpansionItem")], [0, nil]],
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressConditionRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressDetailsType"),
    :schema_element => [
      ["expressLargeImage", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ExpressLargeImage")], [0, 1]],
      ["expressSmallImage", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ExpressSmallImage")], [0, 1]],
      ["condition", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Condition")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressHistogramAisleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramAisleType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["productType", ["ExpressHistogramProductType[]", XSD::QName.new(NsEBLBaseComponents, "ProductType")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressHistogramDepartmentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramDepartmentType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["aisle", ["ExpressHistogramAisleType[]", XSD::QName.new(NsEBLBaseComponents, "Aisle")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressHistogramDomainDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramDomainDetailsType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["breadCrumb", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BreadCrumb")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["productCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductCount")], [0, 1]],
      ["imageURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ImageURL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressHistogramProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressHistogramProductType"),
    :schema_element => [
      ["domainDetails", ["ExpressHistogramDomainDetailsType", XSD::QName.new(NsEBLBaseComponents, "DomainDetails")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressItemRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressItemRequirementsType"),
    :schema_element => [
      ["sellerExpressEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerExpressEligible")], [0, 1]],
      ["expressOptOut", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressOptOut")], [0, 1]],
      ["expressApproved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressApproved")], [0, 1]],
      ["expressEligibleListingType", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEligibleListingType")], [0, 1]],
      ["expressEnabledCategory", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabledCategory")], [0, 1]],
      ["eligiblePayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligiblePayPalAccount")], [0, 1]],
      ["domesticShippingCost", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DomesticShippingCost")], [0, 1]],
      ["eligibleReturnPolicy", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleReturnPolicy")], [0, 1]],
      ["picture", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, 1]],
      ["eligibleItemCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleItemCondition")], [0, 1]],
      ["priceAboveMinimum", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PriceAboveMinimum")], [0, 1]],
      ["priceBelowMaximum", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PriceBelowMaximum")], [0, 1]],
      ["eligibleCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleCheckout")], [0, 1]],
      ["noPreapprovedBidderList", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NoPreapprovedBidderList")], [0, 1]],
      ["noCharity", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NoCharity")], [0, 1]],
      ["combinedShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedShippingDiscount")], [0, 1]],
      ["shipFromEligibleCountry", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShipFromEligibleCountry")], [0, 1]],
      ["payPalAccountAcceptsUnconfirmedAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountAcceptsUnconfirmedAddress")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressPicturesRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressPreferencesType"),
    :schema_element => [
      ["expressSellingPreference", ["ExpressSellingPreferenceCodeType", XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreference")], [0, 1]],
      ["defaultPayPalAccount", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DefaultPayPalAccount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressProductType"),
    :schema_element => [
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExpressSellerRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressSellerRequirementsType"),
    :schema_element => [
      ["expressSellingPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreference")], [0, 1]],
      ["expressApproved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressApproved")], [0, 1]],
      ["goodStanding", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GoodStanding")], [0, 1]],
      ["feedbackScore", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["positiveFeedbackPercent", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPercent")], [0, 1]],
      ["feedbackAsSellerScore", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "FeedbackAsSellerScore")], [0, 1]],
      ["positiveFeedbackAsSellerPercent", ["FeedbackRequirementsType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackAsSellerPercent")], [0, 1]],
      ["businessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BusinessSeller")], [0, 1]],
      ["eligiblePayPalAccount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligiblePayPalAccount")], [0, 1]],
      ["payPalAccountAcceptsUnconfirmedAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountAcceptsUnconfirmedAddress")], [0, 1]],
      ["combinedPaymentsAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentsAccepted")], [0, 1]],
      ["feedbackPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FeedbackPublic")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExtendedContactDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExtendedContactDetailsType"),
    :schema_element => [
      ["contactHoursDetails", ["ContactHoursDetailsType", XSD::QName.new(NsEBLBaseComponents, "ContactHoursDetails")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["payPerLeadPhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPerLeadPhoneNumber")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExtendedProductFinderIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExtendedProductFinderIDType"),
    :schema_element => [
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["productFinderBuySide", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProductFinderBuySide")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ExternalAlertIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalAlertIDArrayType"),
    :schema_element => [
      ["externalAlertID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ExternalAlertID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ExternalProductIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalProductIDType"),
    :schema_element => [
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["returnSearchResultOnDuplicates", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnSearchResultOnDuplicates")], [0, 1]],
      ["type", ["ExternalProductCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["alternateValue", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "AlternateValue")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ExternalTransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionType"),
    :schema_element => [
      ["externalTransactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionID")], [0, 1]],
      ["externalTransactionTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExternalTransactionTime")], [0, 1]],
      ["feeOrCreditAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FeeOrCreditAmount")], [0, 1]],
      ["paymentOrRefundAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PaymentOrRefundAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeatureDefinitionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeatureDefinitionsType"),
    :schema_element => [
      ["listingDurations", ["ListingDurationDefinitionsType", XSD::QName.new(NsEBLBaseComponents, "ListingDurations")], [0, 1]],
      ["shippingTermsRequired", ["ShippingTermRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["BestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["DutchBINEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["UserConsentRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["HomePageFeaturedEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["ProPackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["BasicUpgradePackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["ValuePackEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["ProPackPlusEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["BestOfferCounterEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["BestOfferAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["LocalMarketSpecialitySubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["LocalMarketRegularSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["LocalMarketPremiumSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["LocalMarketNonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["ExpressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["ExpressPicturesRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["ExpressConditionRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["MinimumReservePriceDefinitionType", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["TCREnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SellerContactDetailsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["StoreInventoryEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SkypeMeTransactionalEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SkypeMeNonTransactionalEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["localListingDistancesRegular", ["LocalListingDistancesRegularDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegular")], [0, 1]],
      ["localListingDistancesSpecialty", ["LocalListingDistancesSpecialtyDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialty")], [0, 1]],
      ["localListingDistancesNonSubscription", ["LocalListingDistancesNonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscription")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["ClassifiedAdShippingMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["ClassifiedAdCounterOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["ClassifiedAdAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["ClassifiedAdContactByPhoneEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["ClassifiedAdContactByEmailEnabledDefintionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SafePaymentRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["ClassifiedAdPayPerLeadEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["PaisaPayFullEscrowEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["BestOfferAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["ClassifiedAdAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["CrossBorderTradeNorthAmericaEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["CrossBorderTradeGBEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["CrossBorderTradeAustraliaEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["PayPalBuyerProtectionEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["BuyerGuaranteeEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["CombinedFixedPriceTreatmentEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationDefinitionType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineDefinitionType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["payPalRequired", ["PayPalRequiredDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "EBayMotorsProAdFormatEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "EBayMotorsProContactByPhoneEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProPhoneCount", "EBayMotorsProPhoneCountDefinitionType", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "EBayMotorsProContactByAddressEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProStreetCount", "EBayMotorsProStreetCountDefinitionType", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "EBayMotorsProCompanyNameEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "EBayMotorsProContactByEmailEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "EBayMotorsProBestOfferEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "EBayMotorsProAutoAcceptEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "EBayMotorsProAutoDeclineEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "EBayMotorsProShippingMethodEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "EBayMotorsProCounterOfferEnabledDefinitionType", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "EBayMotorsProSellerContactDetailsEnabledDefinitionType", [0, 1]],
      ["localMarketAdFormatEnabled", ["LocalMarketAdFormatEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["LocalMarketContactByPhoneEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["LocalMarketPhoneCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["LocalMarketContactByAddressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["LocalMarketStreetCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["LocalMarketCompanyNameEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["LocalMarketContactByEmailEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["LocalMarketBestOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["LocalMarketAutoAcceptEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["LocalMarketAutoDeclineEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["LocalMarketPaymentMethodCheckOutEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["LocalMarketShippingMethodEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["LocalMarketCounterOfferEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["LocalMarketSellerContactDetailsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["ClassifiedAdPhoneCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["ClassifiedAdContactByAddressEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["ClassifiedAdStreetCountDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["ClassifiedAdCompanyNameEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["SpecialitySubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["RegularSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["PremiumSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["NonSubscriptionDefinitionType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["returnPolicyEnabled", ["ReturnPolicyEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["HandlingTimeEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["PayPalRequiredForStoreOwnerDefinitionType", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["ReviseQuantityAllowedDefinitionType", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["RevisePriceAllowedDefinitionType", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["StoreOwnerExtendedListingDurationsEnabledDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsDefinitionType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeeType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackCommentArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackCommentArrayType"),
    :schema_element => [
      ["storedCommentText", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "StoredCommentText")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailArrayType"),
    :schema_element => [
      ["feedbackDetail", ["FeedbackDetailType[]", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailType"),
    :schema_element => [
      ["commentingUser", [nil, XSD::QName.new(NsEBLBaseComponents, "CommentingUser")], [0, 1]],
      ["commentingUserScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CommentingUserScore")], [0, 1]],
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CommentTime")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["feedbackResponse", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackResponse")], [0, 1]],
      ["followup", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Followup")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["role", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "Role")], [0, 1]],
      ["itemTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemTitle")], [0, 1]],
      ["itemPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ItemPrice")], [0, 1]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["commentReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CommentReplaced")], [0, 1]],
      ["responseReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResponseReplaced")], [0, 1]],
      ["followUpReplaced", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FollowUpReplaced")], [0, 1]],
      ["countable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Countable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackInfoType"),
    :schema_element => [
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["targetUser", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUser")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackPeriodArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriodArrayType"),
    :schema_element => [
      ["feedbackPeriod", ["FeedbackPeriodType[]", XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriod")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackPeriodType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackPeriodType"),
    :schema_element => [
      ["periodInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PeriodInDays")], [0, 1]],
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeedbackRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRequirementsType"),
    :schema_attribute => {
      XSD::QName.new(nil, "minimum") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => FeedbackSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryType"),
    :schema_element => [
      ["bidRetractionFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "BidRetractionFeedbackPeriodArray")], [0, 1]],
      ["negativeFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackPeriodArray")], [0, 1]],
      ["neutralFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackPeriodArray")], [0, 1]],
      ["positiveFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPeriodArray")], [0, 1]],
      ["totalFeedbackPeriodArray", ["FeedbackPeriodArrayType", XSD::QName.new(NsEBLBaseComponents, "TotalFeedbackPeriodArray")], [0, 1]],
      ["neutralCommentCountFromSuspendedUsers", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralCommentCountFromSuspendedUsers")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["sellerRatingSummaryArray", ["SellerRatingSummaryArrayType", XSD::QName.new(NsEBLBaseComponents, "SellerRatingSummaryArray")], [0, 1]],
      ["sellerRoleMetrics", ["SellerRoleMetricsType", XSD::QName.new(NsEBLBaseComponents, "SellerRoleMetrics")], [0, 1]],
      ["buyerRoleMetrics", ["BuyerRoleMetricsType", XSD::QName.new(NsEBLBaseComponents, "BuyerRoleMetrics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FeesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeesType"),
    :schema_element => [
      ["fee", ["FeeType[]", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FlatRateInsuranceRangeCostType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCostType"),
    :schema_element => [
      ["flatRateInsuranceRange", ["FlatRateInsuranceRangeCodeType", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRange")], [0, 1]],
      ["insuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FlatShippingDiscountType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscountType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["discountProfile", ["DiscountProfileType[]", XSD::QName.new(NsEBLBaseComponents, "DiscountProfile")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => FlatShippingPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingPreferencesType"),
    :schema_element => [
      ["amountPerAdditionalItem", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPerAdditionalItem")], [0, 1]],
      ["deductionAmountPerAdditionalItem", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DeductionAmountPerAdditionalItem")], [0, 1]],
      ["flatRateInsuranceRangeCost", ["FlatRateInsuranceRangeCostType[]", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCost")], [0, 6]],
      ["flatShippingRateOption", ["FlatShippingRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingRateOption")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetRecommendationsRequestContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsRequestContainerType"),
    :schema_element => [
      ["listingFlow", ["ListingFlowCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingFlow")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["recommendationEngine", ["RecommendationEngineCodeType[]", XSD::QName.new(NsEBLBaseComponents, "RecommendationEngine")], [0, nil]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetRecommendationsResponseContainerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsResponseContainerType"),
    :schema_element => [
      ["listingAnalyzerRecommendations", ["ListingAnalyzerRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ListingAnalyzerRecommendations")], [0, 1]],
      ["sIFFTASRecommendations", ["SIFFTASRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "SIFFTASRecommendations")], [0, 1]],
      ["pricingRecommendations", ["PricingRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "PricingRecommendations")], [0, 1]],
      ["attributeRecommendations", ["AttributeRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "AttributeRecommendations")], [0, 1]],
      ["productRecommendations", ["ProductRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ProductRecommendations")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["itemSpecificsRecommendations", ["ItemSpecificsRecommendationsType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsRecommendations")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GroupType"),
    :schema_element => [
      ["maxGroups", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxGroups")], [0, 1]],
      ["maxEntriesPerGroup", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxEntriesPerGroup")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => HandlingTimeEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => HistogramEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HistogramEntryType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "id") => "SOAP::SOAPString",
      XSD::QName.new(nil, "name") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => HomePageFeaturedEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => INEscrowWorkflowTimelineDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimelineDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => InsuranceDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceDetailsType"),
    :schema_element => [
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => InternationalShippingServiceOptionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOptionsType"),
    :schema_element => [
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCost")], [0, 1]],
      ["shippingServiceAdditionalCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceAdditionalCost")], [0, 1]],
      ["shippingServicePriority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServicePriority")], [0, 1]],
      ["shipToLocation", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ShipToLocation")], [0, nil]],
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemArrayType"),
    :schema_element => [
      ["item", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemBidDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemBidDetailsType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["lastBidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastBidTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemIDArrayType"),
    :schema_element => [
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemListCustomizationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemListCustomizationType"),
    :schema_element => [
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["sort", ["ItemSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["durationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DurationInDays")], [0, 1]],
      ["includeNotes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeNotes")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemPolicyViolationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemPolicyViolationType"),
    :schema_element => [
      ["policyID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PolicyID")], [0, 1]],
      ["policyText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PolicyText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemRatingDetailArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetailArrayType"),
    :schema_element => [
      ["itemRatingDetails", ["ItemRatingDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemRatingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemRatingDetailsType"),
    :schema_element => [
      ["ratingDetail", ["FeedbackRatingDetailCodeType", XSD::QName.new(NsEBLBaseComponents, "RatingDetail")], [0, 1]],
      ["rating", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemSpecificDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificDetailsType"),
    :schema_element => [
      ["maxItemSpecificsPerItem", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxItemSpecificsPerItem")], [0, 1]],
      ["maxValuesPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxValuesPerName")], [0, 1]],
      ["maxCharactersPerValue", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCharactersPerValue")], [0, 1]],
      ["maxCharactersPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCharactersPerName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemSpecificsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemSpecificsRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsRecommendationsType"),
    :schema_element => [
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemTotalsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTotalsType"),
    :schema_element => [
      ["totalQuantity", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TotalQuantity")], [0, 1]],
      ["totalValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalValue")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemTransactionIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDArrayType"),
    :schema_element => [
      ["itemTransactionID", ["ItemTransactionIDType[]", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemTransactionIDType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemType"),
    :schema_element => [
      ["applicationData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ApplicationData")], [0, 1]],
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["attributeArray", ["AttributeArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeArray")], [0, 1]],
      ["lookupAttributeArray", ["LookupAttributeArrayType", XSD::QName.new(NsEBLBaseComponents, "LookupAttributeArray")], [0, 1]],
      ["applyShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApplyShippingDiscount")], [0, 1]],
      ["autoPay", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AutoPay")], [0, 1]],
      ["paymentDetails", ["PaymentDetailsType", XSD::QName.new(NsEBLBaseComponents, "PaymentDetails")], [0, 1]],
      ["biddingDetails", ["BiddingDetailsType", XSD::QName.new(NsEBLBaseComponents, "BiddingDetails")], [0, 1]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["buyerProtection", ["BuyerProtectionCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerProtection")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["categoryMappingAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryMappingAllowed")], [0, 1]],
      ["charity", ["CharityType", XSD::QName.new(NsEBLBaseComponents, "Charity")], [0, 1]],
      ["country", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "Country")], [0, 1]],
      ["crossPromotion", ["CrossPromotionsType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotion")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["descriptionReviseMode", ["DescriptionReviseModeCodeType", XSD::QName.new(NsEBLBaseComponents, "DescriptionReviseMode")], [0, 1]],
      ["distance", ["DistanceType", XSD::QName.new(NsEBLBaseComponents, "Distance")], [0, 1]],
      ["giftIcon", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GiftIcon")], [0, 1]],
      ["giftServices", ["GiftServicesCodeType[]", XSD::QName.new(NsEBLBaseComponents, "GiftServices")], [0, nil]],
      ["hitCounter", ["HitCounterCodeType", XSD::QName.new(NsEBLBaseComponents, "HitCounter")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["listingDetails", ["ListingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ListingDetails")], [0, 1]],
      ["listingDesigner", ["ListingDesignerType", XSD::QName.new(NsEBLBaseComponents, "ListingDesigner")], [0, 1]],
      ["listingDuration", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, 1]],
      ["listingEnhancement", ["ListingEnhancementsCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ListingEnhancement")], [0, nil]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["location", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Location")], [0, 1]],
      ["lotSize", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LotSize")], [0, 1]],
      ["nowAndNew", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NowAndNew")], [0, 1]],
      ["partnerCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PartnerCode")], [0, 1]],
      ["partnerName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PartnerName")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["primaryCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "PrimaryCategory")], [0, 1]],
      ["privateListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PrivateListing")], [0, 1]],
      ["productListingDetails", ["ProductListingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ProductListingDetails")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["privateNotes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PrivateNotes")], [0, 1]],
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["relistLink", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RelistLink")], [0, 1]],
      ["reservePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ReservePrice")], [0, 1]],
      ["reviseStatus", ["ReviseStatusType", XSD::QName.new(NsEBLBaseComponents, "ReviseStatus")], [0, 1]],
      ["scheduleTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ScheduleTime")], [0, 1]],
      ["secondaryCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "SecondaryCategory")], [0, 1]],
      ["freeAddedCategory", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "FreeAddedCategory")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]],
      ["sellingStatus", ["SellingStatusType", XSD::QName.new(NsEBLBaseComponents, "SellingStatus")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["shipToLocations", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ShipToLocations")], [0, nil]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["startPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "StartPrice")], [0, 1]],
      ["storefront", ["StorefrontType", XSD::QName.new(NsEBLBaseComponents, "Storefront")], [0, 1]],
      ["subTitle", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SubTitle")], [0, 1]],
      ["timeLeft", ["SOAP::SOAPDuration", XSD::QName.new(NsEBLBaseComponents, "TimeLeft")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["uUID", [nil, XSD::QName.new(NsEBLBaseComponents, "UUID")], [0, 1]],
      ["vATDetails", ["VATDetailsType", XSD::QName.new(NsEBLBaseComponents, "VATDetails")], [0, 1]],
      ["sellerVacationNote", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerVacationNote")], [0, 1]],
      ["watchCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "WatchCount")], [0, 1]],
      ["hitCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HitCount")], [0, 1]],
      ["disableBuyerRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisableBuyerRequirements")], [0, 1]],
      ["bestOfferDetails", ["BestOfferDetailsType", XSD::QName.new(NsEBLBaseComponents, "BestOfferDetails")], [0, 1]],
      ["liveAuctionDetails", ["LiveAuctionDetailsType", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionDetails")], [0, 1]],
      ["locationDefaulted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocationDefaulted")], [0, 1]],
      ["thirdPartyCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckout")], [0, 1]],
      ["useTaxTable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UseTaxTable")], [0, 1]],
      ["getItFast", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GetItFast")], [0, 1]],
      ["buyerResponsibleForShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerResponsibleForShipping")], [0, 1]],
      ["limitedWarrantyEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LimitedWarrantyEligible")], [0, 1]],
      ["eBayNotes", "SOAP::SOAPString", [0, 1]],
      ["questionCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "QuestionCount")], [0, 1]],
      ["relisted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Relisted")], [0, 1]],
      ["quantityAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityAvailable")], [0, 1]],
      ["sKU", [nil, XSD::QName.new(NsEBLBaseComponents, "SKU")], [0, 1]],
      ["categoryBasedAttributesPrefill", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryBasedAttributesPrefill")], [0, 1]],
      ["searchDetails", ["SearchDetailsType", XSD::QName.new(NsEBLBaseComponents, "SearchDetails")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["shippingTermsInDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsInDescription")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]],
      ["pictureDetails", ["PictureDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureDetails")], [0, 1]],
      ["dispatchTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMax")], [0, 1]],
      ["skypeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeEnabled")], [0, 1]],
      ["skypeID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SkypeID")], [0, 1]],
      ["skypeContactOption", ["SkypeContactOptionCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SkypeContactOption")], [0, nil]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["localListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalListing")], [0, 1]],
      ["thirdPartyCheckoutIntegration", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckoutIntegration")], [0, 1]],
      ["listingCheckoutRedirectPreference", ["ListingCheckoutRedirectPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreference")], [0, 1]],
      ["sellerContactDetails", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetails")], [0, 1]],
      ["totalQuestionCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TotalQuestionCount")], [0, 1]],
      ["proxyItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProxyItem")], [0, 1]],
      ["extendedSellerContactDetails", ["ExtendedContactDetailsType", XSD::QName.new(NsEBLBaseComponents, "ExtendedSellerContactDetails")], [0, 1]],
      ["leadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LeadCount")], [0, 1]],
      ["newLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewLeadCount")], [0, 1]],
      ["itemSpecifics", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecifics")], [0, 1]],
      ["groupCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "GroupCategoryID")], [0, 1]],
      ["classifiedAdPayPerLeadFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadFee")], [0, 1]],
      ["bidGroupItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BidGroupItem")], [0, 1]],
      ["applyBuyerProtection", ["BuyerProtectionDetailsType", XSD::QName.new(NsEBLBaseComponents, "ApplyBuyerProtection")], [0, 1]],
      ["listingSubtype2", ["ListingSubtypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingSubtype2")], [0, 1]],
      ["mechanicalCheckAccepted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MechanicalCheckAccepted")], [0, 1]],
      ["updateSellerInfo", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UpdateSellerInfo")], [0, 1]],
      ["updateReturnPolicy", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UpdateReturnPolicy")], [0, 1]],
      ["itemPolicyViolation", ["ItemPolicyViolationType", XSD::QName.new(NsEBLBaseComponents, "ItemPolicyViolation")], [0, 1]],
      ["crossBorderTrade", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTrade")], [0, nil]],
      ["businessSellerDetails", ["BusinessSellerDetailsType", XSD::QName.new(NsEBLBaseComponents, "BusinessSellerDetails")], [0, 1]],
      ["buyerGuaranteePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteePrice")], [0, 1]],
      ["buyerRequirementDetails", ["BuyerRequirementDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyerRequirementDetails")], [0, 1]],
      ["returnPolicy", ["ReturnPolicyType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicy")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemsCanceledEventType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemsCanceledEventType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["canceledItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "CanceledItemIDArray")], [0, 1]],
      ["eligibleForRelist", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleForRelist")], [0, 1]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LabelType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LabelType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "visible") => "SOAP::SOAPBoolean"
    }
  )

  LiteralRegistry.register(
    :class => ListingAnalyzerRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingAnalyzerRecommendationsType"),
    :schema_element => [
      ["listingTipArray", ["ListingTipArrayType", XSD::QName.new(NsEBLBaseComponents, "ListingTipArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingCheckoutRedirectPreferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreferenceType"),
    :schema_element => [
      ["proStoresStoreName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProStoresStoreName")], [0, 1]],
      ["sellerThirdPartyUsername", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerThirdPartyUsername")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingDesignerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDesignerType"),
    :schema_element => [
      ["layoutID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LayoutID")], [0, 1]],
      ["optimalPictureSize", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "OptimalPictureSize")], [0, 1]],
      ["themeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDetailsType"),
    :schema_element => [
      ["adult", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Adult")], [0, 1]],
      ["bindingAuction", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BindingAuction")], [0, 1]],
      ["checkoutEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutEnabled")], [0, 1]],
      ["convertedBuyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedBuyItNowPrice")], [0, 1]],
      ["convertedStartPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedStartPrice")], [0, 1]],
      ["convertedReservePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedReservePrice")], [0, 1]],
      ["hasReservePrice", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasReservePrice")], [0, 1]],
      ["relistedItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "RelistedItemID")], [0, 1]],
      ["secondChanceOriginalItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "SecondChanceOriginalItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["viewItemURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ViewItemURL")], [0, 1]],
      ["hasUnansweredQuestions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasUnansweredQuestions")], [0, 1]],
      ["hasPublicMessages", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasPublicMessages")], [0, 1]],
      ["buyItNowAvailable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowAvailable")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["minimumBestOfferPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinimumBestOfferPrice")], [0, 1]],
      ["minimumBestOfferMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MinimumBestOfferMessage")], [0, 1]],
      ["localListingDistance", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistance")], [0, 1]],
      ["tCROriginalItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "TCROriginalItemID")], [0, 1]],
      ["viewItemURLForNaturalSearch", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ViewItemURLForNaturalSearch")], [0, 1]],
      ["payPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPerLeadEnabled")], [0, 1]],
      ["bestOfferAutoAcceptPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingDurationDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationDefinitionType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "durationSetID") => "SOAP::SOAPInt"
    }
  )

  LiteralRegistry.register(
    :class => ListingDurationDefinitionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationDefinitionsType"),
    :schema_element => [
      ["listingDuration", ["ListingDurationDefinitionType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "Version") => "SOAP::SOAPInt"
    }
  )

  LiteralRegistry.register(
    :class => ListingDurationReferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationReferenceType"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPToken"
    }
  )

  LiteralRegistry.register(
    :class => ListingEnhancementDurationDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingEnhancementDurationReferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationReferenceType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingTipArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipArrayType"),
    :schema_element => [
      ["listingTip", ["ListingTipType[]", XSD::QName.new(NsEBLBaseComponents, "ListingTip")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingTipFieldType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipFieldType"),
    :schema_element => [
      ["listingTipFieldID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipFieldID")], [0, 1]],
      ["fieldTip", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FieldTip")], [0, 1]],
      ["currentFieldText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CurrentFieldText")], [0, 1]],
      ["currentFieldValue", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CurrentFieldValue")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingTipMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipMessageType"),
    :schema_element => [
      ["listingTipMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipMessageID")], [0, 1]],
      ["shortMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShortMessage")], [0, 1]],
      ["longMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LongMessage")], [0, 1]],
      ["helpURLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HelpURLPath")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ListingTipType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTipType"),
    :schema_element => [
      ["listingTipID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ListingTipID")], [0, 1]],
      ["priority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Priority")], [0, 1]],
      ["message", ["ListingTipMessageType", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["field", ["ListingTipFieldType", XSD::QName.new(NsEBLBaseComponents, "Field")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionApprovalStatusArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionApprovalStatusArrayType"),
    :schema_element => [
      ["liveAuctionStatus", ["LiveAuctionApprovalStatusType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionStatus")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionApprovalStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionApprovalStatusType"),
    :schema_element => [
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["status", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionBidArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidArrayType"),
    :schema_element => [
      ["liveAuctionBid", ["LiveAuctionBidType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBid")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionBidType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionBidType"),
    :schema_element => [
      ["requestedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RequestedBiddingLimit")], [0, 1]],
      ["bidderStatus", ["BidderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BidderStatus")], [0, 1]],
      ["approvedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ApprovedBiddingLimit")], [0, 1]],
      ["declinedComment", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeclinedComment")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionCatalogType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionCatalogType"),
    :schema_element => [
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["catalogName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CatalogName")], [0, 1]],
      ["schedule", ["ScheduleType[]", XSD::QName.new(NsEBLBaseComponents, "Schedule")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LiveAuctionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LiveAuctionDetailsType"),
    :schema_element => [
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["scheduleID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ScheduleID")], [0, 1]],
      ["lotNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LotNumber")], [0, 1]],
      ["highEstimate", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighEstimate")], [0, 1]],
      ["lowEstimate", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "LowEstimate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalListingDistancesNonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalListingDistancesRegularDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegularDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalListingDistancesSpecialtyDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialtyDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketAdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketContactByEmailEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketNonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketPaymentMethodCheckOutEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketPremiumSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketRegularSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketSellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketSpecialitySubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalMarketStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LocalSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LocalSearchType"),
    :schema_element => [
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => LookupAttributeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LookupAttributeArrayType"),
    :schema_element => [
      ["lookupAttribute", ["LookupAttributeType[]", XSD::QName.new(NsEBLBaseComponents, "LookupAttribute")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LookupAttributeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LookupAttributeType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MarkUpMarkDownEventType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEventType"),
    :schema_element => [
      ["type", ["MarkUpMarkDownEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["time", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Time")], [0, 1]],
      ["reason", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Reason")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MarkUpMarkDownHistoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownHistoryType"),
    :schema_element => [
      ["markUpMarkDownEvent", ["MarkUpMarkDownEventType[]", XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEvent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MaximumBuyerPolicyViolationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumBuyerPolicyViolationsType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["period", ["PeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MaximumItemRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumItemRequirementsType"),
    :schema_element => [
      ["maximumItemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaximumItemCount")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => MaximumUnpaidItemStrikesInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MaximumUnpaidItemStrikesInfoType"),
    :schema_element => [
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Count")], [0, 1]],
      ["period", ["PeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "Period")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MemberMessageExchangeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchangeArrayType"),
    :schema_element => [
      ["memberMessageExchange", ["MemberMessageExchangeType[]", XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MemberMessageExchangeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageExchangeType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["question", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "Question")], [0, 1]],
      ["response", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Response")], [0, nil]],
      ["messageStatus", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageStatus")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["lastModifiedDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedDate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MemberMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MemberMessageType"),
    :schema_element => [
      ["messageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["questionType", ["QuestionTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "QuestionType")], [0, 1]],
      ["emailCopyToSender", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCopyToSender")], [0, 1]],
      ["hideSendersEmailAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideSendersEmailAddress")], [0, 1]],
      ["displayToPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayToPublic")], [0, 1]],
      ["senderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SenderID")], [0, 1]],
      ["senderEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SenderEmail")], [0, 1]],
      ["recipientID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "RecipientID")], [0, nil]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["body", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Body")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["parentMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ParentMessageID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MinimumReservePriceDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MinimumReservePriceDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MotorsLocalMarketEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MotorsLocalMarketEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesAlertArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertArrayType"),
    :schema_element => [
      ["alert", ["MyMessagesAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesAlertIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertIDArrayType"),
    :schema_element => [
      ["alertID", ["[]", XSD::QName.new(NsEBLBaseComponents, "AlertID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesAlertType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertType"),
    :schema_element => [
      ["sender", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Sender")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["priority", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Priority")], [0, 1]],
      ["alertID", [nil, XSD::QName.new(NsEBLBaseComponents, "AlertID")], [0, 1]],
      ["externalAlertID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalAlertID")], [0, 1]],
      ["contentType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContentType")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["resolutionStatus", ["MyMessagesAlertResolutionStatusCode", XSD::QName.new(NsEBLBaseComponents, "ResolutionStatus")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["receiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReceiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationDate")], [0, 1]],
      ["resolutionDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ResolutionDate")], [0, 1]],
      ["lastReadDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastReadDate")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["isTimedResolution", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IsTimedResolution")], [0, 1]],
      ["actionURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ActionURL")], [0, 1]],
      ["responseDetails", ["MyMessagesResponseDetailsType", XSD::QName.new(NsEBLBaseComponents, "ResponseDetails")], [0, 1]],
      ["forwardDetails", ["MyMessagesForwardDetailsType", XSD::QName.new(NsEBLBaseComponents, "ForwardDetails")], [0, 1]],
      ["folder", ["MyMessagesFolderType", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesExternalMessageIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesExternalMessageIDArrayType"),
    :schema_element => [
      ["externalMessageID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesFolderSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderSummaryType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["folderName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, 1]],
      ["newAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewAlertCount")], [0, 1]],
      ["newMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewMessageCount")], [0, 1]],
      ["totalAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAlertCount")], [0, 1]],
      ["totalMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalMessageCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesFolderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["folderName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesForwardDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesForwardDetailsType"),
    :schema_element => [
      ["userForwardDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserForwardDate")], [0, 1]],
      ["forwardMessageEncoding", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ForwardMessageEncoding")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesMessageArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageArrayType"),
    :schema_element => [
      ["message", ["MyMessagesMessageType[]", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesMessageIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageIDArrayType"),
    :schema_element => [
      ["messageID", ["[]", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesMessageType"),
    :schema_element => [
      ["sender", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Sender")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["sendToName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SendToName")], [0, 1]],
      ["subject", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Subject")], [0, 1]],
      ["messageID", [nil, XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["externalMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageID")], [0, 1]],
      ["contentType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContentType")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["flagged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Flagged")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["receiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReceiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationDate")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["responseDetails", ["MyMessagesResponseDetailsType", XSD::QName.new(NsEBLBaseComponents, "ResponseDetails")], [0, 1]],
      ["forwardDetails", ["MyMessagesForwardDetailsType", XSD::QName.new(NsEBLBaseComponents, "ForwardDetails")], [0, 1]],
      ["folder", ["MyMessagesFolderType", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, 1]],
      ["content", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Content")], [0, 1]],
      ["messageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageType")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]],
      ["questionType", ["QuestionTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "QuestionType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesResponseDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesResponseDetailsType"),
    :schema_element => [
      ["responseEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ResponseEnabled")], [0, 1]],
      ["responseURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "ResponseURL")], [0, 1]],
      ["userResponseDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserResponseDate")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyMessagesSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesSummaryType"),
    :schema_element => [
      ["folderSummary", ["MyMessagesFolderSummaryType[]", XSD::QName.new(NsEBLBaseComponents, "FolderSummary")], [0, nil]],
      ["newAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewAlertCount")], [0, 1]],
      ["newMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NewMessageCount")], [0, 1]],
      ["unresolvedAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UnresolvedAlertCount")], [0, 1]],
      ["flaggedMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FlaggedMessageCount")], [0, 1]],
      ["totalAlertCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAlertCount")], [0, 1]],
      ["totalMessageCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalMessageCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBayFavoriteSearchListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSearchListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["favoriteSearch", ["MyeBayFavoriteSearchType[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearch")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBayFavoriteSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSearchType"),
    :schema_element => [
      ["searchName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchName")], [0, 1]],
      ["searchQuery", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchQuery")], [0, 1]],
      ["queryKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "QueryKeywords")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["itemSort", ["SimpleItemSortCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSort")], [0, 1]],
      ["sortOrder", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SortOrder")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["itemType", ["ItemTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemType")], [0, 1]],
      ["priceMax", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PriceMax")], [0, 1]],
      ["priceMin", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PriceMin")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["bidCountMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCountMax")], [0, 1]],
      ["bidCountMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCountMin")], [0, 1]],
      ["searchFlag", ["SearchFlagCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchFlag")], [0, nil]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["preferredLocation", ["PreferredLocationCodeType", XSD::QName.new(NsEBLBaseComponents, "PreferredLocation")], [0, 1]],
      ["sellerID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, nil]],
      ["sellerIDExclude", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SellerIDExclude")], [0, nil]],
      ["itemsAvailableTo", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemsAvailableTo")], [0, 1]],
      ["itemsLocatedIn", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemsLocatedIn")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["condition", ["ItemConditionCodeType", XSD::QName.new(NsEBLBaseComponents, "Condition")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["quantityOperator", ["QuantityOperatorCodeType", XSD::QName.new(NsEBLBaseComponents, "QuantityOperator")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBayFavoriteSellerListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSellerListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["favoriteSeller", ["MyeBayFavoriteSellerType[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteSeller")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBayFavoriteSellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBayFavoriteSellerType"),
    :schema_element => [
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBaySecondChanceOfferListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySecondChanceOfferListType"),
    :schema_element => [
      ["totalAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalAvailable")], [0, 1]],
      ["secondChanceOffer", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBaySelectionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySelectionType"),
    :schema_element => [
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]],
      ["sort", ["SortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["maxResults", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxResults")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => MyeBaySellingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyeBaySellingSummaryType"),
    :schema_element => [
      ["activeAuctionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ActiveAuctionCount")], [0, 1]],
      ["auctionSellingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionSellingCount")], [0, 1]],
      ["auctionBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionBidCount")], [0, 1]],
      ["totalAuctionSellingValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAuctionSellingValue")], [0, 1]],
      ["totalSoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalSoldCount")], [0, 1]],
      ["totalSoldValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalSoldValue")], [0, 1]],
      ["soldDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SoldDurationInDays")], [0, 1]],
      ["classifiedAdCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCount")], [0, 1]],
      ["totalLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalLeadCount")], [0, 1]],
      ["classifiedAdOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdOfferCount")], [0, 1]],
      ["totalListingsWithLeads", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalListingsWithLeads")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NameValueListArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NameValueListArrayType"),
    :schema_element => [
      ["nameValueList", ["NameValueListType[]", XSD::QName.new(NsEBLBaseComponents, "NameValueList")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => NameValueListType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NameValueListType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, nil]],
      ["source", ["ItemSpecificSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "Source")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NonSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NonSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationDetailsArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsArrayType"),
    :schema_element => [
      ["notificationDetails", ["NotificationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "NotificationDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsType"),
    :schema_element => [
      ["deliveryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DeliveryURL")], [0, 1]],
      ["referenceID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferenceID")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["type", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Type")], [0, 1]],
      ["retries", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Retries")], [0, 1]],
      ["deliveryStatus", ["NotificationEventStateCodeType", XSD::QName.new(NsEBLBaseComponents, "DeliveryStatus")], [0, 1]],
      ["nextRetryTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "NextRetryTime")], [0, 1]],
      ["deliveryTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DeliveryTime")], [0, 1]],
      ["errorMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorMessage")], [0, 1]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationEnableArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEnableArrayType"),
    :schema_element => [
      ["notificationEnable", ["NotificationEnableType[]", XSD::QName.new(NsEBLBaseComponents, "NotificationEnable")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationEnableType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEnableType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["eventEnable", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "EventEnable")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationEventPropertyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventPropertyType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["name", ["NotificationEventPropertyNameCodeType", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Value")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationMessageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationMessageType"),
    :schema_basetype => XSD::QName.new(NsEBLBaseComponents, "AbstractResponseType"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageBody", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageBody")], [0, 1]],
      ["eIAS", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIAS")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationStatisticsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationStatisticsType"),
    :schema_element => [
      ["deliveredCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DeliveredCount")], [0, 1]],
      ["queuedNewCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QueuedNewCount")], [0, 1]],
      ["queuedPendingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QueuedPendingCount")], [0, 1]],
      ["expiredCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ExpiredCount")], [0, 1]],
      ["errorCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ErrorCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationUserDataType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationUserDataType"),
    :schema_element => [
      ["sMSSubscription", ["SMSSubscriptionType", XSD::QName.new(NsEBLBaseComponents, "SMSSubscription")], [0, 1]],
      ["summarySchedule", ["SummaryEventScheduleType[]", XSD::QName.new(NsEBLBaseComponents, "SummarySchedule")], [0, nil]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => OfferArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OfferArrayType"),
    :schema_element => [
      ["offer", ["OfferType[]", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OfferType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OfferType"),
    :schema_element => [
      ["action", ["BidActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["maxBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxBid")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["secondChanceEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SecondChanceEnabled")], [0, 1]],
      ["siteCurrency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteCurrency")], [0, 1]],
      ["timeBid", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeBid")], [0, 1]],
      ["highestBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighestBid")], [0, 1]],
      ["convertedPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedPrice")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["user", ["UserType", XSD::QName.new(NsEBLBaseComponents, "User")], [0, 1]],
      ["userConsent", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsent")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderArrayType"),
    :schema_element => [
      ["order", ["OrderType[]", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderIDArrayType"),
    :schema_element => [
      ["orderID", ["[]", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderTransactionArrayType"),
    :schema_element => [
      ["orderTransaction", ["OrderTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "OrderTransaction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderTransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderTransactionType"),
    :schema_element => [
      ["order", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["transaction", ["TransactionType", XSD::QName.new(NsEBLBaseComponents, "Transaction")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderType"),
    :schema_element => [
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["orderStatus", ["OrderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderStatus")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["amountSaved", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountSaved")], [0, 1]],
      ["checkoutStatus", ["CheckoutStatusType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["creatingUserRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "CreatingUserRole")], [0, 1]],
      ["createdTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedTime")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["sellerEmail", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerEmail")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["shippingServiceSelected", ["ShippingServiceOptionsType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceSelected")], [0, 1]],
      ["subtotal", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Subtotal")], [0, 1]],
      ["total", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Total")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, nil]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["buyerUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "BuyerUserID")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaginatedItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedItemArrayType"),
    :schema_element => [
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaginatedOrderTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedOrderTransactionArrayType"),
    :schema_element => [
      ["orderTransactionArray", ["OrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderTransactionArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaginatedTransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginatedTransactionArrayType"),
    :schema_element => [
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => PaginationResultType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaginationResultType"),
    :schema_element => [
      ["totalNumberOfPages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNumberOfPages")], [0, 1]],
      ["totalNumberOfEntries", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNumberOfEntries")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaisaPayFullEscrowEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PayPalBuyerProtectionEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PayPalRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PayPalRequiredForStoreOwnerDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwnerDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaymentDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentDetailsType"),
    :schema_element => [
      ["hoursToDeposit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "HoursToDeposit")], [0, 1]],
      ["daysToFullPayment", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DaysToFullPayment")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PaymentOptionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentOptionDetailsType"),
    :schema_element => [
      ["paymentOption", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureDetailsType"),
    :schema_element => [
      ["galleryType", ["GalleryTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "GalleryType")], [0, 1]],
      ["galleryURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "GalleryURL")], [0, 1]],
      ["photoDisplay", ["PhotoDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "PhotoDisplay")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPAnyURI[]", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, nil]],
      ["pictureSource", ["PictureSourceCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSource")], [0, 1]],
      ["galleryDuration", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "GalleryDuration")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureManagerDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailsType"),
    :schema_element => [
      ["subscriptionLevel", ["PictureManagerSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["storageUsed", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "StorageUsed")], [0, 1]],
      ["totalStorageAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalStorageAvailable")], [0, 1]],
      ["keepOriginal", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "KeepOriginal")], [0, 1]],
      ["watermarkEPS", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "WatermarkEPS")], [0, 1]],
      ["watermarkUserID", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "WatermarkUserID")], [0, 1]],
      ["folder", ["PictureManagerFolderType[]", XSD::QName.new(NsEBLBaseComponents, "Folder")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureManagerFolderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerFolderType"),
    :schema_element => [
      ["folderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["picture", ["PictureManagerPictureType[]", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureManagerPictureDisplayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureDisplayType"),
    :schema_element => [
      ["displayType", ["PictureManagerPictureDisplayTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayType")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["size", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Size")], [0, 1]],
      ["height", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Height")], [0, 1]],
      ["width", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Width")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureManagerPictureType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureType"),
    :schema_element => [
      ["pictureURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["date", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Date")], [0, 1]],
      ["displayFormat", ["PictureManagerPictureDisplayType[]", XSD::QName.new(NsEBLBaseComponents, "DisplayFormat")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureManagerSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerSubscriptionType"),
    :schema_element => [
      ["subscriptionLevel", ["PictureManagerSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["storageSize", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "StorageSize")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PictureSetMemberType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSetMemberType"),
    :schema_element => [
      ["memberURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "MemberURL")], [0, 1]],
      ["pictureHeight", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureHeight")], [0, 1]],
      ["pictureWidth", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureWidth")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PolicyComplianceDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PolicyComplianceDashboardType"),
    :schema_element => [
      ["status", ["PolicyComplianceStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PowerSellerDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PowerSellerDashboardType"),
    :schema_element => [
      ["level", ["SellerLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "Level")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PremiumSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PremiumSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PriceRangeFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PriceRangeFilterType"),
    :schema_element => [
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PricingRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PricingRecommendationsType"),
    :schema_element => [
      ["productInfo", ["ProductInfoType", XSD::QName.new(NsEBLBaseComponents, "ProductInfo")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ProPackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProPackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProPackPlusEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProStoresCheckoutPreferenceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProStoresCheckoutPreferenceType"),
    :schema_element => [
      ["checkoutRedirectProStores", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutRedirectProStores")], [0, 1]],
      ["proStoresDetails", ["ProStoresDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ProStoresDetails")], [0, 0]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProStoresDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProStoresDetailsType"),
    :schema_element => [
      ["sellerThirdPartyUsername", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerThirdPartyUsername")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["status", ["EnableCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductFamilyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductFamilyType"),
    :schema_element => [
      ["parentProduct", ["ProductType", XSD::QName.new(NsEBLBaseComponents, "ParentProduct")], [0, 1]],
      ["familyMembers", ["ProductType[]", XSD::QName.new(NsEBLBaseComponents, "FamilyMembers")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "hasMoreChildren") => "SOAP::SOAPBoolean"
    }
  )

  LiteralRegistry.register(
    :class => ProductFinderConstraintType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductFinderConstraintType"),
    :schema_element => [
      ["displayName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayName")], [0, 1]],
      ["displayValue", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DisplayValue")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductInfoType"),
    :schema_element => [
      ["averageStartPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AverageStartPrice")], [0, 1]],
      ["averageSoldPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AverageSoldPrice")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["productState", ["ProductStateCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductState")], [0, 1]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "productInfoID") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => ProductListingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductListingDetailsType"),
    :schema_element => [
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["includeStockPhotoURL", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeStockPhotoURL")], [0, 1]],
      ["includePrefilledItemInformation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludePrefilledItemInformation")], [0, 1]],
      ["useStockPhotoURLAsGallery", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UseStockPhotoURLAsGallery")], [0, 1]],
      ["stockPhotoURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StockPhotoURL")], [0, 1]],
      ["copyright", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Copyright")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductRecommendationsType"),
    :schema_element => [
      ["product", ["ProductInfoType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductSearchPageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchPageType"),
    :schema_element => [
      ["searchCharacteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "SearchCharacteristicsSet")], [0, 1]],
      ["searchType", ["CharacteristicsSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["sortCharacteristics", ["CharacteristicType[]", XSD::QName.new(NsEBLBaseComponents, "SortCharacteristics")], [0, nil]],
      ["dataElementSet", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSet")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductSearchResultType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchResultType"),
    :schema_element => [
      ["iD", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ID")], [0, 1]],
      ["numProducts", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NumProducts")], [0, 1]],
      ["attributeSet", ["ResponseAttributeSetType[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSet")], [0, nil]],
      ["displayStockPhotos", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayStockPhotos")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductSearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSearchType"),
    :schema_element => [
      ["productSearchID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductSearchID")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")]],
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["sortAttributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SortAttributeID")], [0, 1]],
      ["maxChildrenPerFamily", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxChildrenPerFamily")], [0, 1]],
      ["searchAttributes", ["SearchAttributesType[]", XSD::QName.new(NsEBLBaseComponents, "SearchAttributes")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["availableItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AvailableItemsOnly")], [0, 1]],
      ["queryKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "QueryKeywords")], [0, 1]],
      ["characteristicSetIDs", ["CharacteristicSetIDsType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicSetIDs")], [0, 1]],
      ["productReferenceID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductReferenceID")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProductType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductType"),
    :schema_element => [
      ["characteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSet")], [0, 1]],
      ["detailsURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "DetailsURL")], [0, 1]],
      ["numItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumItems")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "productID") => "SOAP::SOAPString",
      XSD::QName.new(nil, "stockPhotoURL") => "SOAP::SOAPAnyURI",
      XSD::QName.new(nil, "title") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => PromotedItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotedItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["position", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Position")], [0, 1]],
      ["selectionType", ["PromotionItemSelectionCodeType", XSD::QName.new(NsEBLBaseComponents, "SelectionType")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["promotionDetails", ["PromotionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionDetails")], [0, nil]],
      ["timeLeft", ["SOAP::SOAPDuration", XSD::QName.new(NsEBLBaseComponents, "TimeLeft")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionDetailsType"),
    :schema_element => [
      ["promotionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PromotionPrice")], [0, 1]],
      ["promotionPriceType", ["PromotionItemPriceTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionPriceType")], [0, 1]],
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["convertedPromotionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedPromotionPrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionRuleArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionRuleArrayType"),
    :schema_element => [
      ["promotionRule", ["PromotionRuleType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionRule")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionRuleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionRuleType"),
    :schema_element => [
      ["promotedStoreCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotedStoreCategoryID")], [0, 1]],
      ["promotedeBayCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotedeBayCategoryID")], [0, 1]],
      ["promotedKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotedKeywords")], [0, 1]],
      ["referringItemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ReferringItemID")], [0, 1]],
      ["referringStoreCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReferringStoreCategoryID")], [0, 1]],
      ["referringeBayCategoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferringeBayCategoryID")], [0, 1]],
      ["referringKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReferringKeywords")], [0, 1]],
      ["promotionScheme", ["PromotionSchemeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionScheme")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionalSaleArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleArrayType"),
    :schema_element => [
      ["promotionalSale", ["PromotionalSaleType[]", XSD::QName.new(NsEBLBaseComponents, "PromotionalSale")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionalSaleDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetailsType"),
    :schema_element => [
      ["originalPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OriginalPrice")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionalSaleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleType"),
    :schema_element => [
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]],
      ["promotionalSaleName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleName")], [0, 1]],
      ["promotionalSaleItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleItemIDArray")], [0, 1]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["discountType", ["DiscountCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountType")], [0, 1]],
      ["discountValue", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "DiscountValue")], [0, 1]],
      ["promotionalSaleStartTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleStartTime")], [0, 1]],
      ["promotionalSaleEndTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleEndTime")], [0, 1]],
      ["promotionalSaleType", ["PromotionalSaleTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => PromotionalShippingDiscountDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetailsType"),
    :schema_element => [
      ["discountName", ["DiscountNameCodeType", XSD::QName.new(NsEBLBaseComponents, "DiscountName")], [0, 1]],
      ["shippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingCost")], [0, 1]],
      ["orderAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "OrderAmount")], [0, 1]],
      ["itemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ProximitySearchType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProximitySearchType"),
    :schema_element => [
      ["maxDistance", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxDistance")]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PostalCode")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReasonCodeDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReasonCodeDetailType"),
    :schema_element => [
      ["briefText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BriefText")], [0, 1]],
      ["detailedText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DetailedText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ],
    :schema_attribute => {
      XSD::QName.new(nil, "codeID") => "SOAP::SOAPLong"
    }
  )

  LiteralRegistry.register(
    :class => RefundArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundArrayType"),
    :schema_element => [
      ["refund", ["RefundType[]", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => RefundDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundDetailsType"),
    :schema_element => [
      ["refundOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "RefundOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RefundType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundType"),
    :schema_element => [
      ["refundFromSeller", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundFromSeller")], [0, 1]],
      ["totalRefundToBuyer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalRefundToBuyer")], [0, 1]],
      ["refundTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RegionDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegionDetailsType"),
    :schema_element => [
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RegionOfOriginDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegionOfOriginDetailsType"),
    :schema_element => [
      ["regionOfOrigin", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionOfOrigin")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["status", ["StatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RegularSubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RegularSubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RelatedSearchKeywordArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArrayType"),
    :schema_element => [
      ["keyword", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Keyword")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReminderCustomizationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReminderCustomizationType"),
    :schema_element => [
      ["durationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DurationInDays")], [0, 1]],
      ["include", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Include")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RemindersType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RemindersType"),
    :schema_element => [
      ["paymentToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentToSendCount")], [0, 1]],
      ["feedbackToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackToReceiveCount")], [0, 1]],
      ["feedbackToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackToSendCount")], [0, 1]],
      ["outbidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "OutbidCount")], [0, 1]],
      ["paymentToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentToReceiveCount")], [0, 1]],
      ["secondChanceOfferCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOfferCount")], [0, 1]],
      ["shippingNeededCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingNeededCount")], [0, 1]],
      ["relistingNeededCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RelistingNeededCount")], [0, 1]],
      ["totalNewLeadsCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalNewLeadsCount")], [0, 1]],
      ["docsForCCProcessingToSendCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DocsForCCProcessingToSendCount")], [0, 1]],
      ["rTEToProcessCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RTEToProcessCount")], [0, 1]],
      ["itemReceiptToConfirmCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemReceiptToConfirmCount")], [0, 1]],
      ["refundOnHoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundOnHoldCount")], [0, 1]],
      ["refundCancelledCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundCancelledCount")], [0, 1]],
      ["shippingDetailsToBeProvidedCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingDetailsToBeProvidedCount")], [0, 1]],
      ["itemReceiptConfirmationToReceiveCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemReceiptConfirmationToReceiveCount")], [0, 1]],
      ["refundInitiatedCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RefundInitiatedCount")], [0, 1]],
      ["pendingRTERequestCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PendingRTERequestCount")], [0, 1]],
      ["declinedRTERequestCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "DeclinedRTERequestCount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RequestCategoriesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RequestCategoriesType"),
    :schema_element => [
      ["categoriesOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoriesOnly")], [0, 1]],
      ["maxCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategories")], [0, 1]],
      ["maxSubcategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxSubcategories")], [0, 1]],
      ["levels", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Levels")], [0, 1]],
      ["demandData", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DemandData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ResponseAttributeSetType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ResponseAttributeSetType"),
    :schema_element => [
      ["approximatePages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ApproximatePages")]],
      ["attributeSetID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")]],
      ["productFamilies", ["ProductFamilyType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFamilies")], [0, nil]],
      ["productFinderConstraints", ["ProductFinderConstraintType[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderConstraints")], [0, nil]],
      ["tooManyMatchesFound", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TooManyMatchesFound")]],
      ["totalProducts", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalProducts")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReturnPolicyDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyDetailsType"),
    :schema_element => [
      ["refund", ["RefundDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, nil]],
      ["returnsWithin", ["ReturnsWithinDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithin")], [0, nil]],
      ["returnsAccepted", ["ReturnsAcceptedDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ReturnsAccepted")], [0, nil]],
      ["description", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["warrantyOffered", ["WarrantyOfferedDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyOffered")], [0, nil]],
      ["warrantyType", ["WarrantyTypeDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyType")], [0, nil]],
      ["warrantyDuration", ["WarrantyDurationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "WarrantyDuration")], [0, nil]],
      ["eAN", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EAN")], [0, 1]],
      ["shippingCostPaidBy", ["ShippingCostPaidByDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidBy")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReturnPolicyEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReturnPolicyType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyType"),
    :schema_element => [
      ["refundOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "RefundOption")], [0, 1]],
      ["refund", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Refund")], [0, 1]],
      ["returnsWithinOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOption")], [0, 1]],
      ["returnsWithin", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithin")], [0, 1]],
      ["returnsAcceptedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOption")], [0, 1]],
      ["returnsAccepted", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ReturnsAccepted")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["warrantyOfferedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedOption")], [0, 1]],
      ["warrantyOffered", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyOffered")], [0, 1]],
      ["warrantyTypeOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOption")], [0, 1]],
      ["warrantyType", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyType")], [0, 1]],
      ["warrantyDurationOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOption")], [0, 1]],
      ["warrantyDuration", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "WarrantyDuration")], [0, 1]],
      ["eAN", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EAN")], [0, 1]],
      ["shippingCostPaidByOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOption")], [0, 1]],
      ["shippingCostPaidBy", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidBy")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReturnsAcceptedDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedDetailsType"),
    :schema_element => [
      ["returnsAcceptedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReturnsWithinDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinDetailsType"),
    :schema_element => [
      ["returnsWithinOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviewDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviewDetailsType"),
    :schema_element => [
      ["averageRating", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "AverageRating")], [0, 1]],
      ["review", ["ReviewType[]", XSD::QName.new(NsEBLBaseComponents, "Review")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviewType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviewType"),
    :schema_element => [
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["rating", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Rating")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["creationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RevisePriceAllowedDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowedDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseQuantityAllowedDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowedDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReviseStatusType"),
    :schema_element => [
      ["itemRevised", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ItemRevised")]],
      ["buyItNowAdded", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowAdded")], [0, 1]],
      ["buyItNowLowered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowLowered")], [0, 1]],
      ["reserveLowered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveLowered")], [0, 1]],
      ["reserveRemoved", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveRemoved")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SIFFTASRecommendationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SIFFTASRecommendationsType"),
    :schema_element => [
      ["attributeSetArray", ["AttributeSetArrayType", XSD::QName.new(NsEBLBaseComponents, "AttributeSetArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SKUArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SKUArrayType"),
    :schema_element => [
      ["sKU", ["[]", XSD::QName.new(NsEBLBaseComponents, "SKU")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SMSSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionType"),
    :schema_element => [
      ["sMSPhone", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SMSPhone")], [0, 1]],
      ["userStatus", ["SMSSubscriptionUserStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "UserStatus")], [0, 1]],
      ["carrierID", ["WirelessCarrierIDCodeType", XSD::QName.new(NsEBLBaseComponents, "CarrierID")], [0, 1]],
      ["errorCode", ["SMSSubscriptionErrorCodeCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorCode")], [0, 1]],
      ["itemToUnsubscribe", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemToUnsubscribe")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SafePaymentRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SalesTaxType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SalesTaxType"),
    :schema_element => [
      ["salesTaxPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "SalesTaxPercent")], [0, 1]],
      ["salesTaxState", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SalesTaxState")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["salesTaxAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "SalesTaxAmount")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ScheduleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ScheduleType"),
    :schema_element => [
      ["scheduleID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ScheduleID")], [0, 1]],
      ["scheduleTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ScheduleTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SchedulingInfoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SchedulingInfoType"),
    :schema_element => [
      ["maxScheduledMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxScheduledMinutes")], [0, 1]],
      ["minScheduledMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinScheduledMinutes")], [0, 1]],
      ["maxScheduledItems", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxScheduledItems")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchAttributesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchAttributesType"),
    :schema_element => [
      ["attributeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AttributeID")]],
      ["dateSpecifier", ["DateSpecifierCodeType", XSD::QName.new(NsEBLBaseComponents, "DateSpecifier")], [0, 1]],
      ["rangeSpecifier", ["RangeCodeType", XSD::QName.new(NsEBLBaseComponents, "RangeSpecifier")], [0, 1]],
      ["valueList", ["ValType[]", XSD::QName.new(NsEBLBaseComponents, "ValueList")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchDetailsType"),
    :schema_element => [
      ["buyItNowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyItNowEnabled")], [0, 1]],
      ["picture", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Picture")], [0, 1]],
      ["recentListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RecentListing")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchLocationFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchLocationFilterType"),
    :schema_element => [
      ["countryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "CountryCode")], [0, 1]],
      ["itemLocation", ["ItemLocationCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemLocation")], [0, 1]],
      ["searchLocation", ["SearchLocationType", XSD::QName.new(NsEBLBaseComponents, "SearchLocation")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchLocationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchLocationType"),
    :schema_element => [
      ["regionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RegionID")], [0, 1]],
      ["siteLocation", ["SiteLocationType", XSD::QName.new(NsEBLBaseComponents, "SiteLocation")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchRequestType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchRequestType"),
    :schema_element => [
      ["productFinderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, 1]],
      ["searchAttributes", ["SearchAttributesType[]", XSD::QName.new(NsEBLBaseComponents, "SearchAttributes")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchResultItemArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultItemArrayType"),
    :schema_element => [
      ["searchResultItem", ["SearchResultItemType[]", XSD::QName.new(NsEBLBaseComponents, "SearchResultItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchResultItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultItemType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["itemSpecific", ["NameValueListArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecific")], [0, 1]],
      ["searchResultValues", ["SearchResultValuesCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchResultValues")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchStandingDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStandingDashboardType"),
    :schema_element => [
      ["status", ["SearchStandingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SearchStoreFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStoreFilterType"),
    :schema_element => [
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["storeSearch", ["StoreSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "StoreSearch")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerAccountDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerAccountDashboardType"),
    :schema_element => [
      ["status", ["SellerAccountStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["alert", ["SellerDashboardAlertType[]", XSD::QName.new(NsEBLBaseComponents, "Alert")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerDashboardAlertType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerDashboardAlertType"),
    :schema_element => [
      ["severity", ["SellerDashboardAlertSeverityCodeType", XSD::QName.new(NsEBLBaseComponents, "Severity")], [0, 1]],
      ["text", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerFavoriteItemPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferencesType"),
    :schema_element => [
      ["searchKeywords", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SearchKeywords")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["searchSortOrder", ["StoreItemListSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchSortOrder")], [0, 1]],
      ["minPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinPrice")], [0, 1]],
      ["maxPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MaxPrice")], [0, 1]],
      ["favoriteItemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "FavoriteItemID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerFeeDiscountDashboardType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerFeeDiscountDashboardType"),
    :schema_element => [
      ["percent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "Percent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerPaymentPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferencesType"),
    :schema_element => [
      ["alwaysUseThisPaymentAddress", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AlwaysUseThisPaymentAddress")], [0, 1]],
      ["displayPayNowButton", ["DisplayPayNowButtonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayPayNowButton")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]],
      ["defaultPayPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DefaultPayPalEmailAddress")], [0, 1]],
      ["payPalAlwaysOn", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalAlwaysOn")], [0, 1]],
      ["sellerPaymentAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentAddress")], [0, 1]],
      ["uPSRateOption", ["UPSRateOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "UPSRateOption")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerPaymentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]],
      ["privateNotes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PrivateNotes")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]],
      ["paymentType", ["PaymentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentType")], [0, 1]],
      ["transactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TransactionPrice")], [0, 1]],
      ["shippingReimbursement", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingReimbursement")], [0, 1]],
      ["commission", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Commission")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerRatingSummaryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerRatingSummaryArrayType"),
    :schema_element => [
      ["averageRatingSummary", ["AverageRatingSummaryType[]", XSD::QName.new(NsEBLBaseComponents, "AverageRatingSummary")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerRoleMetricsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerRoleMetricsType"),
    :schema_element => [
      ["positiveFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackLeftCount")], [0, 1]],
      ["negativeFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NegativeFeedbackLeftCount")], [0, 1]],
      ["neutralFeedbackLeftCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NeutralFeedbackLeftCount")], [0, 1]],
      ["feedbackLeftPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeftPercent")], [0, 1]],
      ["repeatBuyerCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "RepeatBuyerCount")], [0, 1]],
      ["repeatBuyerPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "RepeatBuyerPercent")], [0, 1]],
      ["uniqueBuyerCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueBuyerCount")], [0, 1]],
      ["transactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "TransactionPercent")], [0, 1]],
      ["crossBorderTransactionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTransactionCount")], [0, 1]],
      ["crossBorderTransactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTransactionPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerType"),
    :schema_element => [
      ["paisaPayStatus", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaisaPayStatus")], [0, 1]],
      ["allowPaymentEdit", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllowPaymentEdit")]],
      ["billingCurrency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "BillingCurrency")], [0, 1]],
      ["checkoutEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CheckoutEnabled")]],
      ["cIPBankAccountStored", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CIPBankAccountStored")]],
      ["goodStanding", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GoodStanding")]],
      ["liveAuctionAuthorized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionAuthorized")]],
      ["merchandizingPref", ["MerchandizingPrefCodeType", XSD::QName.new(NsEBLBaseComponents, "MerchandizingPref")], [0, 1]],
      ["qualifiesForB2BVAT", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "QualifiesForB2BVAT")]],
      ["sellerGuaranteeLevel", ["SellerGuaranteeLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeLevel")], [0, 1]],
      ["sellerLevel", ["SellerLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerLevel")], [0, 1]],
      ["sellerPaymentAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentAddress")], [0, 1]],
      ["schedulingInfo", ["SchedulingInfoType", XSD::QName.new(NsEBLBaseComponents, "SchedulingInfo")], [0, 1]],
      ["storeOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwner")]],
      ["storeURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StoreURL")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["registeredBusinessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RegisteredBusinessSeller")], [0, 1]],
      ["storeSite", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "StoreSite")], [0, 1]],
      ["paymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["proStoresPreference", ["ProStoresCheckoutPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ProStoresPreference")], [0, 1]],
      ["charityRegistered", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CharityRegistered")], [0, 1]],
      ["safePaymentExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentExempt")], [0, 1]],
      ["paisaPayEscrowEMIStatus", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaisaPayEscrowEMIStatus")], [0, 1]],
      ["charityAffiliationDetails", ["CharityAffiliationDetailsType", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationDetails")], [0, 1]],
      ["transactionPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "TransactionPercent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellingManagerProductDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingManagerProductDetailsType"),
    :schema_element => [
      ["productName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductName")], [0, 1]],
      ["partNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PartNumber")], [0, 1]],
      ["productPartNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductPartNumber")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["customLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CustomLabel")], [0, 1]],
      ["quantityAvailable", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityAvailable")], [0, 1]],
      ["unitCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "UnitCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellingStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingStatusType"),
    :schema_element => [
      ["bidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "BidCount")], [0, 1]],
      ["bidIncrement", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BidIncrement")], [0, 1]],
      ["convertedCurrentPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedCurrentPrice")], [0, 1]],
      ["currentPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CurrentPrice")], [0, 1]],
      ["highBidder", ["UserType", XSD::QName.new(NsEBLBaseComponents, "HighBidder")], [0, 1]],
      ["leadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LeadCount")], [0, 1]],
      ["minimumToBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "MinimumToBid")], [0, 1]],
      ["quantitySold", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantitySold")], [0, 1]],
      ["reserveMet", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReserveMet")], [0, 1]],
      ["secondChanceEligible", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SecondChanceEligible")], [0, 1]],
      ["bidderCount", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "BidderCount")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]],
      ["finalValueFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FinalValueFee")], [0, 1]],
      ["promotionalSaleDetails", ["PromotionalSaleDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]],
      ["adminEnded", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdminEnded")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellingSummaryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellingSummaryType"),
    :schema_element => [
      ["activeAuctionCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ActiveAuctionCount")], [0, 1]],
      ["auctionSellingCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionSellingCount")], [0, 1]],
      ["auctionBidCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AuctionBidCount")], [0, 1]],
      ["totalAuctionSellingValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalAuctionSellingValue")], [0, 1]],
      ["totalSoldCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalSoldCount")], [0, 1]],
      ["totalSoldValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalSoldValue")], [0, 1]],
      ["soldDurationInDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SoldDurationInDays")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ShipmentType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentType"),
    :schema_element => [
      ["estimatedDeliveryDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EstimatedDeliveryDate")], [0, 1]],
      ["insuredValue", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuredValue")], [0, 1]],
      ["packageDepth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageDepth")], [0, 1]],
      ["packageLength", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageLength")], [0, 1]],
      ["packageWidth", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "PackageWidth")], [0, 1]],
      ["payPalShipmentID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalShipmentID")], [0, 1]],
      ["shipmentID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ShipmentID")], [0, 1]],
      ["postageTotal", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "PostageTotal")], [0, 1]],
      ["printedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PrintedTime")], [0, 1]],
      ["shipFromAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShipFromAddress")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["shippingCarrierUsed", ["ShippingCarrierCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierUsed")], [0, 1]],
      ["shippingFeature", ["ShippingFeatureCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingFeature")], [0, nil]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["shippingServiceUsed", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceUsed")], [0, 1]],
      ["shipmentTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackingNumber")], [0, 1]],
      ["weightMajor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMajor")], [0, 1]],
      ["weightMinor", ["MeasureType", XSD::QName.new(NsEBLBaseComponents, "WeightMinor")], [0, 1]],
      ["itemTransactionID", ["ItemTransactionIDType[]", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionID")], [0, nil]],
      ["deliveryDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "DeliveryDate")], [0, 1]],
      ["deliveryStatus", ["ShipmentDeliveryStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "DeliveryStatus")], [0, 1]],
      ["refundGrantedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundGrantedTime")], [0, 1]],
      ["refundRequestedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RefundRequestedTime")], [0, 1]],
      ["status", ["ShipmentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingCarrierDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierDetailsType"),
    :schema_element => [
      ["shippingCarrierID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["shippingCarrier", ["ShippingCarrierCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrier")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingCostPaidByDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByDetailsType"),
    :schema_element => [
      ["shippingCostPaidByOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingDetailsType"),
    :schema_element => [
      ["allowPaymentEdit", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllowPaymentEdit")], [0, 1]],
      ["applyShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApplyShippingDiscount")], [0, 1]],
      ["calculatedShippingRate", ["CalculatedShippingRateType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRate")], [0, 1]],
      ["changePaymentInstructions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ChangePaymentInstructions")], [0, 1]],
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["insuranceWanted", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InsuranceWanted")], [0, 1]],
      ["paymentEdited", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaymentEdited")], [0, 1]],
      ["paymentInstructions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PaymentInstructions")], [0, 1]],
      ["salesTax", ["SalesTaxType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["shippingRateErrorMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingRateErrorMessage")], [0, 1]],
      ["shippingRateType", ["ShippingRateTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingRateType")], [0, 1]],
      ["shippingServiceOptions", ["ShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptions")], [0, nil]],
      ["internationalShippingServiceOption", ["InternationalShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOption")], [0, nil]],
      ["shippingType", ["ShippingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingType")], [0, 1]],
      ["sellingManagerSalesRecordNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SellingManagerSalesRecordNumber")], [0, 1]],
      ["thirdPartyCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ThirdPartyCheckout")], [0, 1]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]],
      ["getItFast", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "GetItFast")], [0, 1]],
      ["shipmentTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackingNumber")], [0, 1]],
      ["shippingServiceUsed", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceUsed")], [0, 1]],
      ["defaultShippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DefaultShippingCost")], [0, 1]],
      ["insuranceDetails", ["InsuranceDetailsType", XSD::QName.new(NsEBLBaseComponents, "InsuranceDetails")], [0, 1]],
      ["internationalInsuranceDetails", ["InsuranceDetailsType", XSD::QName.new(NsEBLBaseComponents, "InternationalInsuranceDetails")], [0, 1]],
      ["shippingDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingDiscountProfileID")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscount")], [0, 1]],
      ["internationalShippingDiscountProfileID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingDiscountProfileID")], [0, 1]],
      ["internationalFlatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "InternationalFlatShippingDiscount")], [0, 1]],
      ["internationalCalculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "InternationalCalculatedShippingDiscount")], [0, 1]],
      ["internationalPromotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InternationalPromotionalShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingInsuranceType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceType"),
    :schema_element => [
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["flatRateInsuranceRangeCost", ["FlatRateInsuranceRangeCostType[]", XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCost")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingLocationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingLocationDetailsType"),
    :schema_element => [
      ["shippingLocation", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingLocation")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingPackageDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingPackageDetailsType"),
    :schema_element => [
      ["packageID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PackageID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["shippingPackage", ["ShippingPackageCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, 1]],
      ["default", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Default")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingServiceDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceDetailsType"),
    :schema_element => [
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["expeditedService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpeditedService")], [0, 1]],
      ["internationalService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "InternationalService")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceID")], [0, 1]],
      ["shippingTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMax")], [0, 1]],
      ["shippingTimeMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMin")], [0, 1]],
      ["shippingServiceCode", ["ShippingServiceCodeType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCode")], [0, 1]],
      ["serviceType", ["ShippingTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ServiceType")], [0, nil]],
      ["shippingPackage", ["ShippingPackageCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingPackage")], [0, nil]],
      ["dimensionsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DimensionsRequired")], [0, 1]],
      ["validForSellingFlow", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValidForSellingFlow")], [0, 1]],
      ["surchargeApplicable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SurchargeApplicable")], [0, 1]],
      ["shippingCarrier", ["ShippingCarrierCodeType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrier")], [0, nil]],
      ["cODService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CODService")], [0, 1]],
      ["deprecationDetails", ["AnnouncementMessageType[]", XSD::QName.new(NsEBLBaseComponents, "DeprecationDetails")], [0, nil]],
      ["mappedToShippingServiceID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MappedToShippingServiceID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingServiceOptionsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptionsType"),
    :schema_element => [
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingServiceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCost")], [0, 1]],
      ["shippingServiceAdditionalCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceAdditionalCost")], [0, 1]],
      ["shippingServicePriority", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingServicePriority")], [0, 1]],
      ["expeditedService", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpeditedService")], [0, 1]],
      ["shippingTimeMin", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMin")], [0, 1]],
      ["shippingTimeMax", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ShippingTimeMax")], [0, 1]],
      ["shippingSurcharge", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingSurcharge")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ShippingTermRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingTermRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SiteDefaultsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteDefaultsType"),
    :schema_element => [
      ["listingDuration", ["ListingDurationReferenceType[]", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")], [0, nil]],
      ["shippingTermsRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingTermsRequired")], [0, 1]],
      ["bestOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferEnabled")], [0, 1]],
      ["dutchBINEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DutchBINEnabled")], [0, 1]],
      ["userConsentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserConsentRequired")], [0, 1]],
      ["homePageFeaturedEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HomePageFeaturedEnabled")], [0, 1]],
      ["proPackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackEnabled")], [0, 1]],
      ["basicUpgradePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BasicUpgradePackEnabled")], [0, 1]],
      ["valuePackEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabled")], [0, 1]],
      ["proPackPlusEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ProPackPlusEnabled")], [0, 1]],
      ["adFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabled")], [0, 1]],
      ["bestOfferCounterEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferCounterEnabled")], [0, 1]],
      ["bestOfferAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoDeclineEnabled")], [0, 1]],
      ["localMarketSpecialitySubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSpecialitySubscription")], [0, 1]],
      ["localMarketRegularSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketRegularSubscription")], [0, 1]],
      ["localMarketPremiumSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPremiumSubscription")], [0, 1]],
      ["localMarketNonSubscription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketNonSubscription")], [0, 1]],
      ["expressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressEnabled")], [0, 1]],
      ["expressPicturesRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressPicturesRequired")], [0, 1]],
      ["expressConditionRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressConditionRequired")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["sellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactDetailsEnabled")], [0, 1]],
      ["transactionConfirmationRequestEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TransactionConfirmationRequestEnabled")], [0, 1]],
      ["storeInventoryEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabled")], [0, 1]],
      ["skypeMeTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabled")], [0, 1]],
      ["skypeMeNonTransactionalEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabled")], [0, 1]],
      ["localListingDistancesRegular", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesRegular")], [0, 1]],
      ["localListingDistancesSpecialty", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesSpecialty")], [0, 1]],
      ["localListingDistancesNonSubscription", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalListingDistancesNonSubscription")], [0, 1]],
      ["classifiedAdPaymentMethodEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabled")], [0, 1]],
      ["classifiedAdShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdShippingMethodEnabled")], [0, 1]],
      ["classifiedAdBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabled")], [0, 1]],
      ["classifiedAdCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCounterOfferEnabled")], [0, 1]],
      ["classifiedAdAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoDeclineEnabled")], [0, 1]],
      ["classifiedAdContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByPhoneEnabled")], [0, 1]],
      ["classifiedAdContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByEmailEnabled")], [0, 1]],
      ["safePaymentRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SafePaymentRequired")], [0, 1]],
      ["classifiedAdPayPerLeadEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPayPerLeadEnabled")], [0, 1]],
      ["itemSpecificsEnabled", ["ItemSpecificsEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabled")], [0, 1]],
      ["paisaPayFullEscrowEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PaisaPayFullEscrowEnabled")], [0, 1]],
      ["classifiedAdAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdAutoAcceptEnabled")], [0, 1]],
      ["bestOfferAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferAutoAcceptEnabled")], [0, 1]],
      ["crossBorderTradeNorthAmericaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeNorthAmericaEnabled")], [0, 1]],
      ["crossBorderTradeGBEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeGBEnabled")], [0, 1]],
      ["crossBorderTradeAustraliaEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CrossBorderTradeAustraliaEnabled")], [0, 1]],
      ["payPalBuyerProtectionEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalBuyerProtectionEnabled")], [0, 1]],
      ["buyerGuaranteeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteeEnabled")], [0, 1]],
      ["iNEscrowWorkflowTimeline", ["INEscrowWorkflowTimelineCodeType", XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimeline")], [0, 1]],
      ["combinedFixedPriceTreatmentEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CombinedFixedPriceTreatmentEnabled")], [0, 1]],
      ["galleryFeaturedDurations", ["ListingEnhancementDurationReferenceType", XSD::QName.new(NsEBLBaseComponents, "GalleryFeaturedDurations")], [0, 1]],
      ["payPalRequired", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequired")], [0, 1]],
      ["eBayMotorsProAdFormatEnabled", "AdFormatEnabledCodeType", [0, 1]],
      ["eBayMotorsProContactByPhoneEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPhoneCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProContactByAddressEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProStreetCount", "SOAP::SOAPInt", [0, 1]],
      ["eBayMotorsProCompanyNameEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProContactByEmailEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProBestOfferEnabled", "ClassifiedAdBestOfferEnabledCodeType", [0, 1]],
      ["eBayMotorsProAutoAcceptEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProAutoDeclineEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProPaymentMethodCheckOutEnabled", "ClassifiedAdPaymentMethodEnabledCodeType", [0, 1]],
      ["eBayMotorsProShippingMethodEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProCounterOfferEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["eBayMotorsProSellerContactDetailsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["localMarketAdFormatEnabled", ["AdFormatEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAdFormatEnabled")], [0, 1]],
      ["localMarketContactByPhoneEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByPhoneEnabled")], [0, 1]],
      ["localMarketPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPhoneCount")], [0, 1]],
      ["localMarketContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByAddressEnabled")], [0, 1]],
      ["localMarketStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LocalMarketStreetCount")], [0, 1]],
      ["localMarketCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCompanyNameEnabled")], [0, 1]],
      ["localMarketContactByEmailEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketContactByEmailEnabled")], [0, 1]],
      ["localMarketBestOfferEnabled", ["ClassifiedAdBestOfferEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketBestOfferEnabled")], [0, 1]],
      ["localMarketAutoAcceptEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoAcceptEnabled")], [0, 1]],
      ["localMarketAutoDeclineEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketAutoDeclineEnabled")], [0, 1]],
      ["localMarketPaymentMethodCheckOutEnabled", ["ClassifiedAdPaymentMethodEnabledCodeType", XSD::QName.new(NsEBLBaseComponents, "LocalMarketPaymentMethodCheckOutEnabled")], [0, 1]],
      ["localMarketShippingMethodEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketShippingMethodEnabled")], [0, 1]],
      ["localMarketCounterOfferEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketCounterOfferEnabled")], [0, 1]],
      ["localMarketSellerContactDetailsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LocalMarketSellerContactDetailsEnabled")], [0, 1]],
      ["classifiedAdPhoneCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPhoneCount")], [0, 1]],
      ["classifiedAdContactByAddressEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdContactByAddressEnabled")], [0, 1]],
      ["classifiedAdStreetCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdStreetCount")], [0, 1]],
      ["classifiedAdCompanyNameEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdCompanyNameEnabled")], [0, 1]],
      ["specialitySubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscription")], [0, 1]],
      ["regularSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "RegularSubscription")], [0, 1]],
      ["premiumSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "PremiumSubscription")], [0, 1]],
      ["nonSubscription", ["GeographicExposureCodeType", XSD::QName.new(NsEBLBaseComponents, "NonSubscription")], [0, 1]],
      ["payPalRequiredForStoreOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalRequiredForStoreOwner")], [0, 1]],
      ["reviseQuantityAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReviseQuantityAllowed")], [0, 1]],
      ["revisePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RevisePriceAllowed")], [0, 1]],
      ["storeOwnerExtendedListingDurationsEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabled")], [0, 1]],
      ["storeOwnerExtendedListingDurations", ["StoreOwnerExtendedListingDurationsType", XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurations")], [0, 1]],
      ["returnPolicyEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyEnabled")], [0, 1]],
      ["handlingTimeEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HandlingTimeEnabled")], [0, 1]],
      ["maxFlatShippingCost", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCost")], [0, 1]],
      ["maxFlatShippingCostCBTExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MaxFlatShippingCostCBTExempt")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SiteDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteDetailsType"),
    :schema_element => [
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["siteID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SiteHostedPictureDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteHostedPictureDetailsType"),
    :schema_element => [
      ["pictureName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureName")], [0, 1]],
      ["pictureSet", ["PictureSetCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSet")], [0, 1]],
      ["pictureFormat", ["PictureFormatCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureFormat")], [0, 1]],
      ["fullURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "FullURL")], [0, 1]],
      ["baseURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "BaseURL")], [0, 1]],
      ["pictureSetMember", ["PictureSetMemberType[]", XSD::QName.new(NsEBLBaseComponents, "PictureSetMember")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SiteLocationType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteLocationType"),
    :schema_element => [
      ["siteID", ["SiteIDFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SiteWideCharacteristicsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteWideCharacteristicsType"),
    :schema_element => [
      ["characteristicsSet", ["CharacteristicsSetType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSet")], [0, 1]],
      ["excludeCategoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "ExcludeCategoryID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SkypeMeNonTransactionalEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeMeNonTransactionalEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SkypeMeTransactionalEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeMeTransactionalEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SpecialitySubscriptionDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SpecialitySubscriptionDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SpellingSuggestionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SpellingSuggestionType"),
    :schema_element => [
      ["matchingItemCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MatchingItemCount")], [0, 1]],
      ["text", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "Text")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreColorSchemeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorSchemeArrayType"),
    :schema_element => [
      ["colorScheme", ["StoreColorSchemeType[]", XSD::QName.new(NsEBLBaseComponents, "ColorScheme")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreColorSchemeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorSchemeType"),
    :schema_element => [
      ["colorSchemeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ColorSchemeID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["color", ["StoreColorType", XSD::QName.new(NsEBLBaseComponents, "Color")], [0, 1]],
      ["font", ["StoreFontType", XSD::QName.new(NsEBLBaseComponents, "Font")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreColorType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreColorType"),
    :schema_element => [
      ["primary", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Primary")], [0, 1]],
      ["secondary", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Secondary")], [0, 1]],
      ["accent", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Accent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomCategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomCategoryArrayType"),
    :schema_element => [
      ["customCategory", ["StoreCustomCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "CustomCategory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomCategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomCategoryType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "CategoryID")]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")]],
      ["childCategory", ["StoreCustomCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "ChildCategory")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomListingHeaderLinkType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderLinkType"),
    :schema_element => [
      ["linkID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LinkID")]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")]],
      ["linkType", ["StoreCustomListingHeaderLinkCodeType", XSD::QName.new(NsEBLBaseComponents, "LinkType")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomListingHeaderType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderType"),
    :schema_element => [
      ["displayType", ["StoreCustomListingHeaderDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "DisplayType")], [0, 1]],
      ["logo", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, 1]],
      ["searchBox", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchBox")], [0, 1]],
      ["linkToInclude", ["StoreCustomListingHeaderLinkType[]", XSD::QName.new(NsEBLBaseComponents, "LinkToInclude")], [0, nil]],
      ["addToFavoriteStores", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AddToFavoriteStores")], [0, 1]],
      ["signUpForStoreNewsletter", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SignUpForStoreNewsletter")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomPageArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageArrayType"),
    :schema_element => [
      ["customPage", ["StoreCustomPageType[]", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreCustomPageType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["pageID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PageID")], [0, 1]],
      ["uRLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "URLPath")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["status", ["StoreCustomPageStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["content", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Content")], [0, 1]],
      ["leftNav", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "LeftNav")], [0, 1]],
      ["previewEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PreviewEnabled")], [0, 1]],
      ["order", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreFontType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontType"),
    :schema_element => [
      ["nameFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "NameFace")], [0, 1]],
      ["nameSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "NameSize")], [0, 1]],
      ["nameColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NameColor")], [0, 1]],
      ["titleFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "TitleFace")], [0, 1]],
      ["titleSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "TitleSize")], [0, 1]],
      ["titleColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TitleColor")], [0, 1]],
      ["descFace", ["StoreFontFaceCodeType", XSD::QName.new(NsEBLBaseComponents, "DescFace")], [0, 1]],
      ["descSize", ["StoreFontSizeCodeType", XSD::QName.new(NsEBLBaseComponents, "DescSize")], [0, 1]],
      ["descColor", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DescColor")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreInventoryEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreInventoryEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreLogoArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreLogoArrayType"),
    :schema_element => [
      ["logo", ["StoreLogoType[]", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreLogoType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreLogoType"),
    :schema_element => [
      ["logoID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LogoID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreOwnerExtendedListingDurationsDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreOwnerExtendedListingDurationsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreOwnerExtendedListingDurationsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreOwnerExtendedListingDurationsType"),
    :schema_element => [
      ["duration", ["SOAP::SOAPToken[]", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StorePreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StorePreferencesType"),
    :schema_element => [
      ["vacationPreferences", ["StoreVacationPreferencesType", XSD::QName.new(NsEBLBaseComponents, "VacationPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreSubscriptionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionArrayType"),
    :schema_element => [
      ["subscription", ["StoreSubscriptionType[]", XSD::QName.new(NsEBLBaseComponents, "Subscription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreSubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionType"),
    :schema_element => [
      ["level", ["StoreSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "Level")], [0, 1]],
      ["fee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "Fee")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreThemeArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreThemeArrayType"),
    :schema_element => [
      ["theme", ["StoreThemeType[]", XSD::QName.new(NsEBLBaseComponents, "Theme")], [0, nil]],
      ["genericColorSchemeArray", ["StoreColorSchemeArrayType", XSD::QName.new(NsEBLBaseComponents, "GenericColorSchemeArray")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreThemeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreThemeType"),
    :schema_element => [
      ["themeID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["colorScheme", ["StoreColorSchemeType", XSD::QName.new(NsEBLBaseComponents, "ColorScheme")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreType"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]],
      ["uRLPath", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "URLPath")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["subscriptionLevel", ["StoreSubscriptionLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionLevel")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["logo", ["StoreLogoType", XSD::QName.new(NsEBLBaseComponents, "Logo")], [0, 1]],
      ["theme", ["StoreThemeType", XSD::QName.new(NsEBLBaseComponents, "Theme")], [0, 1]],
      ["headerStyle", ["StoreHeaderStyleCodeType", XSD::QName.new(NsEBLBaseComponents, "HeaderStyle")], [0, 1]],
      ["homePage", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "HomePage")], [0, 1]],
      ["itemListLayout", ["StoreItemListLayoutCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemListLayout")], [0, 1]],
      ["itemListSortOrder", ["StoreItemListSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemListSortOrder")], [0, 1]],
      ["customHeaderLayout", ["StoreCustomHeaderLayoutCodeType", XSD::QName.new(NsEBLBaseComponents, "CustomHeaderLayout")], [0, 1]],
      ["customHeader", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CustomHeader")], [0, 1]],
      ["exportListings", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExportListings")], [0, 1]],
      ["customCategories", ["StoreCustomCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CustomCategories")], [0, 1]],
      ["customListingHeader", ["StoreCustomListingHeaderType", XSD::QName.new(NsEBLBaseComponents, "CustomListingHeader")], [0, 1]],
      ["merchDisplay", ["MerchDisplayCodeType", XSD::QName.new(NsEBLBaseComponents, "MerchDisplay")], [0, 1]],
      ["lastOpenedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastOpenedTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => StoreVacationPreferencesType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreVacationPreferencesType"),
    :schema_element => [
      ["onVacation", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "OnVacation")], [0, 1]],
      ["returnDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ReturnDate")], [0, 1]],
      ["hideFixedPriceStoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideFixedPriceStoreItems")], [0, 1]],
      ["messageItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MessageItem")], [0, 1]],
      ["messageStore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MessageStore")], [0, 1]],
      ["displayMessageStoreCustomText", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayMessageStoreCustomText")], [0, 1]],
      ["messageStoreCustomText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageStoreCustomText")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => StorefrontType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StorefrontType"),
    :schema_element => [
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")]],
      ["storeCategory2ID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategory2ID")]],
      ["storeURL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "StoreURL")], [0, 1]],
      ["storeName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StoreName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SubscriptionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SubscriptionType"),
    :schema_element => [
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["siteID", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "SiteID")], [0, 1]],
      ["active", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Active")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SuggestedCategoryArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryArrayType"),
    :schema_element => [
      ["suggestedCategory", ["SuggestedCategoryType[]", XSD::QName.new(NsEBLBaseComponents, "SuggestedCategory")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SuggestedCategoryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryType"),
    :schema_element => [
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["percentItemFound", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PercentItemFound")]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SummaryEventScheduleType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryEventScheduleType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["summaryPeriod", ["SummaryWindowPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "SummaryPeriod")], [0, 1]],
      ["frequency", ["SummaryFrequencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Frequency")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SupportedEventTypesArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SupportedEventTypesArrayType"),
    :schema_element => [
      ["eventType", ["NotificationEventTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => TCREnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TCREnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TaxJurisdictionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaxJurisdictionType"),
    :schema_element => [
      ["jurisdictionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "JurisdictionID")], [0, 1]],
      ["salesTaxPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "SalesTaxPercent")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["jurisdictionName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "JurisdictionName")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TaxTableType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaxTableType"),
    :schema_element => [
      ["taxJurisdiction", ["TaxJurisdictionType[]", XSD::QName.new(NsEBLBaseComponents, "TaxJurisdiction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ThemeGroupType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ThemeGroupType"),
    :schema_element => [
      ["groupID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "GroupID")], [0, 1]],
      ["groupName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "GroupName")], [0, 1]],
      ["themeID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ThemeID")], [0, nil]],
      ["themeTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeTotal")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TicketDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TicketDetailsType"),
    :schema_element => [
      ["eventType", ["TicketEventTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "EventType")], [0, 1]],
      ["eventDate", ["DateType", XSD::QName.new(NsEBLBaseComponents, "EventDate")], [0, 1]],
      ["stateOrProvince", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StateOrProvince")], [0, 1]],
      ["cityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CityName")], [0, 1]],
      ["ticketQuantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TicketQuantity")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TimeZoneDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TimeZoneDetailsType"),
    :schema_element => [
      ["timeZoneID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TimeZoneID")], [0, 1]],
      ["standardLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StandardLabel")], [0, 1]],
      ["standardOffset", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "StandardOffset")], [0, 1]],
      ["daylightSavingsLabel", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsLabel")], [0, 1]],
      ["daylightSavingsOffset", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsOffset")], [0, 1]],
      ["daylightSavingsInEffect", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DaylightSavingsInEffect")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TokenStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenStatusType"),
    :schema_element => [
      ["status", ["TokenStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["expirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ExpirationTime")], [0, 1]],
      ["revocationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RevocationTime")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TransactionArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionArrayType"),
    :schema_element => [
      ["transaction", ["TransactionType[]", XSD::QName.new(NsEBLBaseComponents, "Transaction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => TransactionStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionStatusType"),
    :schema_element => [
      ["eBayPaymentStatus", "PaymentStatusCodeType", [0, 1]],
      ["checkoutStatus", ["CheckoutStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["lastTimeModified", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastTimeModified")], [0, 1]],
      ["paymentMethodUsed", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethodUsed")], [0, 1]],
      ["completeStatus", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CompleteStatus")], [0, 1]],
      ["buyerSelectedShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BuyerSelectedShipping")], [0, 1]],
      ["paymentHoldStatus", ["PaymentHoldStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentHoldStatus")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => TransactionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionType"),
    :schema_element => [
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["convertedAdjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedAdjustmentAmount")], [0, 1]],
      ["buyer", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Buyer")], [0, 1]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]],
      ["convertedAmountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedAmountPaid")], [0, 1]],
      ["convertedTransactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ConvertedTransactionPrice")], [0, 1]],
      ["createdDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedDate")], [0, 1]],
      ["depositType", ["DepositTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DepositType")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["quantityPurchased", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityPurchased")], [0, 1]],
      ["status", ["TransactionStatusType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["transactionPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TransactionPrice")], [0, 1]],
      ["bestOfferSale", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BestOfferSale")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType[]", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, nil]],
      ["sellingManagerProductDetails", ["SellingManagerProductDetailsType", XSD::QName.new(NsEBLBaseComponents, "SellingManagerProductDetails")], [0, 1]],
      ["shippingServiceSelected", ["ShippingServiceOptionsType", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceSelected")], [0, 1]],
      ["buyerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerMessage")], [0, 1]],
      ["dutchAuctionBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "DutchAuctionBid")], [0, 1]],
      ["buyerPaidStatus", ["PaidStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BuyerPaidStatus")], [0, 1]],
      ["sellerPaidStatus", ["PaidStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerPaidStatus")], [0, 1]],
      ["paidTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaidTime")], [0, 1]],
      ["shippedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippedTime")], [0, 1]],
      ["totalPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalPrice")], [0, 1]],
      ["feedbackLeft", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackLeft")], [0, 1]],
      ["feedbackReceived", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackReceived")], [0, 1]],
      ["containingOrder", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "ContainingOrder")], [0, 1]],
      ["finalValueFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "FinalValueFee")], [0, 1]],
      ["transactionPlatform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "TransactionPlatform")], [0, 1]],
      ["listingCheckoutRedirectPreference", ["ListingCheckoutRedirectPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ListingCheckoutRedirectPreference")], [0, 1]],
      ["refundArray", ["RefundArrayType", XSD::QName.new(NsEBLBaseComponents, "RefundArray")], [0, 1]],
      ["transactionSiteID", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "TransactionSiteID")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["cartID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CartID")], [0, 1]],
      ["sellerContactBuyerByEmail", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SellerContactBuyerByEmail")], [0, 1]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["paisaPayID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PaisaPayID")], [0, 1]],
      ["buyerGuaranteePrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyerGuaranteePrice")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => URLDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "URLDetailsType"),
    :schema_element => [
      ["uRLType", ["URLTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "URLType")], [0, 1]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UnitOfMeasurementDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementDetailsType"),
    :schema_element => [
      ["unitOfMeasurement", ["UnitOfMeasurementType[]", XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurement")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UnitOfMeasurementType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementType"),
    :schema_element => [
      ["alternateText", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "AlternateText")], [0, nil]],
      ["suggestedText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SuggestedText")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UserConsentRequiredDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserConsentRequiredDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UserIDArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIDArrayType"),
    :schema_element => [
      ["userID", ["[]", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UserIdFilterType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserIdFilterType"),
    :schema_element => [
      ["excludeSellers", ["[]", XSD::QName.new(NsEBLBaseComponents, "ExcludeSellers")], [0, 100]],
      ["includeSellers", ["[]", XSD::QName.new(NsEBLBaseComponents, "IncludeSellers")], [0, 100]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UserType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserType"),
    :schema_element => [
      ["aboutMePage", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AboutMePage")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["rESTToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RESTToken")], [0, 1]],
      ["email", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Email")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["uniqueNegativeFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNegativeFeedbackCount")], [0, 1]],
      ["uniquePositiveFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniquePositiveFeedbackCount")], [0, 1]],
      ["positiveFeedbackPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "PositiveFeedbackPercent")], [0, 1]],
      ["feedbackPrivate", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FeedbackPrivate")], [0, 1]],
      ["feedbackRatingStar", ["FeedbackRatingStarCodeType", XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingStar")], [0, 1]],
      ["iDVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IDVerified")], [0, 1]],
      ["eBayGoodStanding", "SOAP::SOAPBoolean", [0, 1]],
      ["newUser", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NewUser")], [0, 1]],
      ["registrationAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "RegistrationAddress")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["status", ["UserStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["userIDChanged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserIDChanged")], [0, 1]],
      ["userIDLastChanged", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UserIDLastChanged")], [0, 1]],
      ["vATStatus", ["VATStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VATStatus")], [0, 1]],
      ["buyerInfo", ["BuyerType", XSD::QName.new(NsEBLBaseComponents, "BuyerInfo")], [0, 1]],
      ["sellerInfo", ["SellerType", XSD::QName.new(NsEBLBaseComponents, "SellerInfo")], [0, 1]],
      ["charityAffiliations", ["CharityAffiliationsType", XSD::QName.new(NsEBLBaseComponents, "CharityAffiliations")], [0, 1]],
      ["payPalAccountLevel", ["PayPalAccountLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountLevel")], [0, 1]],
      ["payPalAccountType", ["PayPalAccountTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountType")], [0, 1]],
      ["payPalAccountStatus", ["PayPalAccountStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PayPalAccountStatus")], [0, 1]],
      ["userSubscription", ["EBaySubscriptionTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "UserSubscription")], [0, nil]],
      ["siteVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SiteVerified")], [0, 1]],
      ["skypeID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SkypeID")], [0, nil]],
      ["eBayWikiReadOnly", "SOAP::SOAPBoolean", [0, 1]],
      ["tUVLevel", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TUVLevel")], [0, 1]],
      ["vATID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATID")], [0, 1]],
      ["motorsDealer", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsDealer")], [0, 1]],
      ["sellerPaymentMethod", ["SellerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentMethod")], [0, 1]],
      ["biddingSummary", ["BiddingSummaryType", XSD::QName.new(NsEBLBaseComponents, "BiddingSummary")], [0, 1]],
      ["userAnonymized", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UserAnonymized")], [0, 1]],
      ["uniqueNeutralFeedbackCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UniqueNeutralFeedbackCount")], [0, 1]],
      ["enterpriseSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EnterpriseSeller")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VATDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VATDetailsType"),
    :schema_element => [
      ["businessSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BusinessSeller")], [0, 1]],
      ["restrictedToBusiness", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RestrictedToBusiness")], [0, 1]],
      ["vATPercent", ["SOAP::SOAPFloat", XSD::QName.new(NsEBLBaseComponents, "VATPercent")], [0, 1]],
      ["vATSite", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATSite")], [0, 1]],
      ["vATID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VATID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ValType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValType"),
    :schema_element => [
      ["valueLiteral", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ValueLiteral")], [0, 1]],
      ["suggestedValueLiteral", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "SuggestedValueLiteral")], [0, nil]],
      ["valueID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ValueID")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ValuePackEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ValuePackEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReasonCodeDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeDetailsType"),
    :schema_element => [
      ["veROSiteDetail", ["VeROSiteDetailType[]", XSD::QName.new(NsEBLBaseComponents, "VeROSiteDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["veROReasonCodeID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeID")], [0, 1]],
      ["messageToSeller", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageToSeller")], [0, 1]],
      ["copyEmailToRightsOwner", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CopyEmailToRightsOwner")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsType"),
    :schema_element => [
      ["reportItem", ["VeROReportItemType[]", XSD::QName.new(NsEBLBaseComponents, "ReportItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportedItemDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportedItemDetailsType"),
    :schema_element => [
      ["reportedItem", ["VeROReportedItemType[]", XSD::QName.new(NsEBLBaseComponents, "ReportedItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportedItemType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportedItemType"),
    :schema_element => [
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["itemStatus", ["VeROItemStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemStatus")], [0, 1]],
      ["itemReasonForFailure", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemReasonForFailure")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROSiteDetailType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROSiteDetailType"),
    :schema_element => [
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["reasonCodeDetail", ["ReasonCodeDetailType[]", XSD::QName.new(NsEBLBaseComponents, "ReasonCodeDetail")], [0, nil]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifiedUserRequirementsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VerifiedUserRequirementsType"),
    :schema_element => [
      ["verifiedUser", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "VerifiedUser")], [0, 1]],
      ["minimumFeedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MinimumFeedbackScore")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => WantItNowPostArrayType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WantItNowPostArrayType"),
    :schema_element => [
      ["wantItNowPost", ["WantItNowPostType[]", XSD::QName.new(NsEBLBaseComponents, "WantItNowPost")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => WantItNowPostType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WantItNowPostType"),
    :schema_element => [
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]],
      ["site", ["SiteCodeType", XSD::QName.new(NsEBLBaseComponents, "Site")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["responseCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ResponseCount")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Title")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => WarrantyDurationDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationDetailsType"),
    :schema_element => [
      ["warrantyDurationOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => WarrantyOfferedDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedDetailsType"),
    :schema_element => [
      ["warrantyOfferedOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => WarrantyTypeDetailsType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeDetailsType"),
    :schema_element => [
      ["warrantyTypeOption", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOption")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => WishListEntryType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WishListEntryType"),
    :schema_element => [
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["product", ["ExpressProductType", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Notes")], [0, 1]],
      ["creationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreationDate")], [0, 1]],
      ["quantityWanted", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityWanted")], [0, 1]],
      ["quantityReceived", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantityReceived")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => XSLFileType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "XSLFileType"),
    :schema_element => [
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]],
      ["fileContent", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileContent")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProAdFormatEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAdFormatEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProAutoAcceptEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAutoAcceptEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProAutoDeclineEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProAutoDeclineEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProBestOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProBestOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProCompanyNameEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProCompanyNameEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProContactByAddressEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByAddressEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProContactByEmailEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByEmailEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProContactByPhoneEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProContactByPhoneEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProCounterOfferEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProCounterOfferEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProPhoneCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProPhoneCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProSellerContactDetailsEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProSellerContactDetailsEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProShippingMethodEnabledDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProShippingMethodEnabledDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EBayMotorsProStreetCountDefinitionType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "eBayMotorsProStreetCountDefinitionType"),
    :schema_element => [
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AckCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AckCodeType")
  )

  LiteralRegistry.register(
    :class => BuyerPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerPaymentMethodCodeType")
  )

  LiteralRegistry.register(
    :class => DetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DetailLevelCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeActivityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeActivityCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeCreditEligibilityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeCreditEligibilityCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeExplanationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeExplanationCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeFilterTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeFilterTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeMessageSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeMessageSourceCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeReasonCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeRecordTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeResolutionReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReasonCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeResolutionRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionRecordTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeSortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeSortTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeStateCodeType")
  )

  LiteralRegistry.register(
    :class => DisputeStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisputeStatusCodeType")
  )

  LiteralRegistry.register(
    :class => ErrorClassificationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorClassificationCodeType")
  )

  LiteralRegistry.register(
    :class => ErrorHandlingCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ErrorHandlingCodeType")
  )

  LiteralRegistry.register(
    :class => InvocationStatusType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InvocationStatusType")
  )

  LiteralRegistry.register(
    :class => MeasurementSystemCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MeasurementSystemCodeType")
  )

  LiteralRegistry.register(
    :class => SeverityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SeverityCodeType")
  )

  LiteralRegistry.register(
    :class => WarningLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarningLevelCodeType")
  )

  LiteralRegistry.register(
    :class => AccessRuleCurrentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccessRuleCurrentStatusCodeType")
  )

  LiteralRegistry.register(
    :class => AccessRuleStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccessRuleStatusCodeType")
  )

  LiteralRegistry.register(
    :class => AccountDetailEntryCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountDetailEntryCodeType")
  )

  LiteralRegistry.register(
    :class => AccountEntrySortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountEntrySortTypeCodeType")
  )

  LiteralRegistry.register(
    :class => AccountHistorySelectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountHistorySelectionCodeType")
  )

  LiteralRegistry.register(
    :class => AccountStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AccountStateCodeType")
  )

  LiteralRegistry.register(
    :class => AdFormatEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatEnabledCodeType")
  )

  LiteralRegistry.register(
    :class => AdFormatLeadStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadStatusCodeType")
  )

  LiteralRegistry.register(
    :class => AddressOwnerCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressOwnerCodeType")
  )

  LiteralRegistry.register(
    :class => AddressRecordTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressRecordTypeCodeType")
  )

  LiteralRegistry.register(
    :class => AddressStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AddressStatusCodeType")
  )

  LiteralRegistry.register(
    :class => AnnouncementMessageCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AnnouncementMessageCodeType")
  )

  LiteralRegistry.register(
    :class => ApplicationDeviceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ApplicationDeviceTypeCodeType")
  )

  LiteralRegistry.register(
    :class => AuthTokenTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AuthTokenTypeCodeType")
  )

  LiteralRegistry.register(
    :class => AutomatedLeaveFeedbackEventCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "AutomatedLeaveFeedbackEventCodeType")
  )

  LiteralRegistry.register(
    :class => BalanceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BalanceCodeType")
  )

  LiteralRegistry.register(
    :class => BestOfferActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferActionCodeType")
  )

  LiteralRegistry.register(
    :class => BestOfferStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferStatusCodeType")
  )

  LiteralRegistry.register(
    :class => BestOfferTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BestOfferTypeCodeType")
  )

  LiteralRegistry.register(
    :class => BidActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidActionCodeType")
  )

  LiteralRegistry.register(
    :class => BidGroupItemStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupItemStatusCodeType")
  )

  LiteralRegistry.register(
    :class => BidGroupStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidGroupStatusCodeType")
  )

  LiteralRegistry.register(
    :class => BidderStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderStatusCodeType")
  )

  LiteralRegistry.register(
    :class => BidderTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BidderTypeCodeType")
  )

  LiteralRegistry.register(
    :class => BulkCatalogListerStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BulkCatalogListerStatusCodeType")
  )

  LiteralRegistry.register(
    :class => BuyerProtectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionCodeType")
  )

  LiteralRegistry.register(
    :class => BuyerProtectionSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerProtectionSourceCodeType")
  )

  LiteralRegistry.register(
    :class => BuyerSatisfactionStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfactionStatusCodeType")
  )

  LiteralRegistry.register(
    :class => CalculatedShippingChargeOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingChargeOptionCodeType")
  )

  LiteralRegistry.register(
    :class => CalculatedShippingRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingRateOptionCodeType")
  )

  LiteralRegistry.register(
    :class => CategoryFeatureDetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryFeatureDetailLevelCodeType")
  )

  LiteralRegistry.register(
    :class => CategoryListingsOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryListingsOrderCodeType")
  )

  LiteralRegistry.register(
    :class => CategoryListingsSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CategoryListingsSearchCodeType")
  )

  LiteralRegistry.register(
    :class => CharacteristicsSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSearchCodeType")
  )

  LiteralRegistry.register(
    :class => CharityAffiliationTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityAffiliationTypeCodeType")
  )

  LiteralRegistry.register(
    :class => CharitySellerStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharitySellerStatusCodeType")
  )

  LiteralRegistry.register(
    :class => CharityStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CharityStatusCodeType")
  )

  LiteralRegistry.register(
    :class => CheckoutMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutMethodCodeType")
  )

  LiteralRegistry.register(
    :class => CheckoutStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CheckoutStatusCodeType")
  )

  LiteralRegistry.register(
    :class => ClassifiedAdBestOfferEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdBestOfferEnabledCodeType")
  )

  LiteralRegistry.register(
    :class => ClassifiedAdPaymentMethodEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ClassifiedAdPaymentMethodEnabledCodeType")
  )

  LiteralRegistry.register(
    :class => CombinedPaymentOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentOptionCodeType")
  )

  LiteralRegistry.register(
    :class => CombinedPaymentPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPeriodCodeType")
  )

  LiteralRegistry.register(
    :class => CommentTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CommentTypeCodeType")
  )

  LiteralRegistry.register(
    :class => CompleteStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CompleteStatusCodeType")
  )

  LiteralRegistry.register(
    :class => CountryCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CountryCodeType")
  )

  LiteralRegistry.register(
    :class => CurrencyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "CurrencyCodeType")
  )

  LiteralRegistry.register(
    :class => DateSpecifierCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DateSpecifierCodeType")
  )

  LiteralRegistry.register(
    :class => DaysCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DaysCodeType")
  )

  LiteralRegistry.register(
    :class => DepositTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DepositTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DescriptionReviseModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionReviseModeCodeType")
  )

  LiteralRegistry.register(
    :class => DescriptionTemplateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplateCodeType")
  )

  LiteralRegistry.register(
    :class => DetailNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DetailNameCodeType")
  )

  LiteralRegistry.register(
    :class => DeviceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DeviceTypeCodeType")
  )

  LiteralRegistry.register(
    :class => DiscountCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountCodeType")
  )

  LiteralRegistry.register(
    :class => DiscountNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DiscountNameCodeType")
  )

  LiteralRegistry.register(
    :class => DisplayPayNowButtonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "DisplayPayNowButtonCodeType")
  )

  LiteralRegistry.register(
    :class => EBaySubscriptionTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EBaySubscriptionTypeCodeType")
  )

  LiteralRegistry.register(
    :class => EnableCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EnableCodeType")
  )

  LiteralRegistry.register(
    :class => EndOfAuctionLogoTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionLogoTypeCodeType")
  )

  LiteralRegistry.register(
    :class => EndReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EndReasonCodeType")
  )

  LiteralRegistry.register(
    :class => EscrowCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "EscrowCodeType")
  )

  LiteralRegistry.register(
    :class => ExpressSellingPreferenceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExpressSellingPreferenceCodeType")
  )

  LiteralRegistry.register(
    :class => ExternalProductCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ExternalProductCodeType")
  )

  LiteralRegistry.register(
    :class => FeatureIDCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeatureIDCodeType")
  )

  LiteralRegistry.register(
    :class => FeedbackRatingDetailCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingDetailCodeType")
  )

  LiteralRegistry.register(
    :class => FeedbackRatingStarCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackRatingStarCodeType")
  )

  LiteralRegistry.register(
    :class => FeedbackResponseCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackResponseCodeType")
  )

  LiteralRegistry.register(
    :class => FeedbackSummaryPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FeedbackSummaryPeriodCodeType")
  )

  LiteralRegistry.register(
    :class => FlatRateInsuranceRangeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatRateInsuranceRangeCodeType")
  )

  LiteralRegistry.register(
    :class => FlatShippingRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "FlatShippingRateOptionCodeType")
  )

  LiteralRegistry.register(
    :class => GallerySortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GallerySortFilterCodeType")
  )

  LiteralRegistry.register(
    :class => GalleryTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GalleryTypeCodeType")
  )

  LiteralRegistry.register(
    :class => GeneralPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeneralPaymentMethodCodeType")
  )

  LiteralRegistry.register(
    :class => GeographicExposureCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GeographicExposureCodeType")
  )

  LiteralRegistry.register(
    :class => GetAllBiddersModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersModeCodeType")
  )

  LiteralRegistry.register(
    :class => GiftServicesCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GiftServicesCodeType")
  )

  LiteralRegistry.register(
    :class => GranularityLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "GranularityLevelCodeType")
  )

  LiteralRegistry.register(
    :class => HandlingNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HandlingNameCodeType")
  )

  LiteralRegistry.register(
    :class => HitCounterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "HitCounterCodeType")
  )

  LiteralRegistry.register(
    :class => INEscrowWorkflowTimelineCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "INEscrowWorkflowTimelineCodeType")
  )

  LiteralRegistry.register(
    :class => InsuranceOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceOptionCodeType")
  )

  LiteralRegistry.register(
    :class => InsuranceSelectedCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InsuranceSelectedCodeType")
  )

  LiteralRegistry.register(
    :class => InventoryTrackingMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "InventoryTrackingMethodCodeType")
  )

  LiteralRegistry.register(
    :class => ItemConditionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemConditionCodeType")
  )

  LiteralRegistry.register(
    :class => ItemFormatSortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemFormatSortFilterCodeType")
  )

  LiteralRegistry.register(
    :class => ItemLocationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemLocationCodeType")
  )

  LiteralRegistry.register(
    :class => ItemSortFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSortFilterCodeType")
  )

  LiteralRegistry.register(
    :class => ItemSortTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSortTypeCodeType")
  )

  LiteralRegistry.register(
    :class => ItemSpecificSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificSourceCodeType")
  )

  LiteralRegistry.register(
    :class => ItemSpecificsEnabledCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemSpecificsEnabledCodeType")
  )

  LiteralRegistry.register(
    :class => ItemTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTypeCodeType")
  )

  LiteralRegistry.register(
    :class => ItemTypeFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilterCodeType")
  )

  LiteralRegistry.register(
    :class => ListingDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingDurationCodeType")
  )

  LiteralRegistry.register(
    :class => ListingEnhancementDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementDurationCodeType")
  )

  LiteralRegistry.register(
    :class => ListingEnhancementsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingEnhancementsCodeType")
  )

  LiteralRegistry.register(
    :class => ListingFlowCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingFlowCodeType")
  )

  LiteralRegistry.register(
    :class => ListingStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingStatusCodeType")
  )

  LiteralRegistry.register(
    :class => ListingSubtypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingSubtypeCodeType")
  )

  LiteralRegistry.register(
    :class => ListingTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ListingTypeCodeType")
  )

  LiteralRegistry.register(
    :class => LogoTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "LogoTypeCodeType")
  )

  LiteralRegistry.register(
    :class => MailOptionsTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MailOptionsTypeCodeType")
  )

  LiteralRegistry.register(
    :class => MarkUpMarkDownEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownEventTypeCodeType")
  )

  LiteralRegistry.register(
    :class => MerchDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MerchDisplayCodeType")
  )

  LiteralRegistry.register(
    :class => MerchandizingPrefCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MerchandizingPrefCodeType")
  )

  LiteralRegistry.register(
    :class => MessageStatusTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MessageStatusTypeCodeType")
  )

  LiteralRegistry.register(
    :class => MessageTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MessageTypeCodeType")
  )

  LiteralRegistry.register(
    :class => ModifyActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ModifyActionCodeType")
  )

  LiteralRegistry.register(
    :class => MyMessagesAlertResolutionStatusCode,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesAlertResolutionStatusCode")
  )

  LiteralRegistry.register(
    :class => MyMessagesFolderOperationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "MyMessagesFolderOperationCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationDeliveryStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationDeliveryStatusCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationEventPropertyNameCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventPropertyNameCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationEventStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventStateCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationEventTypeCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationPayloadTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationPayloadTypeCodeType")
  )

  LiteralRegistry.register(
    :class => NotificationRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "NotificationRoleCodeType")
  )

  LiteralRegistry.register(
    :class => OrderRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderRoleCodeType")
  )

  LiteralRegistry.register(
    :class => OrderStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "OrderStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PaidStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaidStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PayPalAccountLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountLevelCodeType")
  )

  LiteralRegistry.register(
    :class => PayPalAccountStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PayPalAccountTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PayPalAccountTypeCodeType")
  )

  LiteralRegistry.register(
    :class => PaymentHoldStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentHoldStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PaymentMethodSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentMethodSearchCodeType")
  )

  LiteralRegistry.register(
    :class => PaymentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PaymentTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PaymentTypeCodeType")
  )

  LiteralRegistry.register(
    :class => PeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PeriodCodeType")
  )

  LiteralRegistry.register(
    :class => PhotoDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PhotoDisplayCodeType")
  )

  LiteralRegistry.register(
    :class => PictureFormatCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureFormatCodeType")
  )

  LiteralRegistry.register(
    :class => PictureManagerActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerActionCodeType")
  )

  LiteralRegistry.register(
    :class => PictureManagerDetailLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailLevelCodeType")
  )

  LiteralRegistry.register(
    :class => PictureManagerPictureDisplayTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerPictureDisplayTypeCodeType")
  )

  LiteralRegistry.register(
    :class => PictureManagerSubscriptionLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureManagerSubscriptionLevelCodeType")
  )

  LiteralRegistry.register(
    :class => PictureSetCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSetCodeType")
  )

  LiteralRegistry.register(
    :class => PictureSourceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureSourceCodeType")
  )

  LiteralRegistry.register(
    :class => PictureUploadPolicyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PictureUploadPolicyCodeType")
  )

  LiteralRegistry.register(
    :class => PolicyComplianceStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PolicyComplianceStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PreferredLocationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PreferredLocationCodeType")
  )

  LiteralRegistry.register(
    :class => ProductSortCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductSortCodeType")
  )

  LiteralRegistry.register(
    :class => ProductStateCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductStateCodeType")
  )

  LiteralRegistry.register(
    :class => ProductUseCaseCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ProductUseCaseCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionItemPriceTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionItemPriceTypeCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionItemSelectionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionItemSelectionCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionMethodCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionSchemeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionSchemeCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionalSaleStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleStatusCodeType")
  )

  LiteralRegistry.register(
    :class => PromotionalSaleTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleTypeCodeType")
  )

  LiteralRegistry.register(
    :class => PurchasePurposeTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "PurchasePurposeTypeCodeType")
  )

  LiteralRegistry.register(
    :class => QuantityOperatorCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuantityOperatorCodeType")
  )

  LiteralRegistry.register(
    :class => QuestionTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "QuestionTypeCodeType")
  )

  LiteralRegistry.register(
    :class => RCSPaymentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RCSPaymentStatusCodeType")
  )

  LiteralRegistry.register(
    :class => RangeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RangeCodeType")
  )

  LiteralRegistry.register(
    :class => RecipientRelationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RecipientRelationCodeType")
  )

  LiteralRegistry.register(
    :class => RecommendationEngineCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RecommendationEngineCodeType")
  )

  LiteralRegistry.register(
    :class => RefundOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => RefundReasonCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundReasonCodeType")
  )

  LiteralRegistry.register(
    :class => RefundTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "RefundTypeCodeType")
  )

  LiteralRegistry.register(
    :class => ReturnsAcceptedOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsAcceptedOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => ReturnsWithinOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ReturnsWithinOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => SMSSubscriptionErrorCodeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionErrorCodeCodeType")
  )

  LiteralRegistry.register(
    :class => SMSSubscriptionUserStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SMSSubscriptionUserStatusCodeType")
  )

  LiteralRegistry.register(
    :class => SearchFlagCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchFlagCodeType")
  )

  LiteralRegistry.register(
    :class => SearchFlagsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchFlagsCodeType")
  )

  LiteralRegistry.register(
    :class => SearchResultValuesCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchResultValuesCodeType")
  )

  LiteralRegistry.register(
    :class => SearchSortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchSortOrderCodeType")
  )

  LiteralRegistry.register(
    :class => SearchStandingStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchStandingStatusCodeType")
  )

  LiteralRegistry.register(
    :class => SearchTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SearchTypeCodeType")
  )

  LiteralRegistry.register(
    :class => SecondChanceOfferDurationCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SecondChanceOfferDurationCodeType")
  )

  LiteralRegistry.register(
    :class => SelectionModeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SelectionModeCodeType")
  )

  LiteralRegistry.register(
    :class => SellerAccountStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerAccountStatusCodeType")
  )

  LiteralRegistry.register(
    :class => SellerBusinessCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerBusinessCodeType")
  )

  LiteralRegistry.register(
    :class => SellerDashboardAlertSeverityCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerDashboardAlertSeverityCodeType")
  )

  LiteralRegistry.register(
    :class => SellerGuaranteeLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerGuaranteeLevelCodeType")
  )

  LiteralRegistry.register(
    :class => SellerLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerLevelCodeType")
  )

  LiteralRegistry.register(
    :class => SellerPaymentMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SellerPaymentMethodCodeType")
  )

  LiteralRegistry.register(
    :class => SetUserNotesActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesActionCodeType")
  )

  LiteralRegistry.register(
    :class => ShipmentDeliveryStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentDeliveryStatusCodeType")
  )

  LiteralRegistry.register(
    :class => ShipmentStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShipmentStatusCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingCarrierCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingCostPaidByOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingCostPaidByOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingFeatureCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingFeatureCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingPackageCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingPackageCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingRateTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingRateTypeCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingRegionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingRegionCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingServiceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingServiceCodeType")
  )

  LiteralRegistry.register(
    :class => ShippingTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "ShippingTypeCodeType")
  )

  LiteralRegistry.register(
    :class => SimpleItemSortCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SimpleItemSortCodeType")
  )

  LiteralRegistry.register(
    :class => SiteCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteCodeType")
  )

  LiteralRegistry.register(
    :class => SiteIDFilterCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SiteIDFilterCodeType")
  )

  LiteralRegistry.register(
    :class => SkypeContactOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SkypeContactOptionCodeType")
  )

  LiteralRegistry.register(
    :class => SortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SortOrderCodeType")
  )

  LiteralRegistry.register(
    :class => StatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StatusCodeType")
  )

  LiteralRegistry.register(
    :class => StoreCategoryUpdateActionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCategoryUpdateActionCodeType")
  )

  LiteralRegistry.register(
    :class => StoreCustomHeaderLayoutCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomHeaderLayoutCodeType")
  )

  LiteralRegistry.register(
    :class => StoreCustomListingHeaderDisplayCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderDisplayCodeType")
  )

  LiteralRegistry.register(
    :class => StoreCustomListingHeaderLinkCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomListingHeaderLinkCodeType")
  )

  LiteralRegistry.register(
    :class => StoreCustomPageStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreCustomPageStatusCodeType")
  )

  LiteralRegistry.register(
    :class => StoreFontFaceCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontFaceCodeType")
  )

  LiteralRegistry.register(
    :class => StoreFontSizeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreFontSizeCodeType")
  )

  LiteralRegistry.register(
    :class => StoreHeaderStyleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreHeaderStyleCodeType")
  )

  LiteralRegistry.register(
    :class => StoreItemListLayoutCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreItemListLayoutCodeType")
  )

  LiteralRegistry.register(
    :class => StoreItemListSortOrderCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreItemListSortOrderCodeType")
  )

  LiteralRegistry.register(
    :class => StoreSearchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSearchCodeType")
  )

  LiteralRegistry.register(
    :class => StoreSubscriptionLevelCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StoreSubscriptionLevelCodeType")
  )

  LiteralRegistry.register(
    :class => StringMatchCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "StringMatchCodeType")
  )

  LiteralRegistry.register(
    :class => SummaryFrequencyCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryFrequencyCodeType")
  )

  LiteralRegistry.register(
    :class => SummaryWindowPeriodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "SummaryWindowPeriodCodeType")
  )

  LiteralRegistry.register(
    :class => TaskStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TaskStatusCodeType")
  )

  LiteralRegistry.register(
    :class => TicketEventTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TicketEventTypeCodeType")
  )

  LiteralRegistry.register(
    :class => TokenReturnMethodCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenReturnMethodCodeType")
  )

  LiteralRegistry.register(
    :class => TokenStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TokenStatusCodeType")
  )

  LiteralRegistry.register(
    :class => TradingRoleCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TradingRoleCodeType")
  )

  LiteralRegistry.register(
    :class => TransactionPlatformCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionPlatformCodeType")
  )

  LiteralRegistry.register(
    :class => TransactionPlatformType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "TransactionPlatformType")
  )

  LiteralRegistry.register(
    :class => UPSRateOptionCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UPSRateOptionCodeType")
  )

  LiteralRegistry.register(
    :class => URLTypeCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "URLTypeCodeType")
  )

  LiteralRegistry.register(
    :class => UnitCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UnitCodeType")
  )

  LiteralRegistry.register(
    :class => UserStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "UserStatusCodeType")
  )

  LiteralRegistry.register(
    :class => VATStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VATStatusCodeType")
  )

  LiteralRegistry.register(
    :class => VeROItemStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROItemStatusCodeType")
  )

  LiteralRegistry.register(
    :class => VeROReportPacketStatusCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatusCodeType")
  )

  LiteralRegistry.register(
    :class => WarrantyDurationOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyDurationOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => WarrantyOfferedCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyOfferedCodeType")
  )

  LiteralRegistry.register(
    :class => WarrantyTypeOptionsCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WarrantyTypeOptionsCodeType")
  )

  LiteralRegistry.register(
    :class => WirelessCarrierIDCodeType,
    :schema_type => XSD::QName.new(NsEBLBaseComponents, "WirelessCarrierIDCodeType")
  )

  LiteralRegistry.register(
    :class => CustomSecurityHeaderType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RequesterCredentials"),
    :schema_element => [
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["credentials", ["UserIdPasswordType", XSD::QName.new(NsEBLBaseComponents, "Credentials")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddDisputeRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeExplanation", ["DisputeExplanationCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeExplanation")], [0, 1]],
      ["disputeReason", ["DisputeReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeReason")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["messageText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageText")], [0, 1]],
      ["disputeActivity", ["DisputeActivityCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeActivity")], [0, 1]],
      ["shippingCarrierUsed", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierUsed")], [0, 1]],
      ["shipmentTrackNumber", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ShipmentTrackNumber")], [0, 1]],
      ["shippingTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ShippingTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddDisputeResponseResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddDisputeResponseResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddLiveAuctionItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddLiveAuctionItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddLiveAuctionItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageAAQToPartnerRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageAAQToPartnerResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageAAQToPartnerResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageRTQRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["memberMessage", ["MemberMessageType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessageRTQResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessageRTQResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderRequestContainer", ["AddMemberMessagesAAQToBidderRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderRequestContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddMemberMessagesAAQToBidderResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["addMemberMessagesAAQToBidderResponseContainer", ["AddMemberMessagesAAQToBidderResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "AddMemberMessagesAAQToBidderResponseContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddOrderRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddOrderRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["order", ["OrderType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddOrderResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddOrderResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["createdTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreatedTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddSecondChanceItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddSecondChanceItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddSecondChanceItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToItemDescriptionRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Description")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToItemDescriptionResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddToItemDescriptionResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToWatchListRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AddToWatchListResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddToWatchListResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => AddTransactionConfirmationItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")]],
      ["verifyEligibilityOnly", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "VerifyEligibilityOnly")]],
      ["recipientPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientPostalCode")]],
      ["recipientRelationType", ["RecipientRelationCodeType", XSD::QName.new(NsEBLBaseComponents, "RecipientRelationType")]],
      ["negotiatedPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "NegotiatedPrice")]],
      ["listingDuration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingDuration")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")]],
      ["comments", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Comments")]]
    ]
  )

  LiteralRegistry.register(
    :class => AddTransactionConfirmationItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "AddTransactionConfirmationItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ApproveLiveAuctionBiddersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidApproval", ["BidApprovalArrayType", XSD::QName.new(NsEBLBaseComponents, "BidApproval")], [0, 1]],
      ["approveAllPending", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ApproveAllPending")], [0, 1]],
      ["allApprovedBiddingLimit", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AllApprovedBiddingLimit")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ApproveLiveAuctionBiddersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ApproveLiveAuctionBiddersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderUpdateStatus", ["LiveAuctionApprovalStatusArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderUpdateStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CompleteSaleRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["feedbackInfo", ["FeedbackInfoType", XSD::QName.new(NsEBLBaseComponents, "FeedbackInfo")], [0, 1]],
      ["shipped", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Shipped")], [0, 1]],
      ["paid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Paid")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["shipment", ["ShipmentType", XSD::QName.new(NsEBLBaseComponents, "Shipment")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CompleteSaleResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "CompleteSaleResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ConfirmIdentityRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ConfirmIdentityResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ConfirmIdentityResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DeleteMyMessagesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DeleteMyMessagesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "DeleteMyMessagesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => EndItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "EndItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["endingReason", ["EndReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "EndingReason")], [0, 1]],
      ["sellerInventoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerInventoryID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => EndItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "EndItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FetchTokenRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "FetchTokenRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["secretID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SecretID")], [0, 1]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]],
      ["includeRESTToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeRESTToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FetchTokenResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "FetchTokenResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["eBayAuthToken", "SOAP::SOAPString", [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]],
      ["rESTToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RESTToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAccountRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAccountRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountHistorySelection", ["AccountHistorySelectionCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountHistorySelection")], [0, 1]],
      ["invoiceDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "InvoiceDate")], [0, 1]],
      ["beginDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "BeginDate")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndDate")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["excludeBalance", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeBalance")], [0, 1]],
      ["excludeSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExcludeSummary")], [0, 1]],
      ["accountEntrySortType", ["AccountEntrySortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "AccountEntrySortType")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAccountResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAccountResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["accountID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AccountID")], [0, 1]],
      ["accountSummary", ["AccountSummaryType", XSD::QName.new(NsEBLBaseComponents, "AccountSummary")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["accountEntries", ["AccountEntriesType", XSD::QName.new(NsEBLBaseComponents, "AccountEntries")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreEntries", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreEntries")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAdFormatLeadsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["status", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["includeMemberMessages", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeMemberMessages")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAdFormatLeadsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAdFormatLeadsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["adFormatLead", ["AdFormatLeadType[]", XSD::QName.new(NsEBLBaseComponents, "AdFormatLead")], [0, nil]],
      ["adFormatLeadCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "AdFormatLeadCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAllBiddersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["callMode", ["GetAllBiddersModeCodeType", XSD::QName.new(NsEBLBaseComponents, "CallMode")], [0, 1]],
      ["includeBiddingSummary", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBiddingSummary")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAllBiddersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAllBiddersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["highBidder", [nil, XSD::QName.new(NsEBLBaseComponents, "HighBidder")], [0, 1]],
      ["highestBid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "HighestBid")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetApiAccessRulesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetApiAccessRulesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetApiAccessRulesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["apiAccessRule", ["ApiAccessRuleType[]", XSD::QName.new(NsEBLBaseComponents, "ApiAccessRule")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesCSRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [0, nil]],
      ["includeCategoryMappingDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCategoryMappingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesCSResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAttributesCSResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesXSLRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetAttributesXSLResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetAttributesXSLResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBestOffersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", [nil, XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, 1]],
      ["bestOfferStatus", ["BestOfferStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "BestOfferStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBestOffersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetBestOffersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bestOfferArray", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferArray")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBidderListRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetBidderListRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["activeItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ActiveItemsOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetBidderListResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetBidderListResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidder", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Bidder")], [0, 1]],
      ["bidItemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidItemArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoriesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categorySiteID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategorySiteID")], [0, 1]],
      ["categoryParent", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryParent")], [0, nil]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoriesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoriesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["reservePriceAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReservePriceAllowed")], [0, 1]],
      ["minimumReservePrice", ["SOAP::SOAPDouble", XSD::QName.new(NsEBLBaseComponents, "MinimumReservePrice")], [0, 1]],
      ["reduceReserveAllowed", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReduceReserveAllowed")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategory2CSRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategory2CSResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategory2CSResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["mappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "MappedCategoryArray")], [0, 1]],
      ["unmappedCategoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "UnmappedCategoryArray")], [0, 1]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["siteWideCharacteristicSets", ["SiteWideCharacteristicsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteWideCharacteristicSets")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryFeaturesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["viewAllNodes", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ViewAllNodes")], [0, 1]],
      ["featureID", ["FeatureIDCodeType[]", XSD::QName.new(NsEBLBaseComponents, "FeatureID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryFeaturesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryFeaturesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]],
      ["updateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "UpdateTime")], [0, 1]],
      ["category", ["CategoryFeatureType[]", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, nil]],
      ["siteDefaults", ["SiteDefaultsType", XSD::QName.new(NsEBLBaseComponents, "SiteDefaults")], [0, 1]],
      ["featureDefinitions", ["FeatureDefinitionsType", XSD::QName.new(NsEBLBaseComponents, "FeatureDefinitions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryListingsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["currency", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "Currency")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["CategoryListingsSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["orderBy", ["CategoryListingsOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderBy")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchLocation", ["SearchLocationType", XSD::QName.new(NsEBLBaseComponents, "SearchLocation")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryListingsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryListingsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["category", ["CategoryType", XSD::QName.new(NsEBLBaseComponents, "Category")], [0, 1]],
      ["subCategories", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SubCategories")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryMappingsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategoryMappingsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategoryMappingsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryMapping", ["CategoryMappingType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryMapping")], [0, nil]],
      ["categoryVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategorySpecificsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["maxNames", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxNames")], [0, 1]],
      ["maxValuesPerName", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxValuesPerName")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCategorySpecificsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCategorySpecificsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryItemSpecifics", ["CategoryItemSpecificsType[]", XSD::QName.new(NsEBLBaseComponents, "CategoryItemSpecifics")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetChallengeTokenRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetChallengeTokenResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetChallengeTokenResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["imageChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ImageChallengeURL")], [0, 1]],
      ["audioChallengeURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AudioChallengeURL")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCharitiesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charityID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["charityName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CharityName")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["charityRegion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityRegion")], [0, 1]],
      ["charityDomain", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityDomain")], [0, 1]],
      ["includeDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeDescription")], [0, 1]],
      ["matchType", ["StringMatchCodeType", XSD::QName.new(NsEBLBaseComponents, "MatchType")], [0, 1]],
      ["featured", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Featured")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCharitiesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCharitiesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["charity", ["CharityInfoType[]", XSD::QName.new(NsEBLBaseComponents, "Charity")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetClientAlertsAuthTokenRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetClientAlertsAuthTokenResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetClientAlertsAuthTokenResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["clientAlertsAuthToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ClientAlertsAuthToken")], [0, 1]],
      ["hardExpirationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "HardExpirationTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetContextualKeywordsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["uRL", ["SOAP::SOAPAnyURI", XSD::QName.new(NsEBLBaseComponents, "URL")], [0, 1]],
      ["encoding", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Encoding")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetContextualKeywordsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetContextualKeywordsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["contextSearchAsset", ["ContextSearchAssetType[]", XSD::QName.new(NsEBLBaseComponents, "ContextSearchAsset")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCrossPromotionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]],
      ["promotionViewMode", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionViewMode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCrossPromotionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetCrossPromotionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["crossPromotion", ["CrossPromotionsType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDescriptionTemplatesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["lastModifiedTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastModifiedTime")], [0, 1]],
      ["motorVehicles", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorVehicles")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDescriptionTemplatesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetDescriptionTemplatesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["descriptionTemplate", ["DescriptionTemplateType[]", XSD::QName.new(NsEBLBaseComponents, "DescriptionTemplate")], [0, nil]],
      ["layoutTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LayoutTotal")], [0, 1]],
      ["obsoleteLayoutID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteLayoutID")], [0, nil]],
      ["obsoleteThemeID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ObsoleteThemeID")], [0, nil]],
      ["themeGroup", ["ThemeGroupType[]", XSD::QName.new(NsEBLBaseComponents, "ThemeGroup")], [0, nil]],
      ["themeTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ThemeTotal")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDisputeRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetDisputeRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDisputeResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetDisputeResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dispute", ["DisputeType", XSD::QName.new(NsEBLBaseComponents, "Dispute")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFeedbackRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["commentType", ["CommentTypeCodeType[]", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFeedbackResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetFeedbackResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackDetailArray", ["FeedbackDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailArray")], [0, 1]],
      ["feedbackDetailItemTotal", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackDetailItemTotal")], [0, 1]],
      ["feedbackSummary", ["FeedbackSummaryType", XSD::QName.new(NsEBLBaseComponents, "FeedbackSummary")], [0, 1]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["entriesPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "EntriesPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetHighBiddersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetHighBiddersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetHighBiddersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidArray", ["OfferArrayType", XSD::QName.new(NsEBLBaseComponents, "BidArray")], [0, 1]],
      ["listingStatus", ["ListingStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["includeCrossPromotion", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCrossPromotion")], [0, 1]],
      ["includeItemSpecifics", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemSpecifics")], [0, 1]],
      ["includeTaxTable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeTaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRecommendationsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsRequestContainer", ["GetRecommendationsRequestContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsRequestContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemRecommendationsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemRecommendationsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["getRecommendationsResponseContainer", ["GetRecommendationsResponseContainerType[]", XSD::QName.new(NsEBLBaseComponents, "GetRecommendationsResponseContainer")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemShippingRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["quantitySold", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "QuantitySold")], [0, 1]],
      ["destinationPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DestinationPostalCode")], [0, 1]],
      ["destinationCountryCode", ["CountryCodeType", XSD::QName.new(NsEBLBaseComponents, "DestinationCountryCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemShippingResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemShippingResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["shippingDetails", ["ShippingDetailsType", XSD::QName.new(NsEBLBaseComponents, "ShippingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemTransactionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemTransactionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemTransactionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemsAwaitingFeedbackRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sort", ["ItemSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetItemsAwaitingFeedbackResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetItemsAwaitingFeedbackResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemsAwaitingFeedback", ["PaginatedTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemsAwaitingFeedback")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionBiddersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userCatalogID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "UserCatalogID")], [0, 1]],
      ["bidderStatus", ["BidderStatusCodeType[]", XSD::QName.new(NsEBLBaseComponents, "BidderStatus")], [0, nil]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionBiddersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionBiddersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderDetails", ["BidderDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "BidderDetails")], [0, 1]],
      ["totalPending", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalPending")], [0, 1]],
      ["totalApproved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalApproved")], [0, 1]],
      ["totalDenied", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalDenied")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionCatalogDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLiveAuctionCatalogDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetLiveAuctionCatalogDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["liveAuctionCatalog", ["LiveAuctionCatalogType[]", XSD::QName.new(NsEBLBaseComponents, "LiveAuctionCatalog")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMemberMessagesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["mailMessageType", ["MessageTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MailMessageType")], [0, 1]],
      ["messageStatus", ["MessageStatusTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "MessageStatus")], [0, 1]],
      ["displayToPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DisplayToPublic")], [0, 1]],
      ["startCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartCreationTime")], [0, 1]],
      ["endCreationTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndCreationTime")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["memberMessageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MemberMessageID")], [0, 1]],
      ["senderID", [nil, XSD::QName.new(NsEBLBaseComponents, "SenderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMemberMessagesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMemberMessagesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["memberMessage", ["MemberMessageExchangeArrayType", XSD::QName.new(NsEBLBaseComponents, "MemberMessage")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMessagePreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]],
      ["includeASQPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMessagePreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMessagePreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyMessagesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["externalMessageIDs", ["MyMessagesExternalMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ExternalMessageIDs")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyMessagesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyMessagesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["summary", ["MyMessagesSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["alerts", ["MyMessagesAlertArrayType", XSD::QName.new(NsEBLBaseComponents, "Alerts")], [0, 1]],
      ["messages", ["MyMessagesMessageArrayType", XSD::QName.new(NsEBLBaseComponents, "Messages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayBuyingRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["MyeBaySelectionType", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, 1]],
      ["bidAssistantList", ["BidAssistantListType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayBuyingResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayBuyingResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingSummary", ["BuyingSummaryType", XSD::QName.new(NsEBLBaseComponents, "BuyingSummary")], [0, 1]],
      ["watchList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "WatchList")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["bestOfferList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BestOfferList")], [0, 1]],
      ["wonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "WonList")], [0, 1]],
      ["lostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "LostList")], [0, 1]],
      ["favoriteSearches", ["MyeBayFavoriteSearchListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSearches")], [0, 1]],
      ["favoriteSellers", ["MyeBayFavoriteSellerListType", XSD::QName.new(NsEBLBaseComponents, "FavoriteSellers")], [0, 1]],
      ["secondChanceOffer", ["ItemType[]", XSD::QName.new(NsEBLBaseComponents, "SecondChanceOffer")], [0, nil]],
      ["bidAssistantList", ["BidGroupArrayType", XSD::QName.new(NsEBLBaseComponents, "BidAssistantList")], [0, 1]],
      ["deletedFromWonList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromWonList")], [0, 1]],
      ["deletedFromLostList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromLostList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayRemindersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["ReminderCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBayRemindersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBayRemindersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["buyingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "BuyingReminders")], [0, 1]],
      ["sellingReminders", ["RemindersType", XSD::QName.new(NsEBLBaseComponents, "SellingReminders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBaySellingRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["scheduledList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["bidList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["ItemListCustomizationType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMyeBaySellingResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetMyeBaySellingResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingSummary", ["SellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "SellingSummary")], [0, 1]],
      ["scheduledList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ScheduledList")], [0, 1]],
      ["activeList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ActiveList")], [0, 1]],
      ["soldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "SoldList")], [0, 1]],
      ["unsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "UnsoldList")], [0, 1]],
      ["summary", ["MyeBaySellingSummaryType", XSD::QName.new(NsEBLBaseComponents, "Summary")], [0, 1]],
      ["bidList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "BidList")], [0, 1]],
      ["deletedFromSoldList", ["PaginatedOrderTransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromSoldList")], [0, 1]],
      ["deletedFromUnsoldList", ["PaginatedItemArrayType", XSD::QName.new(NsEBLBaseComponents, "DeletedFromUnsoldList")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationPreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["preferenceLevel", ["NotificationRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "PreferenceLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationPreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetNotificationPreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationsUsageRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNotificationsUsageResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetNotificationsUsageResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["notificationDetailsArray", ["NotificationDetailsArrayType", XSD::QName.new(NsEBLBaseComponents, "NotificationDetailsArray")], [0, 1]],
      ["markUpMarkDownHistory", ["MarkUpMarkDownHistoryType", XSD::QName.new(NsEBLBaseComponents, "MarkUpMarkDownHistory")], [0, 1]],
      ["notificationStatistics", ["NotificationStatisticsType", XSD::QName.new(NsEBLBaseComponents, "NotificationStatistics")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrderTransactionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemTransactionIDArray", ["ItemTransactionIDArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemTransactionIDArray")], [0, 1]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["includeFinalValueFees", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFees")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrderTransactionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetOrderTransactionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetOrdersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["orderIDArray", ["OrderIDArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderIDArray")], [0, 1]],
      ["createTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeFrom")], [0, 1]],
      ["createTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "CreateTimeTo")], [0, 1]],
      ["orderRole", ["TradingRoleCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderRole")], [0, 1]],
      ["orderStatus", ["OrderStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "OrderStatus")], [0, 1]],
      ["listingType", ["ListingTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "ListingType")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetOrdersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreOrders")], [0, 1]],
      ["orderArray", ["OrderArrayType", XSD::QName.new(NsEBLBaseComponents, "OrderArray")], [0, 1]],
      ["ordersPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "OrdersPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedOrderCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedOrderCountActual")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["folderID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]],
      ["pictureURL", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureURL")], [0, 1]],
      ["pictureManagerDetailLevel", ["PictureManagerDetailLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetailLevel")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerOptionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPictureManagerOptionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPictureManagerOptionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["subscription", ["PictureManagerSubscriptionType[]", XSD::QName.new(NsEBLBaseComponents, "Subscription")], [0, nil]],
      ["pictureType", ["PictureManagerPictureDisplayType[]", XSD::QName.new(NsEBLBaseComponents, "PictureType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPopularKeywordsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, nil]],
      ["includeChildCategories", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeChildCategories")], [0, 1]],
      ["maxKeywordsRetrieved", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxKeywordsRetrieved")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPopularKeywordsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPopularKeywordsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFamilyMembersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFamilyMembersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFamilyMembersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "ProductFinderID")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productFinderData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductFinderData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderXSLRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileName")], [0, 1]],
      ["fileVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FileVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductFinderXSLResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductFinderXSLResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["xSLFile", ["XSLFileType[]", XSD::QName.new(NsEBLBaseComponents, "XSLFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchPageRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["attributeSetID", ["SOAP::SOAPInt[]", XSD::QName.new(NsEBLBaseComponents, "AttributeSetID")], [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchPageResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchPageResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["attributeSystemVersion", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "AttributeSystemVersion")], [0, 1]],
      ["productSearchPage", ["ProductSearchPageType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchPage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchResultsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSearchResultsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSearchResultsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["dataElementSets", ["DataElementSetType[]", XSD::QName.new(NsEBLBaseComponents, "DataElementSets")], [0, nil]],
      ["productSearchResult", ["ProductSearchResultType[]", XSD::QName.new(NsEBLBaseComponents, "ProductSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSellingPagesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["useCase", ["ProductUseCaseCodeType", XSD::QName.new(NsEBLBaseComponents, "UseCase")], [0, 1]],
      ["product", ["ProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductSellingPagesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductSellingPagesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSellingPagesData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductSellingPagesData")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["productSearch", ["ProductSearchType", XSD::QName.new(NsEBLBaseComponents, "ProductSearch")], [0, 1]],
      ["productSort", ["ProductSortCodeType", XSD::QName.new(NsEBLBaseComponents, "ProductSort")], [0, 1]],
      ["includeItemArray", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeItemArray")], [0, 1]],
      ["includeReviewDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReviewDetails")], [0, 1]],
      ["includeBuyingGuideDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeBuyingGuideDetails")], [0, 1]],
      ["includeHistogram", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeHistogram")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetProductsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetProductsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["characteristicsSetProductHistogram", ["CharacteristicsSetProductHistogramType", XSD::QName.new(NsEBLBaseComponents, "CharacteristicsSetProductHistogram")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["approximatePages", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ApproximatePages")], [0, 1]],
      ["hasMore", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMore")], [0, 1]],
      ["totalProducts", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TotalProducts")], [0, 1]],
      ["product", ["CatalogProductType[]", XSD::QName.new(NsEBLBaseComponents, "Product")], [0, nil]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionRulesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["promotionMethod", ["PromotionMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PromotionMethod")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionRulesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPromotionRulesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionRuleArray", ["PromotionRuleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionRuleArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionalSaleDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPromotionalSaleDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetPromotionalSaleDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleDetails", ["PromotionalSaleArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSearchResultsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["motorsGermanySearchable", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "MotorsGermanySearchable")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["searchFlags", ["SearchFlagsCodeType[]", XSD::QName.new(NsEBLBaseComponents, "SearchFlags")], [0, nil]],
      ["priceRangeFilter", ["PriceRangeFilterType", XSD::QName.new(NsEBLBaseComponents, "PriceRangeFilter")], [0, 1]],
      ["proximitySearch", ["ProximitySearchType", XSD::QName.new(NsEBLBaseComponents, "ProximitySearch")], [0, 1]],
      ["itemTypeFilter", ["ItemTypeFilterCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemTypeFilter")], [0, 1]],
      ["searchType", ["SearchTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "SearchType")], [0, 1]],
      ["userIdFilter", ["UserIdFilterType", XSD::QName.new(NsEBLBaseComponents, "UserIdFilter")], [0, 1]],
      ["searchLocationFilter", ["SearchLocationFilterType", XSD::QName.new(NsEBLBaseComponents, "SearchLocationFilter")], [0, 1]],
      ["storeSearchFilter", ["SearchStoreFilterType", XSD::QName.new(NsEBLBaseComponents, "StoreSearchFilter")], [0, 1]],
      ["order", ["SearchSortOrderCodeType", XSD::QName.new(NsEBLBaseComponents, "Order")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["searchRequest", ["SearchRequestType", XSD::QName.new(NsEBLBaseComponents, "SearchRequest")], [0, 1]],
      ["productID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ProductID")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]],
      ["categories", ["RequestCategoriesType", XSD::QName.new(NsEBLBaseComponents, "Categories")], [0, 1]],
      ["totalOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "TotalOnly")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["includeGetItFastItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeGetItFastItems")], [0, 1]],
      ["paymentMethod", ["PaymentMethodSearchCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethod")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["expandSearch", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpandSearch")], [0, 1]],
      ["lot", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Lot")], [0, 1]],
      ["adFormat", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdFormat")], [0, 1]],
      ["freeShipping", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "FreeShipping")], [0, 1]],
      ["quantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Quantity")], [0, 1]],
      ["quantityOperator", ["QuantityOperatorCodeType", XSD::QName.new(NsEBLBaseComponents, "QuantityOperator")], [0, 1]],
      ["sellerBusinessType", ["SellerBusinessCodeType", XSD::QName.new(NsEBLBaseComponents, "SellerBusinessType")], [0, 1]],
      ["includeCondition", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeCondition")], [0, 1]],
      ["includeFeedback", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFeedback")], [0, 1]],
      ["charityID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CharityID")], [0, 1]],
      ["localSearchPostalCode", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "LocalSearchPostalCode")], [0, 1]],
      ["maxRelatedSearchKeywords", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxRelatedSearchKeywords")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]],
      ["bidRange", ["BidRangeType", XSD::QName.new(NsEBLBaseComponents, "BidRange")], [0, 1]],
      ["itemCondition", ["ItemConditionCodeType", XSD::QName.new(NsEBLBaseComponents, "ItemCondition")], [0, 1]],
      ["ticketFinder", ["TicketDetailsType", XSD::QName.new(NsEBLBaseComponents, "TicketFinder")], [0, 1]],
      ["group", ["GroupType", XSD::QName.new(NsEBLBaseComponents, "Group")], [0, 1]],
      ["hideDuplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HideDuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSearchResultsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSearchResultsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchResultItemArray", ["SearchResultItemArrayType", XSD::QName.new(NsEBLBaseComponents, "SearchResultItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["categoryArray", ["CategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "CategoryArray")], [0, 1]],
      ["buyingGuideDetails", ["BuyingGuideDetailsType", XSD::QName.new(NsEBLBaseComponents, "BuyingGuideDetails")], [0, 1]],
      ["storeExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreExpansionArray")], [0, 1]],
      ["internationalExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "InternationalExpansionArray")], [0, 1]],
      ["filterRemovedExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "FilterRemovedExpansionArray")], [0, 1]],
      ["allCategoriesExpansionArray", ["ExpansionArrayType", XSD::QName.new(NsEBLBaseComponents, "AllCategoriesExpansionArray")], [0, 1]],
      ["spellingSuggestion", ["SpellingSuggestionType", XSD::QName.new(NsEBLBaseComponents, "SpellingSuggestion")], [0, 1]],
      ["relatedSearchKeywordArray", ["RelatedSearchKeywordArrayType", XSD::QName.new(NsEBLBaseComponents, "RelatedSearchKeywordArray")], [0, 1]],
      ["duplicateItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "DuplicateItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerDashboardRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerDashboardResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerDashboardResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["searchStanding", ["SearchStandingDashboardType", XSD::QName.new(NsEBLBaseComponents, "SearchStanding")], [0, 1]],
      ["sellerFeeDiscount", ["SellerFeeDiscountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerFeeDiscount")], [0, 1]],
      ["powerSellerStatus", ["PowerSellerDashboardType", XSD::QName.new(NsEBLBaseComponents, "PowerSellerStatus")], [0, 1]],
      ["policyCompliance", ["PolicyComplianceDashboardType", XSD::QName.new(NsEBLBaseComponents, "PolicyCompliance")], [0, 1]],
      ["buyerSatisfaction", ["BuyerSatisfactionDashboardType", XSD::QName.new(NsEBLBaseComponents, "BuyerSatisfaction")], [0, 1]],
      ["sellerAccount", ["SellerAccountDashboardType", XSD::QName.new(NsEBLBaseComponents, "SellerAccount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerEventsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["newItemFilter", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "NewItemFilter")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerEventsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerEventsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerListRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerListRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["motorsDealerUsers", ["UserIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MotorsDealerUsers")], [0, 1]],
      ["endTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeFrom")], [0, 1]],
      ["endTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTimeTo")], [0, 1]],
      ["sort", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "Sort")], [0, 1]],
      ["startTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeFrom")], [0, 1]],
      ["startTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["granularityLevel", ["GranularityLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "GranularityLevel")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["includeWatchCount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeWatchCount")], [0, 1]],
      ["adminEndedItemsOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AdminEndedItemsOnly")], [0, 1]],
      ["categoryID", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerListResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerListResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemArray", ["ItemArrayType", XSD::QName.new(NsEBLBaseComponents, "ItemArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedItemCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedItemCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerPaymentsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["paymentTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeFrom")], [0, 1]],
      ["paymentTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "PaymentTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerPaymentsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerPaymentsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMorePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMorePayments")], [0, 1]],
      ["sellerPayment", ["SellerPaymentType[]", XSD::QName.new(NsEBLBaseComponents, "SellerPayment")], [0, nil]],
      ["paymentsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PaymentsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedPaymentCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedPaymentCountActual")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerTransactionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]],
      ["includeFinalValueFee", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeFinalValueFee")], [0, 1]],
      ["includeContainingOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeContainingOrder")], [0, 1]],
      ["sKUArray", ["SKUArrayType", XSD::QName.new(NsEBLBaseComponents, "SKUArray")], [0, 1]],
      ["platform", ["TransactionPlatformCodeType", XSD::QName.new(NsEBLBaseComponents, "Platform")], [0, 1]],
      ["numberOfDays", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "NumberOfDays")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSellerTransactionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSellerTransactionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreTransactions")], [0, 1]],
      ["transactionsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "TransactionsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["returnedTransactionCountActual", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ReturnedTransactionCountActual")], [0, 1]],
      ["seller", ["UserType", XSD::QName.new(NsEBLBaseComponents, "Seller")], [0, 1]],
      ["transactionArray", ["TransactionArrayType", XSD::QName.new(NsEBLBaseComponents, "TransactionArray")], [0, 1]],
      ["payPalPreferred", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PayPalPreferred")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSessionIDRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["ruName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RuName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSessionIDResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSessionIDResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sessionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SessionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShippingDiscountProfilesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShippingDiscountProfilesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetShippingDiscountProfilesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["promotionalShippingDiscount", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryStructureOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "CategoryStructureOnly")], [0, 1]],
      ["rootCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "RootCategoryID")], [0, 1]],
      ["levelLimit", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "LevelLimit")], [0, 1]],
      ["userID", [nil, XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCategoryUpdateStatusRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCategoryUpdateStatusResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreCategoryUpdateStatusResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCustomPageRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pageID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PageID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreCustomPageResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreCustomPageResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPageArray", ["StoreCustomPageArrayType", XSD::QName.new(NsEBLBaseComponents, "CustomPageArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreOptionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStoreOptionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStoreOptionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["basicThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "BasicThemeArray")], [0, 1]],
      ["advancedThemeArray", ["StoreThemeArrayType", XSD::QName.new(NsEBLBaseComponents, "AdvancedThemeArray")], [0, 1]],
      ["logoArray", ["StoreLogoArrayType", XSD::QName.new(NsEBLBaseComponents, "LogoArray")], [0, 1]],
      ["subscriptionArray", ["StoreSubscriptionArrayType", XSD::QName.new(NsEBLBaseComponents, "SubscriptionArray")], [0, 1]],
      ["maxCategories", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategories")], [0, 1]],
      ["maxCategoryLevels", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "MaxCategoryLevels")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStorePreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetStorePreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetStorePreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSuggestedCategoriesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSuggestedCategoriesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetSuggestedCategoriesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["suggestedCategoryArray", ["SuggestedCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "SuggestedCategoryArray")], [0, 1]],
      ["categoryCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CategoryCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTaxTableRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTaxTableResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetTaxTableResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["lastUpdateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "LastUpdateTime")], [0, 1]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTokenStatusRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTokenStatusResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetTokenStatusResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["tokenStatus", ["TokenStatusType", XSD::QName.new(NsEBLBaseComponents, "TokenStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["user", ["UserType", XSD::QName.new(NsEBLBaseComponents, "User")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserContactDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["contactID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ContactID")], [0, 1]],
      ["requesterID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RequesterID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserContactDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserContactDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["userID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserID")], [0, 1]],
      ["contactAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ContactAddress")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserDisputesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeFilterType", ["DisputeFilterTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterType")], [0, 1]],
      ["disputeSortType", ["DisputeSortTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeSortType")], [0, 1]],
      ["modTimeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeFrom")], [0, 1]],
      ["modTimeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "ModTimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserDisputesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserDisputesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "StartingDisputeID")], [0, 1]],
      ["endingDisputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "EndingDisputeID")], [0, 1]],
      ["disputeArray", ["DisputeArrayType", XSD::QName.new(NsEBLBaseComponents, "DisputeArray")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["disputeFilterCount", ["DisputeFilterCountType[]", XSD::QName.new(NsEBLBaseComponents, "DisputeFilterCount")], [0, nil]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserPreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["showBidderNoticePreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowBidderNoticePreferences")]],
      ["showCombinedPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCombinedPaymentPreferences")]],
      ["showCrossPromotionPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowCrossPromotionPreferences")]],
      ["showSellerPaymentPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerPaymentPreferences")]],
      ["showEndOfAuctionEmailPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEndOfAuctionEmailPreferences")], [0, 1]],
      ["showSellerFavoriteItemPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowSellerFavoriteItemPreferences")], [0, 1]],
      ["showProStoresPreferences", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowProStoresPreferences")], [0, 1]],
      ["showEmailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShowEmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetUserPreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetUserPreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]],
      ["proStoresPreference", ["ProStoresCheckoutPreferenceType", XSD::QName.new(NsEBLBaseComponents, "ProStoresPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReasonCodeDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["reasonCodeID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ReasonCodeID")], [0, 1]],
      ["returnAllSites", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ReturnAllSites")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReasonCodeDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetVeROReasonCodeDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReasonCodeDetails", ["VeROReasonCodeDetailsType", XSD::QName.new(NsEBLBaseComponents, "VeROReasonCodeDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReportStatusRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["includeReportedItemDetails", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeReportedItemDetails")], [0, 1]],
      ["timeFrom", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeFrom")], [0, 1]],
      ["timeTo", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "TimeTo")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetVeROReportStatusResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetVeROReportStatusResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]],
      ["reportedItemDetails", ["VeROReportedItemDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReportedItemDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowPostRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowPostResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowPostResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPost", ["WantItNowPostType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowSearchResultsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["query", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Query")], [0, 1]],
      ["searchInDescription", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchInDescription")], [0, 1]],
      ["searchWorldwide", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SearchWorldwide")], [0, 1]],
      ["pagination", ["PaginationType", XSD::QName.new(NsEBLBaseComponents, "Pagination")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetWantItNowSearchResultsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GetWantItNowSearchResultsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["wantItNowPostArray", ["WantItNowPostArrayType", XSD::QName.new(NsEBLBaseComponents, "WantItNowPostArray")], [0, 1]],
      ["hasMoreItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "HasMoreItems")], [0, 1]],
      ["itemsPerPage", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "ItemsPerPage")], [0, 1]],
      ["pageNumber", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PageNumber")], [0, 1]],
      ["paginationResult", ["PaginationResultType", XSD::QName.new(NsEBLBaseComponents, "PaginationResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["detailName", ["DetailNameCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GeteBayDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["countryDetails", ["CountryDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CountryDetails")], [0, nil]],
      ["currencyDetails", ["CurrencyDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "CurrencyDetails")], [0, nil]],
      ["dispatchTimeMaxDetails", ["DispatchTimeMaxDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "DispatchTimeMaxDetails")], [0, nil]],
      ["paymentOptionDetails", ["PaymentOptionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentOptionDetails")], [0, nil]],
      ["regionDetails", ["RegionDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionDetails")], [0, nil]],
      ["shippingLocationDetails", ["ShippingLocationDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingLocationDetails")], [0, nil]],
      ["shippingServiceDetails", ["ShippingServiceDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceDetails")], [0, nil]],
      ["siteDetails", ["SiteDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "SiteDetails")], [0, nil]],
      ["taxJurisdiction", ["TaxJurisdictionType[]", XSD::QName.new(NsEBLBaseComponents, "TaxJurisdiction")], [0, nil]],
      ["uRLDetails", ["URLDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "URLDetails")], [0, nil]],
      ["timeZoneDetails", ["TimeZoneDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "TimeZoneDetails")], [0, nil]],
      ["itemSpecificDetails", ["ItemSpecificDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ItemSpecificDetails")], [0, nil]],
      ["unitOfMeasurementDetails", ["UnitOfMeasurementDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "UnitOfMeasurementDetails")], [0, nil]],
      ["regionOfOriginDetails", ["RegionOfOriginDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "RegionOfOriginDetails")], [0, nil]],
      ["shippingPackageDetails", ["ShippingPackageDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingPackageDetails")], [0, nil]],
      ["shippingCarrierDetails", ["ShippingCarrierDetailsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingCarrierDetails")], [0, nil]],
      ["returnPolicyDetails", ["ReturnPolicyDetailsType", XSD::QName.new(NsEBLBaseComponents, "ReturnPolicyDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayOfficialTimeRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => GeteBayOfficialTimeResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "GeteBayOfficialTimeResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => IssueRefundRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "IssueRefundRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["refundReason", ["RefundReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundReason")], [0, 1]],
      ["refundType", ["RefundTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "RefundType")], [0, 1]],
      ["refundAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundAmount")], [0, 1]],
      ["refundMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RefundMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => IssueRefundResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "IssueRefundResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["refundFromSeller", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "RefundFromSeller")], [0, 1]],
      ["totalRefundToBuyer", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "TotalRefundToBuyer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LeaveFeedbackRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["commentText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CommentText")], [0, 1]],
      ["commentType", ["CommentTypeCodeType", XSD::QName.new(NsEBLBaseComponents, "CommentType")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUser", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUser")], [0, 1]],
      ["sellerItemRatingDetailArray", ["ItemRatingDetailArrayType", XSD::QName.new(NsEBLBaseComponents, "SellerItemRatingDetailArray")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LeaveFeedbackResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "LeaveFeedbackResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => PlaceOfferRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["offer", ["OfferType", XSD::QName.new(NsEBLBaseComponents, "Offer")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["blockOnWarning", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "BlockOnWarning")], [0, 1]],
      ["affiliateTrackingDetails", ["AffiliateTrackingDetailsType", XSD::QName.new(NsEBLBaseComponents, "AffiliateTrackingDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => PlaceOfferResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "PlaceOfferResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["sellingStatus", ["SellingStatusType", XSD::QName.new(NsEBLBaseComponents, "SellingStatus")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["bestOffer", ["BestOfferType", XSD::QName.new(NsEBLBaseComponents, "BestOffer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RelistItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RelistItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => RelistItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RelistItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RemoveFromWatchListRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", ["[]", XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, nil]],
      ["removeAllItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "RemoveAllItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RemoveFromWatchListResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RemoveFromWatchListResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["watchListCount", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListCount")], [0, 1]],
      ["watchListMaximum", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "WatchListMaximum")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToBestOfferRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["bestOfferID", ["[]", XSD::QName.new(NsEBLBaseComponents, "BestOfferID")], [0, nil]],
      ["action", ["BestOfferActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["sellerResponse", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerResponse")], [0, 1]],
      ["counterOfferPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CounterOfferPrice")], [0, 1]],
      ["counterOfferQuantity", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "CounterOfferQuantity")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToBestOfferResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToBestOfferResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["respondToBestOffer", ["BestOfferArrayType", XSD::QName.new(NsEBLBaseComponents, "RespondToBestOffer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToFeedbackRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "FeedbackID")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["targetUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "TargetUserID")], [0, 1]],
      ["responseType", ["FeedbackResponseCodeType", XSD::QName.new(NsEBLBaseComponents, "ResponseType")], [0, 1]],
      ["responseText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ResponseText")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToFeedbackResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToFeedbackResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToWantItNowPostRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["postID", [nil, XSD::QName.new(NsEBLBaseComponents, "PostID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RespondToWantItNowPostResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RespondToWantItNowPostResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseCheckoutStatusRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["amountPaid", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AmountPaid")], [0, 1]],
      ["paymentMethodUsed", ["BuyerPaymentMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentMethodUsed")], [0, 1]],
      ["checkoutStatus", ["CompleteStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutStatus")], [0, 1]],
      ["shippingService", ["SOAP::SOAPToken", XSD::QName.new(NsEBLBaseComponents, "ShippingService")], [0, 1]],
      ["shippingIncludedInTax", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ShippingIncludedInTax")], [0, 1]],
      ["checkoutMethod", ["CheckoutMethodCodeType", XSD::QName.new(NsEBLBaseComponents, "CheckoutMethod")], [0, 1]],
      ["insuranceType", ["InsuranceSelectedCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceType")], [0, 1]],
      ["paymentStatus", ["RCSPaymentStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "PaymentStatus")], [0, 1]],
      ["adjustmentAmount", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "AdjustmentAmount")], [0, 1]],
      ["shippingAddress", ["AddressType", XSD::QName.new(NsEBLBaseComponents, "ShippingAddress")], [0, 1]],
      ["buyerID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "BuyerID")], [0, 1]],
      ["shippingInsuranceCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsuranceCost")], [0, 1]],
      ["salesTax", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["shippingCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "ShippingCost")], [0, 1]],
      ["encryptedID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EncryptedID")], [0, 1]],
      ["externalTransaction", ["ExternalTransactionType", XSD::QName.new(NsEBLBaseComponents, "ExternalTransaction")], [0, 1]],
      ["multipleSellerPaymentID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MultipleSellerPaymentID")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseCheckoutStatusResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseCheckoutStatusResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseLiveAuctionItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["deletedField", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "DeletedField")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseLiveAuctionItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseLiveAuctionItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageIDs", ["MyMessagesMessageIDArrayType", XSD::QName.new(NsEBLBaseComponents, "MessageIDs")], [0, 1]],
      ["alertIDs", ["MyMessagesAlertIDArrayType", XSD::QName.new(NsEBLBaseComponents, "AlertIDs")], [0, 1]],
      ["read", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Read")], [0, 1]],
      ["flagged", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "Flagged")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesFoldersRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["operation", ["MyMessagesFolderOperationCodeType", XSD::QName.new(NsEBLBaseComponents, "Operation")], [0, 1]],
      ["folderID", ["SOAP::SOAPLong[]", XSD::QName.new(NsEBLBaseComponents, "FolderID")], [0, nil]],
      ["folderName", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "FolderName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ReviseMyMessagesFoldersResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ReviseMyMessagesFoldersResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => RevokeTokenRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["unsubscribeNotification", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "UnsubscribeNotification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => RevokeTokenResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "RevokeTokenResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerReverseDisputeRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["disputeID", [nil, XSD::QName.new(NsEBLBaseComponents, "DisputeID")], [0, 1]],
      ["disputeResolutionReason", ["DisputeResolutionReasonCodeType", XSD::QName.new(NsEBLBaseComponents, "DisputeResolutionReason")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SellerReverseDisputeResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SellerReverseDisputeResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SendInvoiceRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]],
      ["orderID", [nil, XSD::QName.new(NsEBLBaseComponents, "OrderID")], [0, 1]],
      ["internationalShippingServiceOptions", ["InternationalShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingServiceOptions")], [0, nil]],
      ["shippingServiceOptions", ["ShippingServiceOptionsType[]", XSD::QName.new(NsEBLBaseComponents, "ShippingServiceOptions")], [0, nil]],
      ["salesTax", ["SalesTaxType", XSD::QName.new(NsEBLBaseComponents, "SalesTax")], [0, 1]],
      ["insuranceOption", ["InsuranceOptionCodeType", XSD::QName.new(NsEBLBaseComponents, "InsuranceOption")], [0, 1]],
      ["insuranceFee", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "InsuranceFee")], [0, 1]],
      ["paymentMethods", ["BuyerPaymentMethodCodeType[]", XSD::QName.new(NsEBLBaseComponents, "PaymentMethods")], [0, nil]],
      ["payPalEmailAddress", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PayPalEmailAddress")], [0, 1]],
      ["checkoutInstructions", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CheckoutInstructions")], [0, 1]],
      ["emailCopyToSeller", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailCopyToSeller")], [0, 1]],
      ["cODCost", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "CODCost")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SendInvoiceResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SendInvoiceResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetMessagePreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["aSQPreferences", ["ASQPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ASQPreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetMessagePreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetMessagePreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetNotificationPreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["applicationDeliveryPreferences", ["ApplicationDeliveryPreferencesType", XSD::QName.new(NsEBLBaseComponents, "ApplicationDeliveryPreferences")], [0, 1]],
      ["userDeliveryPreferenceArray", ["NotificationEnableArrayType", XSD::QName.new(NsEBLBaseComponents, "UserDeliveryPreferenceArray")], [0, 1]],
      ["userData", ["NotificationUserDataType", XSD::QName.new(NsEBLBaseComponents, "UserData")], [0, 1]],
      ["eventProperty", ["NotificationEventPropertyType[]", XSD::QName.new(NsEBLBaseComponents, "EventProperty")], [0, nil]],
      ["deliveryURLName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "DeliveryURLName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetNotificationPreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetNotificationPreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPictureManagerDetailsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureManagerDetails", ["PictureManagerDetailsType", XSD::QName.new(NsEBLBaseComponents, "PictureManagerDetails")], [0, 1]],
      ["action", ["PictureManagerActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPictureManagerDetailsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPictureManagerDetailsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleDetails", ["PromotionalSaleType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleListingsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["promotionalSaleID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleID")], [0, 1]],
      ["action", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["promotionalSaleItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "PromotionalSaleItemIDArray")], [0, 1]],
      ["storeCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "StoreCategoryID")], [0, 1]],
      ["categoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["allFixedPriceItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllFixedPriceItems")], [0, 1]],
      ["allStoreInventoryItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllStoreInventoryItems")], [0, 1]],
      ["allAuctionItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "AllAuctionItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetPromotionalSaleListingsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetPromotionalSaleListingsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["status", ["PromotionalSaleStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetSellingManagerFeedbackOptionsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["automatedLeaveFeedbackEvent", ["AutomatedLeaveFeedbackEventCodeType", XSD::QName.new(NsEBLBaseComponents, "AutomatedLeaveFeedbackEvent")], [0, 1]],
      ["storedComments", ["FeedbackCommentArrayType", XSD::QName.new(NsEBLBaseComponents, "StoredComments")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetSellingManagerFeedbackOptionsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetSellingManagerFeedbackOptionsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetShippingDiscountProfilesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["currencyID", ["CurrencyCodeType", XSD::QName.new(NsEBLBaseComponents, "CurrencyID")], [0, 1]],
      ["combinedDuration", ["CombinedPaymentPeriodCodeType", XSD::QName.new(NsEBLBaseComponents, "CombinedDuration")], [0, 1]],
      ["modifyActionCode", ["ModifyActionCodeType", XSD::QName.new(NsEBLBaseComponents, "ModifyActionCode")], [0, 1]],
      ["flatShippingDiscount", ["FlatShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "FlatShippingDiscount")], [0, 1]],
      ["calculatedShippingDiscount", ["CalculatedShippingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedShippingDiscount")], [0, 1]],
      ["calculatedHandlingDiscount", ["CalculatedHandlingDiscountType", XSD::QName.new(NsEBLBaseComponents, "CalculatedHandlingDiscount")], [0, 1]],
      ["promotionalShippingDiscountDetails", ["PromotionalShippingDiscountDetailsType", XSD::QName.new(NsEBLBaseComponents, "PromotionalShippingDiscountDetails")], [0, 1]],
      ["shippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "ShippingInsurance")], [0, 1]],
      ["internationalShippingInsurance", ["ShippingInsuranceType", XSD::QName.new(NsEBLBaseComponents, "InternationalShippingInsurance")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetShippingDiscountProfilesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetShippingDiscountProfilesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["store", ["StoreType", XSD::QName.new(NsEBLBaseComponents, "Store")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCategoriesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["action", ["StoreCategoryUpdateActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["itemDestinationCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "ItemDestinationCategoryID")], [0, 1]],
      ["destinationParentCategoryID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "DestinationParentCategoryID")], [0, 1]],
      ["storeCategories", ["StoreCustomCategoryArrayType", XSD::QName.new(NsEBLBaseComponents, "StoreCategories")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCategoriesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreCategoriesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taskID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "TaskID")], [0, 1]],
      ["status", ["TaskStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "Status")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCustomPageRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStoreCustomPageResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStoreCustomPageResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["customPage", ["StoreCustomPageType", XSD::QName.new(NsEBLBaseComponents, "CustomPage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStorePreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["storePreferences", ["StorePreferencesType", XSD::QName.new(NsEBLBaseComponents, "StorePreferences")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetStorePreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetStorePreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetTaxTableRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["taxTable", ["TaxTableType", XSD::QName.new(NsEBLBaseComponents, "TaxTable")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetTaxTableResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetTaxTableResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserNotesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["action", ["SetUserNotesActionCodeType", XSD::QName.new(NsEBLBaseComponents, "Action")], [0, 1]],
      ["noteText", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NoteText")], [0, 1]],
      ["transactionID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "TransactionID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserNotesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetUserNotesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserPreferencesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["bidderNoticePreferences", ["BidderNoticePreferencesType", XSD::QName.new(NsEBLBaseComponents, "BidderNoticePreferences")], [0, 1]],
      ["combinedPaymentPreferences", ["CombinedPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CombinedPaymentPreferences")], [0, 1]],
      ["crossPromotionPreferences", ["CrossPromotionPreferencesType", XSD::QName.new(NsEBLBaseComponents, "CrossPromotionPreferences")], [0, 1]],
      ["sellerPaymentPreferences", ["SellerPaymentPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerPaymentPreferences")], [0, 1]],
      ["sellerFavoriteItemPreferences", ["SellerFavoriteItemPreferencesType", XSD::QName.new(NsEBLBaseComponents, "SellerFavoriteItemPreferences")], [0, 1]],
      ["endOfAuctionEmailPreferences", ["EndOfAuctionEmailPreferencesType", XSD::QName.new(NsEBLBaseComponents, "EndOfAuctionEmailPreferences")], [0, 1]],
      ["emailShipmentTrackingNumberPreference", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EmailShipmentTrackingNumberPreference")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SetUserPreferencesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "SetUserPreferencesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => UploadSiteHostedPicturesRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "PictureName")], [0, 1]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["pictureSet", ["PictureSetCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureSet")], [0, 1]],
      ["pictureData", ["Base64BinaryType", XSD::QName.new(NsEBLBaseComponents, "PictureData")], [0, 1]],
      ["pictureUploadPolicy", ["PictureUploadPolicyCodeType", XSD::QName.new(NsEBLBaseComponents, "PictureUploadPolicy")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => UploadSiteHostedPicturesResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "UploadSiteHostedPicturesResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["pictureSystemVersion", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "PictureSystemVersion")], [0, 1]],
      ["siteHostedPictureDetails", ["SiteHostedPictureDetailsType", XSD::QName.new(NsEBLBaseComponents, "SiteHostedPictureDetails")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateChallengeInputRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["challengeToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ChallengeToken")], [0, 1]],
      ["userInput", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "UserInput")], [0, 1]],
      ["keepTokenValid", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "KeepTokenValid")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateChallengeInputResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ValidateChallengeInputResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["validToken", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ValidToken")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateTestUserRegistrationRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["feedbackScore", ["SOAP::SOAPInt", XSD::QName.new(NsEBLBaseComponents, "FeedbackScore")], [0, 1]],
      ["registrationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "RegistrationDate")], [0, 1]],
      ["subscribeSA", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSA")], [0, 1]],
      ["subscribeSAPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSAPro")], [0, 1]],
      ["subscribeSM", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSM")], [0, 1]],
      ["subscribeSMPro", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "SubscribeSMPro")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ValidateTestUserRegistrationResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ValidateTestUserRegistrationResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemsRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["rightsOwnerID", [nil, XSD::QName.new(NsEBLBaseComponents, "RightsOwnerID")], [0, 1]],
      ["reportItems", ["VeROReportItemsType", XSD::QName.new(NsEBLBaseComponents, "ReportItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VeROReportItemsResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VeROReportItemsResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["veROReportPacketID", ["SOAP::SOAPLong", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketID")], [0, 1]],
      ["veROReportPacketStatus", ["VeROReportPacketStatusCodeType", XSD::QName.new(NsEBLBaseComponents, "VeROReportPacketStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["item", ["ItemType", XSD::QName.new(NsEBLBaseComponents, "Item")], [0, 1]],
      ["includeExpressRequirements", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "IncludeExpressRequirements")], [0, 1]],
      ["externalProductID", ["ExternalProductIDType", XSD::QName.new(NsEBLBaseComponents, "ExternalProductID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VerifyAddItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["fees", ["FeesType", XSD::QName.new(NsEBLBaseComponents, "Fees")], [0, 1]],
      ["expressListing", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "ExpressListing")], [0, 1]],
      ["expressItemRequirements", ["ExpressItemRequirementsType", XSD::QName.new(NsEBLBaseComponents, "ExpressItemRequirements")], [0, 1]],
      ["categoryID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CategoryID")], [0, 1]],
      ["category2ID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Category2ID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddSecondChanceItemRequestType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemRequest"),
    :schema_element => [
      ["detailLevel", ["DetailLevelCodeType[]", XSD::QName.new(NsEBLBaseComponents, "DetailLevel")], [0, nil]],
      ["errorLanguage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ErrorLanguage")], [0, 1]],
      ["messageID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageID")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["endUserIP", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EndUserIP")], [0, 1]],
      ["errorHandling", ["ErrorHandlingCodeType", XSD::QName.new(NsEBLBaseComponents, "ErrorHandling")], [0, 1]],
      ["invocationID", [nil, XSD::QName.new(NsEBLBaseComponents, "InvocationID")], [0, 1]],
      ["outputSelector", ["SOAP::SOAPString[]", XSD::QName.new(NsEBLBaseComponents, "OutputSelector")], [0, nil]],
      ["warningLevel", ["WarningLevelCodeType", XSD::QName.new(NsEBLBaseComponents, "WarningLevel")], [0, 1]],
      ["botBlock", ["BotBlockRequestType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["recipientBidderUserID", [nil, XSD::QName.new(NsEBLBaseComponents, "RecipientBidderUserID")], [0, 1]],
      ["buyItNowPrice", ["AmountType", XSD::QName.new(NsEBLBaseComponents, "BuyItNowPrice")], [0, 1]],
      ["duration", ["SecondChanceOfferDurationCodeType", XSD::QName.new(NsEBLBaseComponents, "Duration")], [0, 1]],
      ["itemID", [nil, XSD::QName.new(NsEBLBaseComponents, "ItemID")], [0, 1]],
      ["sellerMessage", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "SellerMessage")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VerifyAddSecondChanceItemResponseType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "VerifyAddSecondChanceItemResponse"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["startTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "StartTime")], [0, 1]],
      ["endTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "EndTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemsCanceledEventType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "ItemsCanceledEvent"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["canceledItemIDArray", ["ItemIDArrayType", XSD::QName.new(NsEBLBaseComponents, "CanceledItemIDArray")], [0, 1]],
      ["eligibleForRelist", ["SOAP::SOAPBoolean", XSD::QName.new(NsEBLBaseComponents, "EligibleForRelist")], [0, 1]],
      ["sellerID", [nil, XSD::QName.new(NsEBLBaseComponents, "SellerID")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => NotificationMessageType,
    :schema_name => XSD::QName.new(NsEBLBaseComponents, "NotificationMessage"),
    :schema_element => [
      ["timestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsEBLBaseComponents, "Timestamp")], [0, 1]],
      ["ack", ["AckCodeType", XSD::QName.new(NsEBLBaseComponents, "Ack")], [0, 1]],
      ["correlationID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "CorrelationID")], [0, 1]],
      ["errors", ["ErrorType[]", XSD::QName.new(NsEBLBaseComponents, "Errors")], [0, nil]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Message")], [0, 1]],
      ["version", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Version")], [0, 1]],
      ["build", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "Build")], [0, 1]],
      ["notificationEventName", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationEventName")], [0, 1]],
      ["duplicateInvocationDetails", ["DuplicateInvocationDetailsType", XSD::QName.new(NsEBLBaseComponents, "DuplicateInvocationDetails")], [0, 1]],
      ["recipientUserID", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "RecipientUserID")], [0, 1]],
      ["eIASToken", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIASToken")], [0, 1]],
      ["notificationSignature", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "NotificationSignature")], [0, 1]],
      ["hardExpirationWarning", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "HardExpirationWarning")], [0, 1]],
      ["botBlock", ["BotBlockResponseType", XSD::QName.new(NsEBLBaseComponents, "BotBlock")], [0, 1]],
      ["externalUserData", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "ExternalUserData")], [0, 1]],
      ["any", [nil, XSD::QName.new(NsXMLSchema, "anyType")]],
      ["messageBody", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "MessageBody")], [0, 1]],
      ["eIAS", ["SOAP::SOAPString", XSD::QName.new(NsEBLBaseComponents, "EIAS")], [0, 1]]
    ]
  )
end
